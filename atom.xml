<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yiye Li</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2022-01-04T07:27:19.877Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Yiye Li</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JAVA 学习笔记（日志）</title>
    <link href="http://yoursite.com/2022/01/04/JAVA%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E6%97%A5%E5%BF%97%EF%BC%89/"/>
    <id>http://yoursite.com/2022/01/04/JAVA 学习笔记（日志）/</id>
    <published>2022-01-04T04:12:12.000Z</published>
    <updated>2022-01-04T07:27:19.877Z</updated>
    
    <content type="html"><![CDATA[<p>日志</p><a id="more"></a><p>[TOC]</p><h1 id="Slf4j"><a href="#Slf4j" class="headerlink" title="Slf4j"></a>Slf4j</h1><p>slf4j 的全称是 Simple Loging Facade For Java，即它仅仅是一个为 Java 程序提供日志输出的统一接口，并不是一个具体的日志实现方案，就比如 JDBC 一样，只是一种规则而已。所以单独的 slf4j 是不能工作的，必须搭配其他具体的日志实现方案，比如 apache 的 org.apache.log4j.Logger，jdk 自带<br>的 java.util.logging.Logger 等。</p><h1 id="Log4j"><a href="#Log4j" class="headerlink" title="Log4j"></a>Log4j</h1><p>Log4j 是 Apache 的一个开源项目，通过使用 Log4j，我们可以控制日志信息输送的目的地是控制台、文件、GUI 组件，甚至是套接口服务器、NT 的事件记录器、UNIX Syslog 守护进程等；我们也可以控制每一条日志的输出格式；通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。<br>Log4j 由三个重要的组成构成：日志记录器(Loggers)，输出端(Appenders)和日志格式化器(Layout)。</p><p>1.Logger：控制要启用或禁用哪些日志记录语句，并对日志信息进行级别限制</p><p>2.Appenders : 指定了日志将打印到控制台还是文件中</p><p>3.Layout : 控制日志信息的显示格式</p><p>Log4j 中将要输出的 Log 信息定义了 5 种级别，依次为DEBUG、INFO、WARN、ERROR和FATAL，当输出时，只有级别高过配置中规定的级别的信息才能真正的输出，这样就很方便的来配置不同情况下要输出的内容，而不需要更改代码。</p><p>Log4j最近爆出了一个严重漏洞，可以自行搜索其漏洞产生原因</p><h1 id="LogBack"><a href="#LogBack" class="headerlink" title="LogBack"></a>LogBack</h1><p>简单地说，Logback 是一个 Java 领域的日志框架。它被认为是 Log4J 的继承人。</p><p>Logback 主要由三个模块组成：logback-core，logback-classic。logback-access</p><p>logback-core 是其它模块的基础设施，其它模块基于它构建，显然，logback-core 提供了一些关键的通用机制。</p><p>logback-classic 的地位和作用等同于 Log4J，它也被认为是 Log4J 的一个改进版，并且它实现了简单日志门面 SLF4J；</p><p>logback-access 主要作为一个与 Servlet 容器交互的模块，比如说 tomcat 或者 jetty，提供一些与HTTP 访问相关的功能</p><h2 id="Logback-优点"><a href="#Logback-优点" class="headerlink" title="Logback 优点"></a>Logback 优点</h2><ul><li> 同样的代码路径，Logback 执行更快</li><li> 更充分的测试</li><li> 原生实现了 SLF4J API（Log4J 还需要有一个中间转换层）</li><li> 内容更丰富的文档</li><li> 支持 XML 或者 Groovy 方式配置</li><li> 配置文件自动热加载</li><li> 从 IO 错误中优雅恢复</li><li> 自动删除日志归档</li><li> 自动压缩日志成为归档文件</li><li> 支持 Prudent 模式，使多个 JVM 进程能记录同一个日志文件</li><li> 支持配置文件中加入条件判断来适应不同的环境</li><li> 更强大的过滤器</li><li> 支持 SiftingAppender（可筛选 Appender）</li><li> 异常栈信息带有包信息</li></ul><h1 id="ELK"><a href="#ELK" class="headerlink" title="ELK"></a>ELK</h1><p>ELK 是软件集合 Elasticsearch、Logstash、Kibana 的简称，由这三个软件及其相关的组件可以打造大规模日志实时处理系统。</p><p> Elasticsearch 是一个基于 Lucene 的、支持全文索引的分布式存储和索引引擎，主要负责将日志索引并存储起来，方便业务方检索查询。</p><p> Logstash 是一个日志收集、过滤、转发的中间件，主要负责将各条业务线的各类日志统一收集、过滤后，转发给 Elasticsearch 进行下一步处理。</p><p> Kibana 是一个可视化工具，主要负责查询 Elasticsearch 的数据并以可视化的方式展现给业务方，比如各类饼图、直方图、区域图等。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;日志&lt;/p&gt;
    
    </summary>
    
      <category term="2022年1月" scheme="http://yoursite.com/categories/2022%E5%B9%B41%E6%9C%88/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Log" scheme="http://yoursite.com/tags/Log/"/>
    
  </entry>
  
  <entry>
    <title>28. 实现 strStr()</title>
    <link href="http://yoursite.com/2022/01/03/28.%20%E5%AE%9E%E7%8E%B0%20strStr()/"/>
    <id>http://yoursite.com/2022/01/03/28. 实现 strStr()/</id>
    <published>2022-01-03T13:12:12.000Z</published>
    <updated>2022-01-04T09:53:56.253Z</updated>
    
    <content type="html"><![CDATA[<p>实现 strStr() 函数。</p><a id="more"></a><p>[TOC]</p><p>给你两个字符串 haystack 和 needle ，请你在 haystack 字符串中找出 needle 字符串出现的第一个位置（下标从 0 开始）。如果不存在，则返回  -1 。</p><p>说明：</p><p>当 needle 是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。</p><p>对于本题而言，当 needle 是空字符串时我们应当返回 0 。这与 C 语言的 strstr() 以及 Java 的 indexOf() 定义相符。</p><p>示例 1：</p><pre><code>输入：haystack = &quot;hello&quot;, needle = &quot;ll&quot;输出：2</code></pre><p>示例 2：</p><pre><code>输入：haystack = &quot;aaaaa&quot;, needle = &quot;bba&quot;输出：-1</code></pre><p>示例 3：</p><pre><code>输入：haystack = &quot;&quot;, needle = &quot;&quot;输出：0</code></pre><p>提示：</p><p>0 &lt;= haystack.length, needle.length &lt;= 5 * 104</p><p>haystack 和 needle 仅由小写英文字符组成</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本题是经典的字符串单模匹配的模型，因此可以使用字符串匹配算法解决，常见的字符串匹配算法包括暴力匹配、Knuth-Morris-Pratt算法、{Boyer-Moore 算法、Sunday 算法等，本文将讲解 Knuth-Morris-Pratt 算法。</p><p>因为哈希方法可能出现哈希值相等但是字符串不相等的情况，而strStr 函数要求匹配结果必定正确，因此本文不介绍哈希方法，有兴趣的读者可以自行了解滚动哈希的实现（如 Rabin-Karp  算法）。</p><h1 id="方法一：暴力匹配"><a href="#方法一：暴力匹配" class="headerlink" title="方法一：暴力匹配"></a>方法一：暴力匹配</h1><p><strong>思路及算法</strong></p><p>我们可以让字符串 needle 与字符串 haystack 的所有长度为 <em>m</em> 的子串均匹配一次。</p><p>为了减少不必要的匹配，我们每次匹配失败即立刻停止当前子串的匹配，对下一个子串继续匹配。如果当前子串匹配成功，我们返回当前子串的开始位置即可。如果所有子串都匹配失败，则返回 <em>-1</em>。</p><p><strong>代码</strong></p><details>    <summary>C++</summary><figure class="highlight c++"><figcaption><span>[sol1-C++]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">strStr</span><span class="params">(<span class="built_in">string</span> haystack, <span class="built_in">string</span> needle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = haystack.size(), m = needle.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i + m &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (haystack[i + j] != needle[j]) &#123;</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></details><details>    <summary>Java</summary><figure class="highlight java"><figcaption><span>[sol1-Java]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">strStr</span><span class="params">(String haystack, String needle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = haystack.length(), m = needle.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i + m &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (haystack.charAt(i + j) != needle.charAt(j)) &#123;</span><br><span class="line">                    flag = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>Java</summary><figure class="highlight javascript"><figcaption><span>[sol1-JavaScript]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> strStr = <span class="function"><span class="keyword">function</span>(<span class="params">haystack, needle</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> n = haystack.length, m = needle.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i + m &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (haystack[i + j] != needle[j]) &#123;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></details><details>    <summary>Golang</summary><figure class="highlight go"><figcaption><span>[sol1-Golang]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">strStr</span><span class="params">(haystack, needle <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    n, m := <span class="built_in">len</span>(haystack), <span class="built_in">len</span>(needle)</span><br><span class="line">outer:</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i+m &lt;= n; i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> j := <span class="keyword">range</span> needle &#123;</span><br><span class="line">            <span class="keyword">if</span> haystack[i+j] != needle[j] &#123;</span><br><span class="line">                <span class="keyword">continue</span> outer</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>C</summary><figure class="highlight c"><figcaption><span>[sol1-C]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">strStr</span><span class="params">(<span class="keyword">char</span>* haystack, <span class="keyword">char</span>* needle)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="built_in">strlen</span>(haystack), m = <span class="built_in">strlen</span>(needle);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i + m &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (haystack[i + j] != needle[j]) &#123;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h1 id="方法二：Knuth-Morris-Pratt-算法-1-3"><a href="#方法二：Knuth-Morris-Pratt-算法-1-3" class="headerlink" title="方法二：Knuth-Morris-Pratt 算法^1^3:"></a>方法二：Knuth-Morris-Pratt 算法<a href="https://leetcode-cn.com/problems/implement-strstr/solution/shua-chuan-lc-shuang-bai-po-su-jie-fa-km-tb86/" target="_blank" rel="noopener">^1</a><a href="https://leetcode-cn.com/problems/implement-strstr/solution/duo-tu-yu-jing-xiang-jie-kmp-suan-fa-by-w3c9c/" target="_blank" rel="noopener">^3</a>:</h1><p>KMP 算法的关键，就在回退这个步骤。</p><p>next 数组存放的是当前长度下的 最长相同前后缀 的长度</p><details>    <summary>C++</summary><figure class="highlight c++"><figcaption><span>[sol1-C++]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">strStr</span><span class="params">(<span class="built_in">string</span> haystack, <span class="built_in">string</span> needle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = haystack.size(), m = needle.size();</span><br><span class="line">        <span class="keyword">if</span> (m == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pi(m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; needle[i] != needle[j]) &#123;</span><br><span class="line">                j = pi[j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (needle[i] == needle[j]) &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            pi[i] = j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; haystack[i] != needle[j]) &#123;</span><br><span class="line">                j = pi[j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (haystack[i] == needle[j]) &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j == m) &#123;</span><br><span class="line">                <span class="keyword">return</span> i - m + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></details><details>    <summary>Java</summary><figure class="highlight java"><figcaption><span>[sol1-Java]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">strStr</span><span class="params">(String haystack, String needle)</span> </span>&#123;</span><br><span class="line"><span class="comment">//自己敲一下子 前缀表不需要减一的实现方式</span></span><br><span class="line">        <span class="keyword">int</span> needleLength = needle.length();</span><br><span class="line">        <span class="keyword">if</span> (needleLength == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">//        当needle是空字符串时，返回0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] next = <span class="keyword">new</span> <span class="keyword">int</span>[needleLength];</span><br><span class="line"><span class="comment">//        定义好next数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> right = <span class="number">1</span>, left = <span class="number">0</span>; right &lt; needleLength; right++) &#123;</span><br><span class="line"><span class="comment">//            定义好两个指针right与left</span></span><br><span class="line"><span class="comment">//            在for循环中初始化指针right为1，left=0,开始计算next数组，right始终在left指针的后面</span></span><br><span class="line">            <span class="keyword">while</span> (left &gt; <span class="number">0</span> &amp;&amp; needle.charAt(left) != needle.charAt(right)) &#123;</span><br><span class="line"><span class="comment">//                如果不相等就让left指针回退，到0时就停止回退</span></span><br><span class="line">                left = next[left - <span class="number">1</span>];<span class="comment">//进行回退操作；</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (needle.charAt(left) == needle.charAt(right)) &#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            next[right] = left;</span><br><span class="line"><span class="comment">// 这是从 1 开始的</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 循环结束的时候，next数组就已经计算完毕了</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>,j=<span class="number">0</span>; i &lt;haystack.length() ; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (j&gt;<span class="number">0</span>&amp;&amp;haystack.charAt(i)!=needle.charAt(j))&#123;</span><br><span class="line">                j=next[j-<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (haystack.charAt(i)==needle.charAt(j))&#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j==needleLength) <span class="keyword">return</span> i-needleLength+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>JavaScript</summary><figure class="highlight javascript"><figcaption><span>[sol1-JavaScript]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> strStr = <span class="function"><span class="keyword">function</span>(<span class="params">haystack, needle</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> n = haystack.length, m = needle.length;</span><br><span class="line">    <span class="keyword">if</span> (m === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> pi = <span class="keyword">new</span> <span class="built_in">Array</span>(m).fill(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; needle[i] !== needle[j]) &#123;</span><br><span class="line">            j = pi[j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (needle[i] == needle[j]) &#123;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        pi[i] = j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; haystack[i] != needle[j]) &#123;</span><br><span class="line">            j = pi[j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (haystack[i] == needle[j]) &#123;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (j === m) &#123;</span><br><span class="line">            <span class="keyword">return</span> i - m + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></details><details>    <summary>Golang</summary><figure class="highlight go"><figcaption><span>[sol1-Golang]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">strStr</span><span class="params">(haystack, needle <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    n, m := <span class="built_in">len</span>(haystack), <span class="built_in">len</span>(needle)</span><br><span class="line">    <span class="keyword">if</span> m == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    pi := <span class="built_in">make</span>([]<span class="keyword">int</span>, m)</span><br><span class="line">    <span class="keyword">for</span> i, j := <span class="number">1</span>, <span class="number">0</span>; i &lt; m; i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> j &gt; <span class="number">0</span> &amp;&amp; needle[i] != needle[j] &#123;</span><br><span class="line">            j = pi[j<span class="number">-1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> needle[i] == needle[j] &#123;</span><br><span class="line">            j++</span><br><span class="line">        &#125;</span><br><span class="line">        pi[i] = j</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i, j := <span class="number">0</span>, <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">        <span class="keyword">for</span> j &gt; <span class="number">0</span> &amp;&amp; haystack[i] != needle[j] &#123;</span><br><span class="line">            j = pi[j<span class="number">-1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> haystack[i] == needle[j] &#123;</span><br><span class="line">            j++</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> j == m &#123;</span><br><span class="line">            <span class="keyword">return</span> i - m + <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>C</summary><figure class="highlight c"><figcaption><span>[sol1-C]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">strStr</span><span class="params">(<span class="keyword">char</span>* haystack, <span class="keyword">char</span>* needle)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="built_in">strlen</span>(haystack), m = <span class="built_in">strlen</span>(needle);</span><br><span class="line">    <span class="keyword">if</span> (m == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> pi[m];</span><br><span class="line">    pi[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; needle[i] != needle[j]) &#123;</span><br><span class="line">            j = pi[j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (needle[i] == needle[j]) &#123;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        pi[i] = j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; haystack[i] != needle[j]) &#123;</span><br><span class="line">            j = pi[j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (haystack[i] == needle[j]) &#123;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (j == m) &#123;</span><br><span class="line">            <span class="keyword">return</span> i - m + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;实现 strStr() 函数。&lt;/p&gt;
    
    </summary>
    
      <category term="2022年1月" scheme="http://yoursite.com/categories/2022%E5%B9%B41%E6%9C%88/"/>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="String" scheme="http://yoursite.com/tags/String/"/>
    
      <category term="Two Pointers" scheme="http://yoursite.com/tags/Two-Pointers/"/>
    
      <category term="String Matching" scheme="http://yoursite.com/tags/String-Matching/"/>
    
      <category term="KMP Algorithm" scheme="http://yoursite.com/tags/KMP-Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>JAVA 学习笔记（网络7层架构，TCP，HTTP和CDN原理）</title>
    <link href="http://yoursite.com/2022/01/03/JAVA%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E7%BD%91%E7%BB%9C7%E5%B1%82%E6%9E%B6%E6%9E%84%EF%BC%8CTCP%EF%BC%8CHTTP%E5%92%8CCDN%E5%8E%9F%E7%90%86%EF%BC%89/"/>
    <id>http://yoursite.com/2022/01/03/JAVA 学习笔记（网络7层架构，TCP，HTTP和CDN原理）/</id>
    <published>2022-01-03T13:12:12.000Z</published>
    <updated>2022-01-04T03:43:08.490Z</updated>
    
    <content type="html"><![CDATA[<p>网络7层架构，TCP，HTTP和CDN原理</p><a id="more"></a><p>[TOC]</p><h1 id="网络-7-层架构"><a href="#网络-7-层架构" class="headerlink" title="网络 7 层架构"></a>网络 7 层架构</h1><p>7 层模型主要包括：</p><ol><li>物理层：主要定义物理设备标准，如网线的接口类型、光纤的接口类型、各种传输介质的传输速率等。它的主要作用是传输比特流（就是由 1、0 转化为电流强弱来进行传输,到达目的地后在转化为1、0，也就是我们常说的模数转换与数模转换）。这一层的数据叫做比特。</li><li>数据链路层：主要将从物理层接收的数据进行MAC地址（网卡的地址）的封装与解封装。常把这一层的数据叫做帧。在这一层工作的设备是交换机，数据通过交换机来传输。</li><li>网络层：主要将从下层接收到的数据进行 IP 地址（例 192.168.0.1)的封装与解封装。在这一层工作的设备是路由器，常把这一层的数据叫做数据包。</li><li>传输层：定义了一些传输数据的协议和端口号（WWW端口80等），如：TCP（传输控制协议，传输效率低，可靠性强，用于传输可靠性要求高，数据量大的数据），UDP（用户数据报协议，与 TCP 特性恰恰相反，用于传输可靠性要求不高，数据量小的数据，如QQ聊天数据就是通过这种方式传输的）。主要是将从下层接收的数据进行分段进行传输，到达目的地址后在进行重组。常常把这一层数据叫做段。</li><li>会话层：通过传输层（端口号：传输端口与接收端口）建立数据传输的通路。主要在你的系统之间发起会话或或者接受会话请求（设备之间需要互相认识可以是 IP 也可以是 MAC 或者是主机名）</li><li>表示层：主要是进行对接收的数据进行解释、加密与解密、压缩与解压缩等（也就是把计算机能够识别的东西转换成人能够能识别的东西（如图片、声音等））</li><li>应用层 主要是一些终端的应用，比如说FTP（各种文件下载），WEB（IE浏览），QQ之类的（你就把它理解成我们在电脑屏幕上可以看到的东西．就 是终端应用）。</li></ol><h1 id="TCP-IP-原理"><a href="#TCP-IP-原理" class="headerlink" title="TCP/IP 原理"></a>TCP/IP 原理</h1><p>TCP/IP 协议不是 TCP 和 IP 这两个协议的合称，而是指因特网整个 TCP/IP 协议族。从协议分层模型方面来讲，TCP/IP 由四个层次组成：网络接口层、网络层、传输层、应用层。</p><h2 id="网络访问层-Network-Access-Layer"><a href="#网络访问层-Network-Access-Layer" class="headerlink" title="网络访问层(Network Access Layer)"></a>网络访问层(Network Access Layer)</h2><ol><li>网络访问层(Network Access Layer)在 TCP/IP 参考模型中并没有详细描述，只是指出主机必须使用某种协议与网络相连。</li></ol><h2 id="网络层-Internet-Layer"><a href="#网络层-Internet-Layer" class="headerlink" title="网络层(Internet Layer)"></a>网络层(Internet Layer)</h2><ol start="2"><li>网络层(Internet Layer)是整个体系结构的关键部分，其功能是使主机可以把分组发往任何网络，并使分组独立地传向目标。这些分组可能经由不同的网络，到达的顺序和发送的顺序也可能不同。高层如果需要顺序收发，那么就必须自行处理对分组的排序。互联网层使用因特网协议(IP，Internet Protocol)。</li></ol><h2 id="传输层-Tramsport-Layer-TCP-UDP"><a href="#传输层-Tramsport-Layer-TCP-UDP" class="headerlink" title="传输层(Tramsport Layer-TCP/UDP)"></a>传输层(Tramsport Layer-TCP/UDP)</h2><ol start="3"><li>传输层(Tramsport Layer)使源端和目的端机器上的对等实体可以进行会话。在这一层定义了两个端到端的协议：传输控制协议(TCP，Transmission Control Protocol)和用户数据报协议(UDP，User Datagram Protocol)。TCP是面向连接的协议，它提供可靠的报文传输和对上层应用的连接服务。为此，除了基本的数据传输外，它还有可靠性保证、流量控制、多路<br>复用、优先权和安全性控制等功能。UDP 是面向无连接的不可靠传输的协议，主要用于不需要 TCP 的排序和流量控制等功能的应用程序。</li></ol><h1 id="应用层-Application-Layer"><a href="#应用层-Application-Layer" class="headerlink" title="应用层(Application Layer)"></a>应用层(Application Layer)</h1><ol start="4"><li>应用层(Application Layer)包含所有的高层协议，包括：虚拟终端协议(TELNET，TELecommunications NETwork)、文件传输协议(FTP，File Transfer Protocol)、电子邮件传输协议(SMTP，Simple Mail Transfer Protocol)、域名服务(DNS，Domain Name Service)、网上新闻传输协议(NNTP，Net News Transfer Protocol)和超文本传送协议(HTTP，HyperText Transfer Protocol)等。</li></ol><h1 id="TCP-三次握手-四次挥手"><a href="#TCP-三次握手-四次挥手" class="headerlink" title="TCP 三次握手/四次挥手"></a>TCP 三次握手/四次挥手</h1><p>TCP 在传输之前会进行三次沟通，一般称为“三次握手”，传完数据断开的时候要进行四次沟通，一般称为“四次挥手”。</p><h2 id="数据包说明"><a href="#数据包说明" class="headerlink" title="数据包说明"></a>数据包说明</h2><ol><li>源端口号（ 16 位）：它（连同源主机 IP 地址）标识源主机的一个应用进程。</li><li>目的端口号（ 16 位）：它（连同目的主机 IP 地址）标识目的主机的一个应用进程。这两个值加上 IP 报头中的源主机 IP 地址和目的主机 IP 地址唯一确定一个 TCP 连接。</li><li>顺序号 seq（ 32 位）：用来标识从 TCP源端向TCP目的端发送的数据字节流，它表示在这个报文段中的第一个数据字节的顺序号。如果将字节流看作在两个应用程序间的单向流动，则TCP 用顺序号对每个字节进行计数。序号是 32bit 的无符号数，序号到达 2 的 32 次方 － 1 后又从 0 开始。当建立一个新的连接时， SYN 标志变 1 ，顺序号字段包含由这个主机选择的该连接的初始顺序号 ISN （ Initial Sequence Number ）。</li><li>确认号 ack（ 32 位）：包含发送确认的一端所期望收到的下一个顺序号。因此，确认序号应当是上次已成功收到数据字节顺序号加 1 。只有 ACK 标志为 1 时确认序号字段才有效。 TCP 为应用层提供全双工服务，这意味数据能在两个方向上独立地进行传输。因此，连接的每一端必须保持每个方向上的传输数据顺序号。</li><li>TCP 报头长度（ 4 位）：给出报头中 32bit 字的数目，它实际上指明数据从哪里开始。需要这个值是因为任选字段的长度是可变的。这个字段占 4bit ，因此 TCP 最多有 60 字节的首部。然而，没有任选字段，正常的长度是 20 字节。</li><li>保留位（ 6 位）：保留给将来使用，目前必须置为 0 。</li><li>控制位（ control flags ， 6 位）：在 TCP 报头中有 6 个标志比特，它们中的多个可同时被设置为 1 。依次为：</li></ol><ul><li>URG ：为 1 表示紧急指针有效，为 0 则忽略紧急指针值。</li><li>ACK ：为 1 表示确认号有效，为 0 表示报文中不包含确认信息，忽略确认号字段。</li><li>PSH ：为 1 表示是带有 PUSH 标志的数据，指示接收方应该尽快将这个报文段交给应用层而不用等待缓冲区装满。</li><li>RST ：用于复位由于主机崩溃或其他原因而出现错误的连接。它还可以用于拒绝非法的报文段和拒绝连接请求。一般情况下，如果收到一个 RST 为 1 的报文，那么一定发生了某些问题。</li><li>SYN ：同步序号，为 1 表示连接请求，用于建立连接和使顺序号同步（ synchronize ）。</li><li>FIN ：用于释放连接，为 1 表示发送方已经没有数据发送了，即关闭本方数据流。</li></ul><ol start="8"><li><p>窗口大小（ 16 位）：数据字节数，表示从确认号开始，本报文的源方可以接收的字节数，即源方接收窗口大小。窗口大小是一个 16bit 字段，因而窗口大小最大为 65535 字节。</p></li><li><p>校验和（ 16 位）：此校验和是对整个的TCP报文段，包括TCP头部和TCP数据，以16位字进行计算所得。这是一个强制性的字段，一定是由发送端计算和存储，并由接收端进行验证。</p></li><li><p>紧急指针（ 16 位）：只有当 URG 标志置 1 时紧急指针才有效。TCP 的紧急方式是发送端向另一端发送紧急数据的一种方式。</p></li><li><p>选项：最常见的可选字段是最长报文大小，又称为 MSS(Maximum Segment Size) 。每个连接方通常都在通信的第一个报文段（为建立连接而设置 SYN 标志的那个段）中指明这个选项，它指明本端所能接收的最大长度的报文段。选项长度不一定是 32 位字的整数倍，所以要加填充位，使得报头长度成为整字数。</p></li><li><p>数据： TCP 报文段中的数据部分是可选的。在一个连接建立和一个连接终止时，双方交换的报文段仅有TCP首部。如果一方没有数据要发送，也使用没有任何数据的首部来确认收到的数据。在处理超时的许多情况中，也会发送不带任何数据的报文段。</p></li></ol><h2 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h2><p>第一次握手：主机 A 发送位码为 syn＝1,随机产生 seq number=1234567 的数据包到服务器，主机 B由 SYN=1 知道，A 要求建立联机；</p><p>第二次握手：主机 B 收到请求后要确认联机信息，向 A 发 送 ack number=( 主 机 A 的seq+1),syn=1,ack=1,随机产生 seq=7654321 的包</p><p>第三次握手：主机 A 收到后检查 ack number 是否正确，即第一次发送的 seq number+1,以及位码ack 是否为 1，若正确，主机 A 会再发送 ack number=(主机 B 的 seq+1),ack=1，主机 B 收到后确认seq 值与 ack=1 则连接建立成功</p><h2 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h2><p>TCP 建立连接要进行三次握手，而断开连接要进行四次。这是由于TCP的半关闭造成的。因为TCP连接是全双工的(即数据可在两个方向上同时传递)所以进行关闭时每个方向上都要单独进行关闭。这个单方向的关闭就叫半关闭。当一方完成它的数据发送任务，就发送一个 FIN 来向另一方通告将要终止这个方向的连接。</p><p>1） 关闭客户端到服务器的连接：首先客户端 A 发送一个 FIN，用来关闭客户到服务器的数据传送，然后等待服务器的确认。其中终止标志位 FIN=1，序列号 seq=u</p><p>2） 服务器收到这个 FIN，它发回一个 ACK，确认号 ack 为收到的序号加 1。</p><p>3） 关闭服务器到客户端的连接：也是发送一个 FIN 给客户端。</p><p>4） 客户段收到 FIN 后，并发回一个 ACK 报文确认，并将确认序号 seq 设置为收到序号加 1。</p><p>首先进行关闭的一方将执行主动关闭，而另一方执行被动关闭。</p><p>主机 A 发送 FIN 后，进入终止等待状态， 服务器 B 收到主机 A 连接释放报文段后，就立即给主机 A 发送确认，然后服务器 B 就进入 close-wait 状态，此时 TCP 服务器进程就通知高层应用进程，因而从 A 到 B 的连接就释放了。此时是“半关闭”状态。即 A 不可以发送给B，但是 B 可以发送给 A。此时，若 B 没有数据报要发送给 A 了，其应用进程就通知 TCP 释放连接，然后发送给 A 连接释放报文段，并等待确认。A 发送确认后，进入 time-wait，注意，此时 TCP 连接还没有释放掉，然后经过时间等待计时器设置的 2MSL  (Maximum Segment Lifetime，报文最大生存时间)后，A 才进入到close 状态。</p><h1 id="HTTP-原理"><a href="#HTTP-原理" class="headerlink" title="HTTP 原理"></a>HTTP 原理</h1><p>HTTP 是一个无状态的协议。无状态是指客户机（Web浏览器）和服务器之间不需要建立持久的连接，这意味着当一个客户端向服务器端发出请求，然后服务器返回响应(response)，连接就被关闭了，在服务器端不保留连接的有关信息.HTTP遵循请求(Request)/应答(Response)模型。客户机（浏览器）向服务器发送请求，服务器处理请求并返回适当的应答。所有 HTTP 连接都被构造成一套请求和应答。</p><h2 id="传输流程"><a href="#传输流程" class="headerlink" title="传输流程"></a>传输流程</h2><p>1：地址解析</p><p>如用客户端浏览器请求这个页面：<a href="http://localhost.com:8080/index.htm从中分解出协议名、主机名、端口、对象路径等部分，对于我们的这个地址，解析得到的结果如下：" target="_blank" rel="noopener">http://localhost.com:8080/index.htm从中分解出协议名、主机名、端口、对象路径等部分，对于我们的这个地址，解析得到的结果如下：</a></p><pre><code>协议名：http主机名：localhost.com端口：8080对象路径：/index.htm</code></pre><p>在这一步，需要域名系统 DNS 解析域名 localhost.com,得主机的 IP 地址。</p><p>2：封装 HTTP 请求数据包</p><p>把以上部分结合本机自己的信息，封装成一个 HTTP 请求数据包</p><p>3：封装成 TCP 包并建立连接</p><p>封装成 TCP 包，建立 TCP 连接（TCP 的三次握手）<br>4：客户机发送请求命</p><p>客户机发送请求命令：建立连接后，客户机发送一个请求给服务器，请求方式的格式为：统一资源标识符（URL）、协议版本号，后边是MIME信息包括请求修饰符、客户机信息和可内容。</p><p>5：服务器响应</p><p>服务器接到请求后，给予相应的响应信息，其格式为一个状态行，包括信息的协议版本号、一个成功或错误的代码，后边是MIME( Multipurpose Internet Mail Extensions 描述消息内容类型的因特网标准) 信息包括服务器信息、实体信息和可能的内容。</p><p>6：服务器关闭 TCP 连接</p><p> 服务器关闭 TCP 连接：一般情况下，一旦 Web 服务器向浏览器发送了请求数据，它就要关闭 TCP 连接，然后如果浏览器或者服务器在其头信息加入了这行代码 Connection:keep-alive，TCP 连接在发送后将仍然保持打开状态，于是，浏览器可以继续通过相同的连接发送请求。保持连接节省了为每个请求建立新连接所需的时间，还节约了网络带宽</p><h2 id="HTTP-状态码"><a href="#HTTP-状态码" class="headerlink" title="HTTP 状态码"></a>HTTP 状态码</h2><pre><code>状态码 原因短语消息响应100 Continue(继续)101 Switching Protocol(切换协议)200 OK(成功)201 Created(已创建)202 Accepted(已创建)203 Non-Authoritative Information(未授权信息)204 No Content(无内容)205 Reset Content(重置内容)206 Partial Content(部分内容)重定向300 Multiple Choice(多种选择)301 Moved Permanently(永久移动)302 Found(临时移动)303 See Other(查看其他位置)304 Not Modified(未修改)305 Use Proxy(使用代理)306 unused(未使用)307 Temporary Redirect(临时重定向)308 Permanent Redirect(永久重定向)客户端错误400 Bad Request(错误请求)401 Unauthorized(未授权)402 Payment Required(需要付款)403 Forbidden(禁止访问)404 Not Found(未找到)405 Method Not Allowed(不允许使用该方法)406 Not Acceptable(无法接受)407 Proxy Authentication Required(要求代理身份验证)408 Request Timeout(请求超时)409 Conflict(冲突)410 Gone(已失效)411 Length Required(需要内容长度头)412 Precondition Failed(预处理失败)413 Request Entity Too Large(请求实体过长)414 Request-URI Too Long(请求网址过长)415 Unsupported Media Type(媒体类型不支持)416 Requested Range Not Satisfiable(请求范围不合要求)417 Expectation Failed(预期结果失败)服务器端错误500 Internal Server Error(内部服务器错误)501 Implemented(未实现)502 Bad Gateway(网关错误)503 Service Unavailable(服务不可用)504 Gateway Timeout (网关超时)505 HTTP Version Not Supported(HTTP 版本不受支持)</code></pre><h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><p>HTTPS（全称：Hypertext Transfer Protocol over Secure Socket Layer），是以安全为目标的HTTP 通道，简单讲是 HTTP 的安全版。即 HTTP 下加入 SSL 层，HTTPS 的安全基础是 SSL。其所用的端口号是 443。 过程大致如下：</p><h3 id="建立连接获取证书"><a href="#建立连接获取证书" class="headerlink" title="建立连接获取证书"></a>建立连接获取证书</h3><p>1） SSL 客户端通过 TCP 和服务器建立连接之后（443端口），并且在一般的tcp连接协商（握手）过程中请求证书。即客户端发出一个消息给服务器，这个消息里面包含了自己可实现的算法列表和其它一些需要的消息，SSL的服务器端会回应一个数据包，这里面确定了这次通信所需要的算法，然后服务器向客户端返回证书。（证书里面包含了服务器信息：域名。申请证书的公司，公共秘钥）。</p><h3 id="证书验证"><a href="#证书验证" class="headerlink" title="证书验证"></a>证书验证</h3><p>2） Client 在收到服务器返回的证书后，判断签发这个证书的公共签发机构，并使用这个机构的公共秘钥确认签名是否有效，客户端还会确保证书中列出的域名就是它正在连接的域名。</p><h3 id="数据加密和传输"><a href="#数据加密和传输" class="headerlink" title="数据加密和传输"></a>数据加密和传输</h3><p>3） 如果确认证书有效，那么生成对称秘钥并使用服务器的公共秘钥进行加密。然后发送给服务器，服务器使用它的私钥对它进行解密，这样两台计算机可以开始进行对称加密进行通信。</p><h1 id="CDN-原理"><a href="#CDN-原理" class="headerlink" title="CDN 原理"></a>CDN 原理</h1><p>CND 一般包含分发服务系统、负载均衡系统和管理系统</p><h2 id="分发服务系统"><a href="#分发服务系统" class="headerlink" title="分发服务系统"></a>分发服务系统</h2><p>其基本的工作单元就是各个 Cache 服务器。负责直接响应用户请求，将内容快速分发到用户；同时还负责内容更新，保证和源站内容的同步。</p><p>根据内容类型和服务种类的不同，分发服务系统分为多个子服务系统，如：网页加速服务、流媒体加速服务、应用加速服务等。每个子服务系统都是一个分布式的服务集群，由功能类似、地域接近的分布部署的 Cache 集群组成。</p><p>在承担内容同步、更新和响应用户请求之外，分发服务系统还需要向上层的管理调度系统反馈各个Cache设备的健康状况、响应情况、内容缓存状况等，以便管理调度系统能够根据设定的策略决定由哪个 Cache 设备来响应用户的请求。</p><h2 id="负载均衡系统："><a href="#负载均衡系统：" class="headerlink" title="负载均衡系统："></a>负载均衡系统：</h2><p>负载均衡系统是整个 CDN 系统的中枢。负责对所有的用户请求进行调度，确定提供给用户的最终访问地址。</p><p>使用分级实现。最基本的两极调度体系包括全局负载均衡（GSLB）和本地负载均衡（SLB）。</p><p>GSLB 根据用户地址和用户请求的内容，主要根据就近性原则，确定向用户服务的节点。一般通过 DNS解析或者应用层重定向（Http 3XX 重定向）的方式实现。</p><p>SLB 主要负责节点内部的负载均衡。当用户请求从 GSLB 调度到 SLB 时，SLB 会根据节点内各个Cache 设备的工作状况和内容分布情况等对用户请求重定向。SLB 的实现有四层调度（LVS）、七层调度（Nginx）和链路负载调度等。</p><h2 id="管理系统："><a href="#管理系统：" class="headerlink" title="管理系统："></a>管理系统：</h2><p>分为运营管理和网络管理子系统。</p><p>网络管理系统实现对 CDN 系统的设备管理、拓扑管理、链路监控和故障管理，为管理员提供对全网资源的可视化的集中管理，通常用 web 方式实现。</p><p>运营管理是对 CDN 系统的业务管理，负责处理业务层面的与外界系统交互所必须的一些收集、整理、交付工作。包括用户管理、产品管理、计费管理、统计分析等。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;网络7层架构，TCP，HTTP和CDN原理&lt;/p&gt;
    
    </summary>
    
      <category term="2022年1月" scheme="http://yoursite.com/categories/2022%E5%B9%B41%E6%9C%88/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Network" scheme="http://yoursite.com/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>796. 旋转字符串</title>
    <link href="http://yoursite.com/2022/01/03/796.%20%E6%97%8B%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://yoursite.com/2022/01/03/796. 旋转字符串/</id>
    <published>2022-01-03T12:44:12.000Z</published>
    <updated>2022-01-03T12:57:41.736Z</updated>
    
    <content type="html"><![CDATA[<p>给定两个字符串, A和B。</p><p>A的旋转操作就是将A 最左边的字符移动到最右边。例如,若A=’abcde’，在移动一次之后结果就是’bcdea’。如果在若干次旋转操作之后，A能变成B，那么返回True。</p><a id="more"></a><p>[TOC]</p><p>示例 1:</p><pre><code>输入: A = &apos;abcde&apos;, B = &apos;cdeab&apos;输出: true</code></pre><p>示例 2:</p><pre><code>输入: A = &apos;abcde&apos;, B = &apos;abced&apos;输出: false</code></pre><p>注意：</p><p>A 和B长度不超过100。</p><h1 id="方法一：穷举法"><a href="#方法一：穷举法" class="headerlink" title="方法一：穷举法"></a>方法一：穷举法</h1><p>将字符串 <code>A</code> 旋转 <code>s</code> 次后，得到的字符串为 <code>A[s], A[s + 1], A[s + 2], ...</code>，因此我们只要枚举 <code>s</code>，并检查是否有 <code>A[s] == B[0], A[s + 1] == B[1], A[s + 2] == B[2], ...</code> 即可。</p><details>    <summary>Java</summary><figure class="highlight java"><figcaption><span>[sol1]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">rotateString</span><span class="params">(String A, String B)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (A.length() != B.length())</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (A.length() == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        search:</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> s = <span class="number">0</span>; s &lt; A.length(); ++s) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A.length(); ++i) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (A.charAt((s+i) % A.length()) != B.charAt(i))</span><br><span class="line">                        <span class="keyword">continue</span> search;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>Python</summary><figure class="highlight python"><figcaption><span>[sol1]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rotateString</span><span class="params">(self, A, B)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> len(A) != len(B):</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">if</span> len(A) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> xrange(len(A)):</span><br><span class="line">            <span class="keyword">if</span> all(A[(s+i) % len(A)] == B[i] <span class="keyword">for</span> i <span class="keyword">in</span> xrange(len(A))):</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure></details><p><strong>复杂度分析</strong></p><ul><li><p>时间复杂度：<em>O(N^2)*，其中 *N</em> 是字符串 <code>A</code> 的长度。</p></li><li><p>空间复杂度：<em>O(1)</em>。</p></li></ul><h1 id="方法二：判断子串"><a href="#方法二：判断子串" class="headerlink" title="方法二：判断子串"></a>方法二：判断子串</h1><p>由于 <code>A + A</code> 包含了所有可以通过旋转操作从 <code>A</code> 得到的字符串，因此我们只需要判断 <code>B</code> 是否为 <code>A + A</code> 的子串即可。</p><details>    <summary>Java</summary><figure class="highlight java"><figcaption><span>[sol2]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">rotateString</span><span class="params">(String A, String B)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> A.length() == B.length() &amp;&amp; (A + A).contains(B);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>Python</summary><figure class="highlight python"><figcaption><span>[sol2]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rotateString</span><span class="params">(self, A, B)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> len(A) == len(B) <span class="keyword">and</span> B <span class="keyword">in</span> A+A</span><br></pre></td></tr></table></figure></details><p><strong>复杂度分析</strong></p><ul><li><p>时间复杂度：<em>O(N^2)*，其中 *N</em> 是字符串 <code>A</code> 的长度。</p></li><li><p>空间复杂度：<em>O(N)</em>，即 <code>A + A</code> 需要的空间。</p></li></ul><h1 id="方法三：Rabin-Karp-字符串哈希"><a href="#方法三：Rabin-Karp-字符串哈希" class="headerlink" title="方法三：Rabin-Karp 字符串哈希"></a>方法三：Rabin-Karp 字符串哈希</h1><p>我们可以优化方法二中判断 <code>B</code> 是否为 <code>A + A</code> 的子串时使用的算法，例如使用 Rabin-Karp 字符串哈希算法。设 <code>A2 = A + A</code>，我们求出子串 <code>A2[0:N], A2[1:N + 1], A2[2:N + 2], ...</code> 的哈希值，如果与 <code>B</code> 的哈希值相同，那么这两个字符串很有可能相同。</p><p>我们通过 <code>hash(S) = (S[0] * P**0 + S[1] * P**1 + S[2] * P**2 + ...) % MOD</code> 计算字符串 <code>S</code> 的哈希值，其中 <code>S[i]</code> 是 <code>S</code> 中第 <code>i</code> 个字母的 <code>ASCII</code> 编码值，<code>X**Y</code> 表示指数运算。对于两个字符串 <code>S</code> 和 <code>T</code>，如果它们的哈希值相同，即 <code>hash(S) == hash(T)</code>，那么 <code>S</code> 和 <code>T</code> 很有可能相同。</p><p>当我们计算出 <code>A</code> 的哈希值 <code>hash(A)</code>（即为序列 <code>A[0], A[1], ..., A[N - 1]</code> 的哈希值），下一步是计算 <code>A</code> 经过一次旋转操作，序列 <code>A[1], A[2], ..., A[N - 1], A[0]</code> 的哈希值，这可以通过将 <code>hash(A)</code> 减去 <code>A[0]</code>，除以 <code>P</code>，再加上 <code>A[0] * P**(N - 1)</code> 得到。其中除以 <code>P</code> 的操作是在对 <code>MOD</code> 取模的意义下的，等价于乘以 <code>P</code> 的乘法逆元。如果 <code>MOD</code> 为质数，<code>P</code> 的乘法逆元 <code>Pinv</code> 为 <code>P**(MOD - 2)</code> 对 <code>MOD</code> 取模的结果。这可以根据费马小定理推导出。</p><details>    <summary>Java</summary><figure class="highlight java"><figcaption><span>[sol3]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">rotateString</span><span class="params">(String A, String B)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (A.equals(B)) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> MOD = <span class="number">1_000_000_007</span>;</span><br><span class="line">        <span class="keyword">int</span> P = <span class="number">113</span>;</span><br><span class="line">        <span class="keyword">int</span> Pinv = BigInteger.valueOf(P).modInverse(BigInteger.valueOf(MOD)).intValue();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> hb = <span class="number">0</span>, power = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> x: B.toCharArray()) &#123;</span><br><span class="line">            hb = (hb + power * x) % MOD;</span><br><span class="line">            power = power * P % MOD;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> ha = <span class="number">0</span>; power = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">char</span>[] ca = A.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> x: ca) &#123;</span><br><span class="line">            ha = (ha + power * x) % MOD;</span><br><span class="line">            power = power * P % MOD;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ca.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">char</span> x = ca[i];</span><br><span class="line">            ha += power * x - x;</span><br><span class="line">            ha %= MOD;</span><br><span class="line">            ha *= Pinv;</span><br><span class="line">            ha %= MOD;</span><br><span class="line">            <span class="keyword">if</span> (ha == hb &amp;&amp; (A.substring(i+<span class="number">1</span>) + A.substring(<span class="number">0</span>, i+<span class="number">1</span>)).equals(B))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>Python</summary><figure class="highlight python"><figcaption><span>[sol3]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rotateString</span><span class="params">(self, A, B)</span>:</span></span><br><span class="line">        MOD = <span class="number">10</span>**<span class="number">9</span> + <span class="number">7</span></span><br><span class="line">        P = <span class="number">113</span></span><br><span class="line">        Pinv = pow(P, MOD<span class="number">-2</span>, MOD)</span><br><span class="line"></span><br><span class="line">        hb = <span class="number">0</span></span><br><span class="line">        power = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> B:</span><br><span class="line">            code = ord(x) - <span class="number">96</span></span><br><span class="line">            hb = (hb + power * code) % MOD</span><br><span class="line">            power = power * P % MOD</span><br><span class="line"></span><br><span class="line">        ha = <span class="number">0</span></span><br><span class="line">        power = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> A:</span><br><span class="line">            code = ord(x) - <span class="number">96</span></span><br><span class="line">            ha = (ha + power * code) % MOD</span><br><span class="line">            power = power * P % MOD</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ha == hb <span class="keyword">and</span> A == B: <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">for</span> i, x <span class="keyword">in</span> enumerate(A):</span><br><span class="line">            code = ord(x) - <span class="number">96</span></span><br><span class="line">            ha += power * code</span><br><span class="line">            ha -= code</span><br><span class="line">            ha *= Pinv</span><br><span class="line">            ha %= MOD</span><br><span class="line">            <span class="keyword">if</span> ha == hb <span class="keyword">and</span> A[i+<span class="number">1</span>:] + A[:i+<span class="number">1</span>] == B:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure></details><p><strong>复杂度分析</strong></p><ul><li><p>时间复杂度：<em>O(N)*，其中 *N</em> 是字符串 <code>A</code> 的长度。</p></li><li><p>空间复杂度：<em>O(N)</em>。</p></li></ul><h1 id="方法四：KMP-算法"><a href="#方法四：KMP-算法" class="headerlink" title="方法四：KMP 算法"></a>方法四：KMP 算法</h1><p>判断一个串是否为另一个串的子串的最优时间复杂度的算法是 KMP 算法。和方法二相同，我们只需要用 KMP 算法判断 <code>B</code> 是否为 <code>A + A</code> 的子串即可。KMP 算法较难理解，这里给出了力扣第 28 题 <a href="https://leetcode-cn.com/problems/implement-strstr/" target="_blank" rel="noopener">实现 strstr()</a> 讨论区中一个高赞 <a href="https://leetcode-cn.com/problems/implement-strstr/solution/kmp-suan-fa-xiang-jie-by-labuladong/" target="_blank" rel="noopener">KMP 算法详解</a>，以及著名博主 Matrix67 的 <a href="http://www.matri***/blog/archives/115" target="_blank" rel="noopener">KMP 算法详解</a>。</p><details>    <summary>Java</summary><figure class="highlight java"><figcaption><span>[sol4]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">rotateString</span><span class="params">(String A, String B)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> N = A.length();</span><br><span class="line">        <span class="keyword">if</span> (N != B.length()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (N == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Compute shift table</span></span><br><span class="line">        <span class="keyword">int</span>[] shifts = <span class="keyword">new</span> <span class="keyword">int</span>[N+<span class="number">1</span>];</span><br><span class="line">        Arrays.fill(shifts, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> left = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> right = <span class="number">0</span>; right &lt; N; ++right) &#123;</span><br><span class="line">            <span class="keyword">while</span> (left &gt;= <span class="number">0</span> &amp;&amp; (B.charAt(left) != B.charAt(right)))</span><br><span class="line">                left -= shifts[left];</span><br><span class="line">            shifts[right + <span class="number">1</span>] = right - left++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Find match of B in A+A</span></span><br><span class="line">        <span class="keyword">int</span> matchLen = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c: (A+A).toCharArray()) &#123;</span><br><span class="line">            <span class="keyword">while</span> (matchLen &gt;= <span class="number">0</span> &amp;&amp; B.charAt(matchLen) != c)</span><br><span class="line">                matchLen -= shifts[matchLen];</span><br><span class="line">            <span class="keyword">if</span> (++matchLen == N) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>Python</summary><figure class="highlight python"><figcaption><span>[sol4]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rotateString</span><span class="params">(self, A, B)</span>:</span></span><br><span class="line">        N = len(A)</span><br><span class="line">        <span class="keyword">if</span> N != len(B): <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">if</span> N == <span class="number">0</span>: <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#Compute shift table</span></span><br><span class="line">        shifts = [<span class="number">1</span>] * (N+<span class="number">1</span>)</span><br><span class="line">        left = <span class="number">-1</span></span><br><span class="line">        <span class="keyword">for</span> right <span class="keyword">in</span> xrange(N):</span><br><span class="line">            <span class="keyword">while</span> left &gt;= <span class="number">0</span> <span class="keyword">and</span> B[left] != B[right]:</span><br><span class="line">                left -= shifts[left]</span><br><span class="line">            shifts[right + <span class="number">1</span>] = right - left</span><br><span class="line">            left += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#Find match of B in A+A</span></span><br><span class="line">        match_len = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> A+A:</span><br><span class="line">            <span class="keyword">while</span> match_len &gt;= <span class="number">0</span> <span class="keyword">and</span> B[match_len] != char:</span><br><span class="line">                match_len -= shifts[match_len]</span><br><span class="line"></span><br><span class="line">            match_len += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> match_len == N:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure></details><p><strong>复杂度分析</strong></p><ul><li><p>时间复杂度：<em>O(N)*，其中 *N</em> 是字符串 <code>A</code> 的长度。</p></li><li><p>空间复杂度：<em>O(N)</em>。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定两个字符串, A和B。&lt;/p&gt;
&lt;p&gt;A的旋转操作就是将A 最左边的字符移动到最右边。例如,若A=’abcde’，在移动一次之后结果就是’bcdea’。如果在若干次旋转操作之后，A能变成B，那么返回True。&lt;/p&gt;
    
    </summary>
    
      <category term="2022年1月" scheme="http://yoursite.com/categories/2022%E5%B9%B41%E6%9C%88/"/>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="String" scheme="http://yoursite.com/tags/String/"/>
    
      <category term="String Matching" scheme="http://yoursite.com/tags/String-Matching/"/>
    
  </entry>
  
  <entry>
    <title>417. 太平洋大西洋水流问题</title>
    <link href="http://yoursite.com/2022/01/03/417.%20%E5%A4%AA%E5%B9%B3%E6%B4%8B%E5%A4%A7%E8%A5%BF%E6%B4%8B%E6%B0%B4%E6%B5%81%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2022/01/03/417. 太平洋大西洋水流问题/</id>
    <published>2022-01-03T03:12:12.000Z</published>
    <updated>2022-01-03T12:37:14.203Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个 m x n 的非负整数矩阵来表示一片大陆上各个单元格的高度。“太平洋”处于大陆的左边界和上边界，而“大西洋”处于大陆的右边界和下边界。</p><p>规定水流只能按照上、下、左、右四个方向流动，且只能从高到低或者在同等高度上流动。</p><p>请找出那些水流既可以流动到“太平洋”，又能流动到“大西洋”的陆地单元的坐标。 </p><a id="more"></a><p>[TOC]</p><p>提示：</p><p>输出坐标的顺序不重要<br>m 和 n 都小于150</p><p>示例：</p><p>给定下面的 5x5 矩阵:</p><pre><code>太平洋 ~   ~   ~   ~   ~      ~  1   2   2   3  (5) *     ~  3   2   3  (4) (4) *     ~  2   4  (5)  3   1  *     ~ (6) (7)  1   4   5  *     ~ (5)  1   1   2   4  *        *   *   *   *   * 大西洋</code></pre><p>返回:</p><p>[[0, 4], [1, 3], [1, 4], [2, 2], [3, 0], [3, 1], [4, 0]] (上图中带括号的单元).</p><ul><li>思路：准备两个表示是否能流向某个海岸线的矩阵，沿着海岸线‘’逆流而上‘’，最后统计两个大洋都能流向的坐标</li><li>复杂度：时间复杂度<code>O(m*n)</code>,m、n分别是坐标矩阵的长宽。空间复杂度<code>O(m * n)</code></li></ul><details>    <summary>Java写法1</summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class Solution &#123;</span><br><span class="line">    private List&lt;List&lt;Integer&gt;&gt; ans = new ArrayList&lt;&gt;();</span><br><span class="line">    private int[][] dirs = &#123;&#123;0, -1&#125;, &#123;0, 1&#125;, &#123;1, 0&#125;, &#123;-1, 0&#125;&#125;;</span><br><span class="line">    private boolean[][] visited = null;</span><br><span class="line">    public List&lt;List&lt;Integer&gt;&gt; pacificAtlantic(int[][] heights) &#123;</span><br><span class="line">        int m = heights.length, n = heights[0].length;</span><br><span class="line">        visited = new boolean[m][n];</span><br><span class="line">        boolean[][] canReachA = new boolean[m][n];</span><br><span class="line">        boolean[][] canReachP = new boolean[m][n];</span><br><span class="line">        for (int i = 0; i &lt; m; i++) &#123;</span><br><span class="line">            dfs(heights, i, 0, canReachA, m, n);</span><br><span class="line">            dfs(heights, i, n-1, canReachP, m, n);</span><br><span class="line">        &#125;</span><br><span class="line">        for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">            dfs(heights, 0, i, canReachA, m, n);</span><br><span class="line">            dfs(heights, m - 1, i, canReachP, m, n);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        for (int i = 0; i &lt; m; i++) &#123;</span><br><span class="line">            for (int j = 0; j &lt; n; j++) &#123;</span><br><span class="line">                if (canReachA[i][j] &amp;&amp; canReachP[i][j]) &#123;</span><br><span class="line">                    List&lt;Integer&gt; list = new LinkedList&lt;&gt;();</span><br><span class="line">                    list.add(i);</span><br><span class="line">                    list.add(j);</span><br><span class="line">                    ans.add(list);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void dfs(int[][] heights, int x, int y, boolean[][] temp, int m, int n) &#123;</span><br><span class="line">        temp[x][y] = true;</span><br><span class="line">        for (int i = 0; i &lt; 4; i++) &#123;</span><br><span class="line">            int nx = x + dirs[i][0];</span><br><span class="line">            int ny = y + dirs[i][1];</span><br><span class="line">            if (isIn(nx,ny,m,n) &amp;&amp; !temp[nx][ny] &amp;&amp; heights[x][y] &lt;= heights[nx][ny]) &#123;</span><br><span class="line">                dfs(heights, nx, ny, temp, m, n);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private boolean isIn(int x, int y, int m, int n) &#123;</span><br><span class="line">        return x &gt;= 0 &amp;&amp; x &lt; m &amp;&amp; y &gt;= 0 &amp;&amp; y &lt; n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>Java写法2</summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">    class Solution &#123;</span><br><span class="line">    // 用来返回的返回值</span><br><span class="line">    private List&lt;List&lt;Integer&gt;&gt; ans = new ArrayList&lt;&gt;();</span><br><span class="line">    // 方向转换的数组</span><br><span class="line">    private int[][] dirs = &#123;&#123;0, -1&#125;, &#123;1, 0&#125;, &#123;0, 1&#125;, &#123;-1, 0&#125;&#125;;</span><br><span class="line">    // 大西洋和太平洋共享的访问数组</span><br><span class="line">    private boolean[][] visited = null;</span><br><span class="line"></span><br><span class="line">    public List&lt;List&lt;Integer&gt;&gt; pacificAtlantic(int[][] heights) &#123;</span><br><span class="line">        int n = heights.length, m = heights[0].length;</span><br><span class="line">        visited = new boolean[n][m];</span><br><span class="line">        // temp 是用来记录当前深度优先搜索访问过的点</span><br><span class="line">        boolean[][] temp = new boolean[n][m];</span><br><span class="line">        // 首先从太平洋出发，看看都能遇到哪些点</span><br><span class="line">        for (int x = 0; x &lt; n; ++x) &#123;</span><br><span class="line">            for (int y = 0; y &lt; m; ++y) &#123;</span><br><span class="line">                // x == 0 || y == 0 表示要从太平洋出发需要满足的条件，flag == false 意味着是从太平洋出发的</span><br><span class="line">                if ((x == 0 || y == 0) &amp;&amp; !temp[x][y]) dfs(heights, x, y, temp, n, m, false);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        // 同上，temp 是用来标记当前深度优先搜索访问到的点</span><br><span class="line">        temp = new boolean[n][m];</span><br><span class="line">        // 然后再从大西洋出发，看看能遇到哪些点，如果遇到的点 在 visited 中之前已经被标记为 true， 那么说明双方都可到达</span><br><span class="line">        for (int x = 0; x &lt; n; ++x) &#123;</span><br><span class="line">            for (int y = 0; y &lt; m; ++y) &#123;</span><br><span class="line">                // x == n - 1 || y == m - 1 表示从大西洋出发</span><br><span class="line">                if ((x == n - 1 || y == m - 1) &amp;&amp; !temp[x][y]) dfs(heights, x, y, temp, n, m, true);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @param x         深度优先搜索的起始点坐标 x</span><br><span class="line">     * @param y         起始点坐标 y</span><br><span class="line">     * @param temp      用来标记当前深度优先搜索已经访问过哪些点了</span><br><span class="line">     * @param flag      为 true 时意味着是大西洋来的，为 false 意味着是太平洋来的</span><br><span class="line">     */</span><br><span class="line">    private void dfs(int[][] heights, int x, int y, boolean[][] temp, int n, int m, boolean flag) &#123;</span><br><span class="line">        // 如果是大西洋来的，而且 太平洋已经访问过 &#123;x, y&#125; 了，就放到返回值中</span><br><span class="line">        if (flag &amp;&amp; visited[x][y]) &#123;</span><br><span class="line">            List&lt;Integer&gt; buf = new ArrayList&lt;&gt;();</span><br><span class="line">            buf.add(x);</span><br><span class="line">            buf.add(y);</span><br><span class="line">            ans.add(buf);</span><br><span class="line">            // 顺便把该点置为 false，防止重复记录</span><br><span class="line">            visited[x][y] = false;</span><br><span class="line">        &#125;</span><br><span class="line">        // 如果是从太平洋来的，需要将 &#123;x, y&#125; 标记为已来过</span><br><span class="line">        if (!flag) visited[x][y] = true;</span><br><span class="line">        // 然后切换四个方向，逐个检查</span><br><span class="line">        for (int i = 0; i &lt; 4; ++i) &#123;</span><br><span class="line">            int nx = x + dirs[i][0];</span><br><span class="line">            int ny = y + dirs[i][1];</span><br><span class="line">            // 检查新的坐标是否合法，以及当前深度优先搜索是否来过，最后还要满足 逆向 条件</span><br><span class="line">            if (nx &gt;= 0 &amp;&amp; nx &lt; n &amp;&amp; ny &gt;= 0 &amp;&amp; ny &lt; m &amp;&amp; !temp[nx][ny] &amp;&amp; heights[nx][ny] &gt;= heights[x][y]) &#123;</span><br><span class="line">                temp[nx][ny] = true;    // 然后在当前深度优先搜索中标记为已来过</span><br><span class="line">                dfs(heights, nx, ny, temp, n, m, flag); // 继续深度优先搜索</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>Java写法3</summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">    class Solution &#123;</span><br><span class="line">    // 用来返回的返回值</span><br><span class="line">    private List&lt;List&lt;Integer&gt;&gt; ans = new ArrayList&lt;&gt;();</span><br><span class="line">    // 方向转换的数组</span><br><span class="line">    private int[][] dirs = &#123;&#123;0, -1&#125;, &#123;1, 0&#125;, &#123;0, 1&#125;, &#123;-1, 0&#125;&#125;;</span><br><span class="line">    // 大西洋和太平洋共享的访问数组</span><br><span class="line">    private boolean[][] visited = null;</span><br><span class="line"></span><br><span class="line">    public List&lt;List&lt;Integer&gt;&gt; pacificAtlantic(int[][] heights) &#123;</span><br><span class="line">        int n = heights.length, m = heights[0].length;</span><br><span class="line">        visited = new boolean[n][m];</span><br><span class="line">        // temp 是用来记录当前深度优先搜索访问过的点</span><br><span class="line">        boolean[][] temp = new boolean[n][m];</span><br><span class="line">        // 首先从太平洋出发，看看都能遇到哪些点</span><br><span class="line">        for (int x = 0; x &lt; n; ++x) &#123;</span><br><span class="line">            for (int y = 0; y &lt; m; ++y) &#123;</span><br><span class="line">                // x == 0 || y == 0 表示要从太平洋出发需要满足的条件，flag == false 意味着是从太平洋出发的</span><br><span class="line">                if ((x == 0 || y == 0) &amp;&amp; !temp[x][y]) dfs(heights, x, y, temp, n, m, false);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        // 同上，temp 是用来标记当前深度优先搜索访问到的点</span><br><span class="line">        temp = new boolean[n][m];</span><br><span class="line">        // 然后再从大西洋出发，看看能遇到哪些点，如果遇到的点 在 visited 中之前已经被标记为 true， 那么说明双方都可到达</span><br><span class="line">        for (int x = 0; x &lt; n; ++x) &#123;</span><br><span class="line">            for (int y = 0; y &lt; m; ++y) &#123;</span><br><span class="line">                // x == n - 1 || y == m - 1 表示从大西洋出发</span><br><span class="line">                if ((x == n - 1 || y == m - 1) &amp;&amp; !temp[x][y]) dfs(heights, x, y, temp, n, m, true);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @param x         深度优先搜索的起始点坐标 x</span><br><span class="line">     * @param y         起始点坐标 y</span><br><span class="line">     * @param temp      用来标记当前深度优先搜索已经访问过哪些点了</span><br><span class="line">     * @param flag      为 true 时意味着是大西洋来的，为 false 意味着是太平洋来的</span><br><span class="line">     */</span><br><span class="line">    private void dfs(int[][] heights, int x, int y, boolean[][] temp, int n, int m, boolean flag) &#123;</span><br><span class="line">        // 如果是大西洋来的，而且 太平洋已经访问过 &#123;x, y&#125; 了，就放到返回值中</span><br><span class="line">        if (flag &amp;&amp; visited[x][y]) &#123;</span><br><span class="line">            List&lt;Integer&gt; buf = new ArrayList&lt;&gt;();</span><br><span class="line">            buf.add(x);</span><br><span class="line">            buf.add(y);</span><br><span class="line">            ans.add(buf);</span><br><span class="line">            // 顺便把该点置为 false，防止重复记录</span><br><span class="line">//            visited[x][y] = false;</span><br><span class="line">        &#125;</span><br><span class="line">        // 如果是从太平洋来的，需要将 &#123;x, y&#125; 标记为已来过</span><br><span class="line">        if (!flag) visited[x][y] = true;</span><br><span class="line">        temp[x][y] = true;</span><br><span class="line">        // 然后切换四个方向，逐个检查</span><br><span class="line">        for (int i = 0; i &lt; 4; ++i) &#123;</span><br><span class="line">            int nx = x + dirs[i][0];</span><br><span class="line">            int ny = y + dirs[i][1];</span><br><span class="line">            // 检查新的坐标是否合法，以及当前深度优先搜索是否来过，最后还要满足 逆向 条件</span><br><span class="line">            if (nx &gt;= 0 &amp;&amp; nx &lt; n &amp;&amp; ny &gt;= 0 &amp;&amp; ny &lt; m &amp;&amp; !temp[nx][ny] &amp;&amp; heights[nx][ny] &gt;= heights[x][y]) &#123;</span><br><span class="line">                temp[nx][ny] = true;    // 然后在当前深度优先搜索中标记为已来过</span><br><span class="line">                dfs(heights, nx, ny, temp, n, m, flag); // 继续深度优先搜索</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定一个 m x n 的非负整数矩阵来表示一片大陆上各个单元格的高度。“太平洋”处于大陆的左边界和上边界，而“大西洋”处于大陆的右边界和下边界。&lt;/p&gt;
&lt;p&gt;规定水流只能按照上、下、左、右四个方向流动，且只能从高到低或者在同等高度上流动。&lt;/p&gt;
&lt;p&gt;请找出那些水流既可以流动到“太平洋”，又能流动到“大西洋”的陆地单元的坐标。 &lt;/p&gt;
    
    </summary>
    
      <category term="2022年1月" scheme="http://yoursite.com/categories/2022%E5%B9%B41%E6%9C%88/"/>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Breadth-first Search" scheme="http://yoursite.com/tags/Breadth-first-Search/"/>
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
      <category term="Depth-first Search" scheme="http://yoursite.com/tags/Depth-first-Search/"/>
    
      <category term="Matrix" scheme="http://yoursite.com/tags/Matrix/"/>
    
  </entry>
  
  <entry>
    <title>JAVA 学习笔记（NIO）</title>
    <link href="http://yoursite.com/2022/01/03/JAVA%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88NIO%EF%BC%89/"/>
    <id>http://yoursite.com/2022/01/03/JAVA 学习笔记（NIO）/</id>
    <published>2022-01-03T00:12:12.000Z</published>
    <updated>2022-01-03T07:35:21.802Z</updated>
    
    <content type="html"><![CDATA[<p>NIO（Non-blocking I/O，在Java领域，也称为New I/O），是一种同步非阻塞的I/O模型，也是I/O多路复用的基础，已经被越来越多地应用到大型应用服务器，成为解决高并发与大量连接、I/O处理问题的有效方式。</p><a id="more"></a><p>[TOC]</p><p>本文摘自美团点评技术团队<a href="https://zhuanlan.zhihu.com/p/23488863" target="_blank" rel="noopener">^1</a>，仅供初步学习NIO</p><p>NIO的本质是什么样的呢？它是怎样与事件模型结合来解放线程、提高系统吞吐的呢？</p><p>本文会从传统的阻塞I/O和线程池模型面临的问题讲起，然后对比几种常见I/O模型，一步步分析NIO怎么利用事件模型处理I/O，解决线程池瓶颈处理海量连接，包括利用面向事件的方式编写服务端/客户端程序。最后延展到一些高级主题，如Reactor与Proactor模型的对比、Selector的唤醒、Buffer的选择等。</p><p>注：本文的代码都是伪代码，主要是为了示意，不可用于生产环境。</p><h1 id="传统BIO模型分析"><a href="#传统BIO模型分析" class="headerlink" title="传统BIO模型分析"></a>传统BIO模型分析</h1><p>让我们先回忆一下传统的服务器端同步阻塞I/O处理（也就是BIO，Blocking I/O）的经典编程模型：</p><details>    <summary>传统BIO模型</summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"> ExecutorService executor = Excutors.newFixedThreadPollExecutor(100);//线程池</span><br><span class="line"></span><br><span class="line"> ServerSocket serverSocket = new ServerSocket();</span><br><span class="line"> serverSocket.bind(8088);</span><br><span class="line"> while(!Thread.currentThread.isInturrupted())&#123;//主线程死循环等待新连接到来</span><br><span class="line"> Socket socket = serverSocket.accept();</span><br><span class="line"> executor.submit(new ConnectIOnHandler(socket));//为新的连接创建新的线程</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class ConnectIOnHandler extends Thread&#123;</span><br><span class="line">    private Socket socket;</span><br><span class="line">    public ConnectIOnHandler(Socket socket)&#123;</span><br><span class="line">       this.socket = socket;</span><br><span class="line">    &#125;</span><br><span class="line">    public void run()&#123;</span><br><span class="line">      while(!Thread.currentThread.isInturrupted()&amp;&amp;!socket.isClosed())&#123;死循环处理读写事件</span><br><span class="line">          String someThing = socket.read()....//读取数据</span><br><span class="line">          if(someThing!=null)&#123;</span><br><span class="line">             ......//处理数据</span><br><span class="line">             socket.write()....//写数据</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p>这是一个经典的每连接每线程的模型，之所以使用多线程，主要原因在于socket.accept()、socket.read()、socket.write()三个主要函数都是同步阻塞的，当一个连接在处理I/O的时候，系统是阻塞的，如果是单线程的话必然就挂死在那里；但CPU是被释放出来的，开启多线程，就可以让CPU去处理更多的事情。其实这也是所有使用多线程的本质：</p><ul><li>利用多核。</li><li>当I/O阻塞系统，但CPU空闲的时候，可以利用多线程使用CPU资源。</li></ul><p>现在的多线程一般都使用线程池，可以让线程的创建和回收成本相对较低。在活动连接数不是特别高（小于单机1000）的情况下，这种模型是比较不错的，可以让每一个连接专注于自己的I/O并且编程模型简单，也不用过多考虑系统的过载、限流等问题。线程池本身就是一个天然的漏斗，可以缓冲一些系统处理不了的连接或请求。</p><p>不过，这个模型最本质的问题在于，严重依赖于线程。但线程是很”贵”的资源，主要表现在：</p><ul><li>线程的创建和销毁成本很高，在Linux这样的操作系统中，线程本质上就是一个进程。创建和销毁都是重量级的系统函数。</li><li>线程本身占用较大内存，像Java的线程栈，一般至少分配512K～1M的空间，如果系统中的线程数过千，恐怕整个JVM的内存都会被吃掉一半。</li><li>线程的切换成本是很高的。操作系统发生线程切换的时候，需要保留线程的上下文，然后执行系统调用。如果线程数过高，可能执行线程切换的时间甚至会大于线程执行的时间，这时候带来的表现往往是系统load偏高、CPU sy使用率特别高（超过20%以上)，导致系统几乎陷入不可用的状态。</li><li>容易造成锯齿状的系统负载。因为系统负载是用活动线程数或CPU核心数，一旦线程数量高但外部网络环境不是很稳定，就很容易造成大量请求的结果同时返回，激活大量阻塞线程从而使系统负载压力过大。</li></ul><p>所以，当面对十万甚至百万级连接的时候，传统的BIO模型是无能为力的。随着移动端应用的兴起和各种网络游戏的盛行，百万级长连接日趋普遍，此时，必然需要一种更高效的I/O处理模型。</p><h1 id="NIO是怎么工作的"><a href="#NIO是怎么工作的" class="headerlink" title="NIO是怎么工作的"></a>NIO是怎么工作的</h1><p>很多刚接触NIO的人，第一眼看到的就是Java相对晦涩的API，比如：Channel，Selector，Socket什么的；然后就是一坨上百行的代码来演示NIO的服务端Demo……瞬间头大有没有？</p><p>我们不管这些，抛开现象看本质，先分析下NIO是怎么工作的。</p><h1 id="常见I-O模型对比"><a href="#常见I-O模型对比" class="headerlink" title="常见I/O模型对比"></a>常见I/O模型对比</h1><p>所有的系统I/O都分为两个阶段：等待就绪和操作。举例来说，读函数，分为等待系统可读和真正的读；同理，写函数分为等待网卡可以写和真正的写。</p><p>需要说明的是等待就绪的阻塞是不使用CPU的，是在“空等”；而真正的读写操作的阻塞是使用CPU的，真正在”干活”，而且这个过程非常快，属于memory copy，带宽通常在1GB/s级别以上，可以理解为基本不耗时。</p><p>下图是几种常见I/O模型的对比：</p><p>以socket.read()为例子：</p><p>传统的BIO里面socket.read()，如果TCP RecvBuffer里没有数据，函数会一直阻塞，直到收到数据，返回读到的数据。</p><p>对于NIO，如果TCP RecvBuffer有数据，就把数据从网卡读到内存，并且返回给用户；反之则直接返回0，永远不会阻塞。</p><p>最新的AIO(Async I/O)里面会更进一步：不但等待就绪是非阻塞的，就连数据从网卡到内存的过程也是异步的。</p><p>换句话说，BIO里用户最关心“我要读”，NIO里用户最关心”我可以读了”，在AIO模型里用户更需要关注的是“读完了”。</p><p>NIO一个重要的特点是：socket主要的读、写、注册和接收函数，在等待就绪阶段都是非阻塞的，真正的I/O操作是同步阻塞的（消耗CPU但性能非常高）。</p><h1 id="如何结合事件模型使用NIO同步非阻塞特性"><a href="#如何结合事件模型使用NIO同步非阻塞特性" class="headerlink" title="如何结合事件模型使用NIO同步非阻塞特性"></a>如何结合事件模型使用NIO同步非阻塞特性</h1><p>回忆BIO模型，之所以需要多线程，是因为在进行I/O操作的时候，一是没有办法知道到底能不能写、能不能读，只能”傻等”，即使通过各种估算，算出来操作系统没有能力进行读写，也没法在socket.read()和socket.write()函数中返回，这两个函数无法进行有效的中断。所以除了多开线程另起炉灶，没有好的办法利用CPU。</p><p>NIO的读写函数可以立刻返回，这就给了我们不开线程利用CPU的最好机会：如果一个连接不能读写（socket.read()返回0或者socket.write()返回0），我们可以把这件事记下来，记录的方式通常是在Selector上注册标记位，然后切换到其它就绪的连接（channel）继续进行读写。</p><p>下面具体看下如何利用事件模型单线程处理所有I/O请求：</p><p>NIO的主要事件有几个：读就绪、写就绪、有新连接到来。</p><p>我们首先需要注册当这几个事件到来的时候所对应的处理器。然后在合适的时机告诉事件选择器：我对这个事件感兴趣。对于写操作，就是写不出去的时候对写事件感兴趣；对于读操作，就是完成连接和系统没有办法承载新读入的数据的时；对于accept，一般是服务器刚启动的时候；而对于connect，一般是connect失败需要重连或者直接异步调用connect的时候。</p><p>其次，用一个死循环选择就绪的事件，会执行系统调用（Linux 2.6之前是select、poll，2.6之后是epoll，Windows是IOCP），还会阻塞的等待新事件的到来。新事件到来的时候，会在selector上注册标记位，标示可读、可写或者有连接到来。</p><p>注意，select是阻塞的，无论是通过操作系统的通知（epoll）还是不停的轮询(select，poll)，这个函数是阻塞的。所以你可以放心大胆地在一个while(true)里面调用这个函数而不用担心CPU空转。</p><p>所以我们的程序大概的模样是：</p><details>    <summary>Reactor</summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">   </span><br><span class="line">interface ChannelHandler&#123;</span><br><span class="line">     void channelReadable(Channel channel);</span><br><span class="line">     void channelWritable(Channel channel);</span><br><span class="line">  &#125;</span><br><span class="line">  class Channel&#123;</span><br><span class="line">    Socket socket;</span><br><span class="line">    Event event;//读，写或者连接</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  //IO线程主循环:</span><br><span class="line">  class IoThread extends Thread&#123;</span><br><span class="line">  public void run()&#123;</span><br><span class="line">  Channel channel;</span><br><span class="line">  while(channel=Selector.select())&#123;//选择就绪的事件和对应的连接</span><br><span class="line">     if(channel.event==accept)&#123;</span><br><span class="line">        registerNewChannelHandler(channel);//如果是新连接，则注册一个新的读写处理器</span><br><span class="line">     &#125;</span><br><span class="line">     if(channel.event==write)&#123;</span><br><span class="line">        getChannelHandler(channel).channelWritable(channel);//如果可以写，则执行写事件</span><br><span class="line">     &#125;</span><br><span class="line">     if(channel.event==read)&#123;</span><br><span class="line">         getChannelHandler(channel).channelReadable(channel);//如果可以读，则执行读事件</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  Map&lt;Channel，ChannelHandler&gt; handlerMap;//所有channel的对应事件处理器</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></details><p>这个程序很简短，也是最简单的Reactor模式：注册所有感兴趣的事件处理器，单线程轮询选择就绪事件，执行事件处理器。</p><h1 id="优化线程模型"><a href="#优化线程模型" class="headerlink" title="优化线程模型"></a>优化线程模型</h1><p>由上面的示例我们大概可以总结出NIO是怎么解决掉线程的瓶颈并处理海量连接的：</p><p>NIO由原来的阻塞读写（占用线程）变成了单线程轮询事件，找到可以进行读写的网络描述符进行读写。除了事件的轮询是阻塞的（没有可干的事情必须要阻塞），剩余的I/O操作都是纯CPU操作，没有必要开启多线程。</p><p>并且由于线程的节约，连接数大的时候因为线程切换带来的问题也随之解决，进而为处理海量连接提供了可能。</p><p>单线程处理I/O的效率确实非常高，没有线程切换，只是拼命的读、写、选择事件。但现在的服务器，一般都是多核处理器，如果能够利用多核心进行I/O，无疑对效率会有更大的提高。</p><p>仔细分析一下我们需要的线程，其实主要包括以下几种：</p><ul><li>事件分发器，单线程选择就绪的事件。</li><li>I/O处理器，包括connect、read、write等，这种纯CPU操作，一般开启CPU核心个线程就可以。</li><li>业务线程，在处理完I/O后，业务一般还会有自己的业务逻辑，有的还会有其他的阻塞I/O，如DB操作，RPC等。只要有阻塞，就需要单独的线程。</li></ul><p>Java的Selector对于Linux系统来说，有一个致命限制：同一个channel的select不能被并发的调用。因此，如果有多个I/O线程，必须保证：一个socket只能属于一个IoThread，而一个IoThread可以管理多个socket。</p><p>另外连接的处理和读写的处理通常可以选择分开，这样对于海量连接的注册和读写就可以分发。虽然read()和write()是比较高效无阻塞的函数，但毕竟会占用CPU，如果面对更高的并发则无能为力。</p><h1 id="NIO在客户端的魔力"><a href="#NIO在客户端的魔力" class="headerlink" title="NIO在客户端的魔力"></a>NIO在客户端的魔力</h1><p>通过上面的分析，可以看出NIO在服务端对于解放线程，优化I/O和处理海量连接方面，确实有自己的用武之地。那么在客户端上，NIO又有什么使用场景呢?</p><p>常见的客户端BIO+连接池模型，可以建立n个连接，然后当某一个连接被I/O占用的时候，可以使用其他连接来提高性能。</p><p>但多线程的模型面临和服务端相同的问题：如果指望增加连接数来提高性能，则连接数又受制于线程数、线程很贵、无法建立很多线程，则性能遇到瓶颈。</p><h1 id="每连接顺序请求的Redis"><a href="#每连接顺序请求的Redis" class="headerlink" title="每连接顺序请求的Redis"></a>每连接顺序请求的Redis</h1><p>对于Redis来说，由于服务端是全局串行的，能够保证同一连接的所有请求与返回顺序一致。这样可以使用单线程＋队列，把请求数据缓冲。然后pipeline发送，返回future，然后channel可读时，直接在队列中把future取回来，done()就可以了。</p><p>伪代码如下：</p><details>    <summary>Redis</summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">    </span><br><span class="line">class RedisClient Implements ChannelHandler&#123;</span><br><span class="line"> private BlockingQueue CmdQueue;</span><br><span class="line"> private EventLoop eventLoop;</span><br><span class="line"> private Channel channel;</span><br><span class="line"> class Cmd&#123;</span><br><span class="line">  String cmd;</span><br><span class="line">  Future result;</span><br><span class="line"> &#125;</span><br><span class="line"> public Future get(String key)&#123;</span><br><span class="line">   Cmd cmd= new Cmd(key);</span><br><span class="line">   queue.offer(cmd);</span><br><span class="line">   eventLoop.submit(new Runnable()&#123;</span><br><span class="line">        List list = new ArrayList();</span><br><span class="line">        queue.drainTo(list);</span><br><span class="line">        if(channel.isWritable())&#123;</span><br><span class="line">         channel.writeAndFlush(list);</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;</span><br><span class="line"> public void ChannelReadFinish(Channel channel，Buffer Buffer)&#123;</span><br><span class="line">    List result = handleBuffer();//处理数据</span><br><span class="line">    //从cmdQueue取出future，并设值，future.done();</span><br><span class="line">&#125;</span><br><span class="line"> public void ChannelWritable(Channel channel)&#123;</span><br><span class="line">   channel.flush();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p>这样做，能够充分的利用pipeline来提高I/O能力，同时获取异步处理能力。</p><h1 id="多连接短连接的HttpClient"><a href="#多连接短连接的HttpClient" class="headerlink" title="多连接短连接的HttpClient"></a>多连接短连接的HttpClient</h1><p>类似于竞对抓取的项目，往往需要建立无数的HTTP短连接，然后抓取，然后销毁，当需要单机抓取上千网站线程数又受制的时候，怎么保证性能呢?</p><p>何不尝试NIO，单线程进行连接、写、读操作？如果连接、读、写操作系统没有能力处理，简单的注册一个事件，等待下次循环就好了。</p><p>如何存储不同的请求/响应呢？由于http是无状态没有版本的协议，又没有办法使用队列，好像办法不多。比较笨的办法是对于不同的socket，直接存储socket的引用作为map的key。</p><h1 id="常见的RPC框架，如Thrift，Dubbo"><a href="#常见的RPC框架，如Thrift，Dubbo" class="headerlink" title="常见的RPC框架，如Thrift，Dubbo"></a>常见的RPC框架，如Thrift，Dubbo</h1><p>这种框架内部一般维护了请求的协议和请求号，可以维护一个以请求号为key，结果的result为future的map，结合NIO+长连接，获取非常不错的性能。</p><h1 id="NIO高级主题"><a href="#NIO高级主题" class="headerlink" title="NIO高级主题"></a>NIO高级主题</h1><h2 id="Proactor与Reactor"><a href="#Proactor与Reactor" class="headerlink" title="Proactor与Reactor"></a>Proactor与Reactor</h2><p>一般情况下，I/O 复用机制需要事件分发器（event dispatcher）。 </p><p>事件分发器的作用，即将那些读写事件源分发给各读写事件的处理者，就像送快递的在楼下喊:谁谁谁的快递到了，快来拿吧！开发人员在开始的时候需要在分发器那里注册感兴趣的事件，并提供相应的处理者（event handler)，或者是回调函数；事件分发器在适当的时候，会将请求的事件分发给这些handler或者回调函数。</p><p>涉及到事件分发器的两种模式称为：Reactor和Proactor。 </p><p>Reactor模式是基于同步I/O的，而Proactor模式是和异步I/O相关的。在Reactor模式中，事件分发器等待某个事件或者可应用或个操作的状态发生（比如文件描述符可读写，或者是socket可读写），事件分发器就把这个事件传给事先注册的事件处理函数或者回调函数，由后者来做实际的读写操作。</p><p>而在Proactor模式中，事件处理者（或者代由事件分发器发起）直接发起一个异步读写操作（相当于请求），而实际的工作是由操作系统来完成的。发起时，需要提供的参数包括用于存放读到数据的缓存区、读的数据大小或用于存放外发数据的缓存区，以及这个请求完后的回调函数等信息。事件分发器得知了这个请求，它默默等待这个请求的完成，然后转发完成事件给相应的事件处理者或者回调。举例来说，在Windows上事件处理者投递了一个异步IO操作（称为overlapped技术），事件分发器等IO Complete事件完成。这种异步模式的典型实现是基于操作系统底层异步API的，所以我们可称之为“系统级别”的或者“真正意义上”的异步，因为具体的读写是由操作系统代劳的。</p><p>举个例子，将有助于理解Reactor与Proactor二者的差异，以读操作为例（写操作类似）。</p><h2 id="在Reactor中实现读"><a href="#在Reactor中实现读" class="headerlink" title="在Reactor中实现读"></a>在Reactor中实现读</h2><ul><li>注册读就绪事件和相应的事件处理器。</li><li>事件分发器等待事件。</li><li>事件到来，激活分发器，分发器调用事件对应的处理器。</li><li>事件处理器完成实际的读操作，处理读到的数据，注册新的事件，然后返还控制权。</li></ul><h2 id="在Proactor中实现读："><a href="#在Proactor中实现读：" class="headerlink" title="在Proactor中实现读："></a>在Proactor中实现读：</h2><ul><li>处理器发起异步读操作（注意：操作系统必须支持异步IO）。在这种情况下，处理器无视IO就绪事件，它关注的是完成事件。</li><li>事件分发器等待操作完成事件。</li><li>在分发器等待过程中，操作系统利用并行的内核线程执行实际的读操作，并将结果数据存入用户自定义缓冲区，最后通知事件分发器读操作完成。</li><li>事件分发器呼唤处理器。</li><li>事件处理器处理用户自定义缓冲区中的数据，然后启动一个新的异步操作，并将控制权返回事件分发器。</li></ul><p>可以看出，两个模式的相同点，都是对某个I/O事件的事件通知（即告诉某个模块，这个I/O操作可以进行或已经完成)。在结构上，两者也有相同点：事件分发器负责提交IO操作（异步)、查询设备是否可操作（同步)，然后当条件满足时，就回调handler；不同点在于，异步情况下（Proactor)，当回调handler时，表示I/O操作已经完成；同步情况下（Reactor)，回调handler时，表示I/O设备可以进行某个操作（can read 或 can write)。</p><p>下面，我们将尝试应对为Proactor和Reactor模式建立可移植框架的挑战。在改进方案中，我们将Reactor原来位于事件处理器内的Read/Write操作移至分发器（不妨将这个思路称为“模拟异步”），以此寻求将Reactor多路同步I/O转化为模拟异步I/O。以读操作为例子，改进过程如下：</p><ul><li>注册读就绪事件和相应的事件处理器。并为分发器提供数据缓冲区地址，需要读取数据量等信息。</li><li>分发器等待事件（如在select()上等待）。</li><li>事件到来，激活分发器。分发器执行一个非阻塞读操作（它有完成这个操作所需的全部信息），最后调用对应处理器。</li><li>事件处理器处理用户自定义缓冲区的数据，注册新的事件（当然同样要给出数据缓冲区地址，需要读取的数据量等信息），最后将控制权返还分发器。</li></ul><p>如我们所见，通过对多路I/O模式功能结构的改造，可将Reactor转化为Proactor模式。改造前后，模型实际完成的工作量没有增加，只不过参与者间对工作职责稍加调换。没有工作量的改变，自然不会造成性能的削弱。对如下各步骤的比较，可以证明工作量的恒定：</p><h2 id="标准-典型的Reactor："><a href="#标准-典型的Reactor：" class="headerlink" title="标准/典型的Reactor："></a>标准/典型的Reactor：</h2><ul><li>步骤1：等待事件到来（Reactor负责）。</li><li>步骤2：将读就绪事件分发给用户定义的处理器（Reactor负责）。</li><li>步骤3：读数据（用户处理器负责）。</li><li>步骤4：处理数据（用户处理器负责）。</li></ul><h2 id="改进实现的模拟Proactor："><a href="#改进实现的模拟Proactor：" class="headerlink" title="改进实现的模拟Proactor："></a>改进实现的模拟Proactor：</h2><ul><li>步骤1：等待事件到来（Proactor负责）。</li><li>步骤2：得到读就绪事件，执行读数据（现在由Proactor负责）。</li><li>步骤3：将读完成事件分发给用户处理器（Proactor负责）。</li><li>步骤4：处理数据（用户处理器负责）。</li></ul><p>对于不提供异步I/O API的操作系统来说，这种办法可以隐藏Socket API的交互细节，从而对外暴露一个完整的异步接口。借此，我们就可以进一步构建完全可移植的，平台无关的，有通用对外接口的解决方案。</p><p>代码示例如下：</p><details>    <summary>Proactor</summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">    </span><br><span class="line">interface ChannelHandler&#123;</span><br><span class="line">      void channelReadComplate(Channel channel，byte[] data);</span><br><span class="line">      void channelWritable(Channel channel);</span><br><span class="line">   &#125;</span><br><span class="line">   class Channel&#123;</span><br><span class="line">     Socket socket;</span><br><span class="line">     Event event;//读，写或者连接</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   //IO线程主循环：</span><br><span class="line">   class IoThread extends Thread&#123;</span><br><span class="line">   public void run()&#123;</span><br><span class="line">   Channel channel;</span><br><span class="line">   while(channel=Selector.select())&#123;//选择就绪的事件和对应的连接</span><br><span class="line">      if(channel.event==accept)&#123;</span><br><span class="line">         registerNewChannelHandler(channel);//如果是新连接，则注册一个新的读写处理器</span><br><span class="line">         Selector.interested(read);</span><br><span class="line">      &#125;</span><br><span class="line">      if(channel.event==write)&#123;</span><br><span class="line">         getChannelHandler(channel).channelWritable(channel);//如果可以写，则执行写事件</span><br><span class="line">      &#125;</span><br><span class="line">      if(channel.event==read)&#123;</span><br><span class="line">          byte[] data = channel.read();</span><br><span class="line">          if(channel.read()==0)//没有读到数据，表示本次数据读完了</span><br><span class="line">          &#123;</span><br><span class="line">          getChannelHandler(channel).channelReadComplate(channel，data;//处理读完成事件</span><br><span class="line">          &#125;</span><br><span class="line">          if(过载保护)&#123;</span><br><span class="line">          Selector.interested(read);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">     &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   Map&lt;Channel，ChannelHandler&gt; handlerMap;//所有channel的对应事件处理器</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></details><h1 id="Selector-wakeup"><a href="#Selector-wakeup" class="headerlink" title="Selector.wakeup()"></a>Selector.wakeup()</h1><h2 id="主要作用"><a href="#主要作用" class="headerlink" title="主要作用"></a>主要作用</h2><p>解除阻塞在Selector.select()/select(long)上的线程，立即返回。</p><p>两次成功的select之间多次调用wakeup等价于一次调用。</p><p>如果当前没有阻塞在select上，则本次wakeup调用将作用于下一次select——“记忆”作用。</p><p>为什么要唤醒？</p><p>注册了新的channel或者事件。</p><p>channel关闭，取消注册。</p><p>优先级更高的事件触发（如定时器事件），希望及时处理。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>Linux上利用pipe调用创建一个管道，Windows上则是一个loopback的tcp连接。这是因为win32的管道无法加入select的fd set，将管道或者TCP连接加入select fd set。</p><p>wakeup往管道或者连接写入一个字节，阻塞的select因为有I/O事件就绪，立即返回。可见，wakeup的调用开销不可忽视。</p><h1 id="Buffer的选择"><a href="#Buffer的选择" class="headerlink" title="Buffer的选择"></a>Buffer的选择</h1><p>通常情况下，操作系统的一次写操作分为两步：</p><ol><li><p>将数据从用户空间拷贝到系统空间。</p></li><li><p>从系统空间往网卡写。同理，读操作也分为两步：</p></li></ol><p>① 将数据从网卡拷贝到系统空间；</p><p>② 将数据从系统空间拷贝到用户空间。</p><p>对于NIO来说，缓存的使用可以使用DirectByteBuffer和HeapByteBuffer。如果使用了DirectByteBuffer，一般来说可以减少一次系统空间到用户空间的拷贝。但Buffer创建和销毁的成本更高，更不宜维护，通常会用内存池来提高性能。</p><p>如果数据量比较小的中小应用情况下，可以考虑使用heapBuffer；反之可以用directBuffer。</p><h1 id="NIO存在的问题"><a href="#NIO存在的问题" class="headerlink" title="NIO存在的问题"></a>NIO存在的问题</h1><p>使用NIO != 高性能，当连接数&lt;1000，并发程度不高或者局域网环境下NIO并没有显著的性能优势。</p><p>NIO并没有完全屏蔽平台差异，它仍然是基于各个操作系统的I/O系统实现的，差异仍然存在。使用NIO做网络编程构建事件驱动模型并不容易，陷阱重重。</p><p>推荐大家使用成熟的NIO框架，如Netty，MINA等。解决了很多NIO的陷阱，并屏蔽了操作系统的差异，有较好的性能和编程模型。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>最后总结一下到底NIO给我们带来了些什么：</p><ul><li>事件驱动模型</li><li>避免多线程</li><li>单线程处理多任务</li><li>非阻塞I/O，I/O读写不再阻塞，而是返回0</li><li>基于block的传输，通常比基于流的传输更高效</li><li>更高级的IO函数，zero-copy</li><li>IO多路复用大大提高了Java网络应用的可伸缩性和实用性</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;NIO（Non-blocking I/O，在Java领域，也称为New I/O），是一种同步非阻塞的I/O模型，也是I/O多路复用的基础，已经被越来越多地应用到大型应用服务器，成为解决高并发与大量连接、I/O处理问题的有效方式。&lt;/p&gt;
    
    </summary>
    
      <category term="2022年1月" scheme="http://yoursite.com/categories/2022%E5%B9%B41%E6%9C%88/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="NIO" scheme="http://yoursite.com/tags/NIO/"/>
    
  </entry>
  
  <entry>
    <title>JAVA 学习笔记（Netty 与 RPC）</title>
    <link href="http://yoursite.com/2022/01/02/JAVA%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88Netty%20%E4%B8%8E%20RPC%EF%BC%89/"/>
    <id>http://yoursite.com/2022/01/02/JAVA 学习笔记（Netty 与 RPC）/</id>
    <published>2022-01-02T13:12:12.000Z</published>
    <updated>2022-01-03T09:11:36.406Z</updated>
    
    <content type="html"><![CDATA[<p>JAVA中，微服务是一种面向服务的架构风格，其中应用程序被构建为多个不同的小型服务的集合而不是单个应用程序。</p><a id="more"></a><p>[TOC]</p><h1 id="Netty-原理"><a href="#Netty-原理" class="headerlink" title="Netty 原理"></a>Netty 原理</h1><p>Netty 是一个高性能、异步事件驱动的 NIO 框架，基于 JAVA NIO 提供的 API 实现。它提供了对TCP、UDP 和文件传输的支持，作为一个异步 NIO 框架，Netty 的所有 IO 操作都是异步非阻塞的，通过 Future-Listener 机制，用户可以方便的主动获取或者通过通知机制获得 IO 操作结果。</p><h1 id="Netty-高性能"><a href="#Netty-高性能" class="headerlink" title="Netty 高性能"></a>Netty 高性能</h1><p>在 IO 编程过程中，当需要同时处理多个客户端接入请求时，可以利用多线程或者 IO 多路复用技术进行处理。IO 多路复用技术通过把多个 IO 的阻塞复用到同一个 select 的阻塞上，从而使得系统在单线程的情况下可以同时处理多个客户端请求。与传统的多线程/多进程模型比，I/O 多路复用的<br>最大优势是系统开销小，系统不需要创建新的额外进程或者线程，也不需要维护这些进程和线程的运行，降低了系统的维护工作量，节省了系统资源。</p><p>与 Socket 类和 ServerSocket 类相对应，NIO 也提供了 SocketChannel 和 ServerSocketChannel两种不同的套接字通道实现。</p><h2 id="多路复用通讯方式"><a href="#多路复用通讯方式" class="headerlink" title="多路复用通讯方式"></a>多路复用通讯方式</h2><p>Netty 架构按照 Reactor 模式设计和实现，它的服务端通信序列图如下：</p><p>Netty 的 IO 线程 NioEventLoop 由于聚合了多路复用器 Selector，可以同时并发处理成百上千个客户端Channel，由于读写操作都是非阻塞的，这就可以充分提升 IO 线程的运行效率，避免由于频繁 IO 阻塞导致的线程挂起。</p><h2 id="异步通讯-NIO-1"><a href="#异步通讯-NIO-1" class="headerlink" title="异步通讯 NIO^1"></a>异步通讯 NIO<a href="https://zhuanlan.zhihu.com/p/23488863" target="_blank" rel="noopener">^1</a></h2><p>异步IO(Async I/O)</p><p>NIO（Non-blocking I/O，在Java领域，也称为New I/O）<br>由于 Netty 采用了异步通信模式，一个 IO线程可以并发处理N个客户端连接和读写操作，这从根本上解决了传统同步阻塞IO一连接一线程模型，架构的性能、弹性伸缩能力和可靠性都得到了极大的提升。</p><h2 id="零拷贝（DIRECT-BUFFERS-使用堆外直接内存）"><a href="#零拷贝（DIRECT-BUFFERS-使用堆外直接内存）" class="headerlink" title="零拷贝（DIRECT BUFFERS 使用堆外直接内存）"></a>零拷贝（DIRECT BUFFERS 使用堆外直接内存）</h2><ol><li><p>Netty 的接收和发送 ByteBuffer 采用 DIRECT BUFFERS，使用堆外直接内存进行Socket读写，不需要进行字节缓冲区的二次拷贝。如果使用传统的堆内存（HEAP BUFFERS）进行 Socket 读写，JVM 会将堆内存 Buffer 拷贝一份到直接内存中，然后才写入 Socket 中。相比于堆外直接内存，消息在发送过程中多了一次缓冲区的内存拷贝。</p></li><li><p>Netty 提供了组合 Buffer 对象，可以聚合多个ByteBuffer对象，用户可以像操作一个Buffer那样方便的对组合Buffer进行操作，避免了传统通过内存拷贝的方式将几个小 Buffer 合并成一个大的Buffer。</p></li><li><p>Netty的文件传输采用了transferTo方法，它可以直接将文件缓冲区的数据发送到目标Channel，避免了传统通过循环 write 方式导致的内存拷贝问题</p></li></ol><h2 id="内存池（基于内存池的缓冲区重用机制）"><a href="#内存池（基于内存池的缓冲区重用机制）" class="headerlink" title="内存池（基于内存池的缓冲区重用机制）"></a>内存池（基于内存池的缓冲区重用机制）</h2><p>随着 JVM 虚拟机和 JIT 即时编译技术的发展，对象的分配和回收是个非常轻量级的工作。但是对于缓冲区Buffer，情况却稍有不同，特别是对于堆外直接内存的分配和回收，是一件耗时的操作。为了尽量重用缓冲区，Netty 提供了基于内存池的缓冲区重用机制。</p><h2 id="高效的-Reactor-线程模型"><a href="#高效的-Reactor-线程模型" class="headerlink" title="高效的 Reactor 线程模型"></a>高效的 Reactor 线程模型</h2><p>常用的 Reactor 线程模型有三种，Reactor 单线程模型, Reactor 多线程模型, 主从 Reactor 多线程模<br>型。</p><h3 id="Reactor-单线程模型"><a href="#Reactor-单线程模型" class="headerlink" title="Reactor 单线程模型"></a>Reactor 单线程模型</h3><p>Reactor 单线程模型，指的是所有的 IO 操作都在同一个 NIO 线程上面完成，NIO 线程的职责如下：</p><pre><code>1) 作为 NIO 服务端，接收客户端的 TCP 连接；2) 作为 NIO 客户端，向服务端发起 TCP 连接；3) 读取通信对端的请求或者应答消息；4) 向通信对端发送消息请求或者应答消息</code></pre><p>由于 Reactor 模式使用的是异步非阻塞 IO，所有的 IO 操作都不会导致阻塞，理论上一个线程可以独立处理所有 IO 相关的操作。从架构层面看，一个 NIO 线程确实可以完成其承担的职责。例如，通过Acceptor 接收客户端的 TCP 连接请求消息，链路建立成功之后，通过 Dispatch 将对应的 ByteBuffer派发到指定的 Handler 上进行消息解码。用户 Handler 可以通过 NIO 线程将消息发送给客户端。</p><h1 id="Reactor-多线程模型"><a href="#Reactor-多线程模型" class="headerlink" title="Reactor 多线程模型"></a>Reactor 多线程模型</h1><p>Rector 多线程模型与单线程模型最大的区别就是有一组 NIO 线程处理 IO 操作。 有专门一个NIO 线程-Acceptor 线程用于监听服务端，接收客户端的 TCP 连接请求； 网络 IO 操作-读、写等由一个 NIO 线程池负责，线程池可以采用标准的 JDK 线程池实现，它包含一个任务队列和 N个可用的线程，由这些 NIO 线程负责消息的读取、解码、编码和发送；</p><h1 id="主从-Reactor-多线程模型"><a href="#主从-Reactor-多线程模型" class="headerlink" title="主从 Reactor 多线程模型"></a>主从 Reactor 多线程模型</h1><p>服务端用于接收客户端连接的不再是个 1 个单独的NIO线程，而是一个独立的NIO线程池。Acceptor接收到客户端TCP连接请求处理完成后（可能包含接入认证等），将新创建的SocketChannel 注册到 IO 线程池（sub reactor 线程池）的某个 IO 线程上，由它负责SocketChannel 的读写和编解码工作。Acceptor 线程池仅仅只用于客户端的登陆、握手和安全认证，一旦链路建立成功，就将链路注册到后端 subReactor 线程池的 IO 线程上，由 IO 线程负责后续的 IO 操作。</p><h2 id="无锁设计、线程绑定"><a href="#无锁设计、线程绑定" class="headerlink" title="无锁设计、线程绑定"></a>无锁设计、线程绑定</h2><p>Netty 采用了串行无锁化设计，在 IO 线程内部进行串行操作，避免多线程竞争导致的性能下降。表面上看，串行化设计似乎CPU利用率不高，并发程度不够。但是，通过调整NIO线程池的线程参数，可以同时启动多个串行化的线程并行运行，这种局部无锁化的串行线程设计相比一个队列多个工作线程模型性能更优。</p><p>Netty 的 NioEventLoop 读取到消息之后，直接调用 ChannelPipeline 的fireChannelRead(Object msg)，只要用户不主动切换线程，一直会由 NioEventLoop 调用<br>到用户的 Handler，期间不进行线程切换，这种串行化处理方式避免了多线程操作导致的锁的竞争，从性能角度看是最优的。</p><h2 id="高性能的序列化框架"><a href="#高性能的序列化框架" class="headerlink" title="高性能的序列化框架"></a>高性能的序列化框架</h2><p>Netty 默认提供了对 Google Protobuf 的支持，通过扩展 Netty 的编解码接口，用户可以实现其它的高性能序列化框架，例如 Thrift 的压缩二进制编解码框架。</p><ol><li>SO_RCVBUF 和 SO_SNDBUF：通常建议值为 128K 或者 256K。</li></ol><h3 id="小包封大包，防止网络阻塞"><a href="#小包封大包，防止网络阻塞" class="headerlink" title="小包封大包，防止网络阻塞"></a>小包封大包，防止网络阻塞</h3><ol start="2"><li>SO_TCPNODELAY：NAGLE 算法通过将缓冲区内的小封包自动相连，组成较大的封包，阻止大量小封包的发送阻塞网络，从而提高网络应用效率。但是对于时延敏感的应用场景需要关闭该优化算法。</li></ol><h3 id="软中断-Hash-值和-CPU-绑定"><a href="#软中断-Hash-值和-CPU-绑定" class="headerlink" title="软中断 Hash 值和 CPU 绑定"></a>软中断 Hash 值和 CPU 绑定</h3><ol start="3"><li>软中断：开启 RPS 后可以实现软中断，提升网络吞吐量。RPS 根据数据包的源地址，目的地址以及目的和源端口，计算出一个 hash 值，然后根据这个 hash 值来选择软中断运行的 cpu，从上层来看，也就是说将每个连接和 cpu 绑定，并通过这个 hash 值，来均衡软中断在多个 cpu 上，提升网络并行处理性能。</li></ol><h1 id="Netty-RPC-实现"><a href="#Netty-RPC-实现" class="headerlink" title="Netty RPC 实现"></a>Netty RPC 实现</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>RPC，即 Remote Procedure Call（远程过程调用），调用远程计算机上的服务，就像调用本地服务一样。RPC 可以很好的解耦系统，如 WebService 就是一种基于 Http 协议的 RPC。这个 RPC 整体框架如下：</p><h2 id="关键技术"><a href="#关键技术" class="headerlink" title="关键技术"></a>关键技术</h2><ol><li>服务发布与订阅：服务端使用 Zookeeper 注册服务地址，客户端从 Zookeeper 获取可用的服务地址。</li><li>通信：使用 Netty 作为通信框架。</li><li>Spring：使用 Spring 配置服务，加载 Bean，扫描注解。</li><li>动态代理：客户端使用代理模式透明化服务调用。</li><li>消息编解码：使用 Protostuff 序列化和反序列化消息。</li></ol><h2 id="核心流程"><a href="#核心流程" class="headerlink" title="核心流程"></a>核心流程</h2><ol><li>服务消费方（client）调用以本地调用方式调用服务；</li><li>client stub 接收到调用后负责将方法、参数等组装成能够进行网络传输的消息体；</li><li>client stub 找到服务地址，并将消息发送到服务端；</li><li>server stub 收到消息后进行解码；</li><li>server stub 根据解码结果调用本地的服务；</li><li>本地服务执行并将结果返回给 server stub；</li><li>server stub 将返回结果打包成消息并发送至消费方；</li><li>client stub 接收到消息，并进行解码；</li><li>服务消费方得到最终结果。</li></ol><p>RPC 的目标就是要 2~8 这些步骤都封装起来，让用户对这些细节透明。JAVA 一般使用动态代理方式实现远程调用。</p><h2 id="消息编解码"><a href="#消息编解码" class="headerlink" title="消息编解码"></a>消息编解码</h2><h3 id="消息数据结构（接口名称-方法名-参数类型和参数值-超时时间-requestID）"><a href="#消息数据结构（接口名称-方法名-参数类型和参数值-超时时间-requestID）" class="headerlink" title="消息数据结构（接口名称+方法名+参数类型和参数值+超时时间+ requestID）"></a>消息数据结构（接口名称+方法名+参数类型和参数值+超时时间+ requestID）</h3><p> 客户端的请求消息结构一般需要包括以下内容：</p><ol><li>接口名称：在我们的例子里接口名是“HelloWorldService”，如果不传，服务端就不知道调用哪个接口了；</li><li>方法名：一个接口内可能有很多方法，如果不传方法名服务端也就不知道调用哪个方法；</li><li>参数类型和参数值：参数类型有很多，比如有 bool、int、long、double、string、map、list，甚至如 struct（class）；以及相应的参数值；</li><li>超时时间：</li><li>requestID，标识唯一请求 id，在下面一节会详细描述 requestID 的用处。</li><li>服务端返回的消息 ： 一般包括以下内容。返回值+状态 code+requestID</li></ol><h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><p>目前互联网公司广泛使用 Protobuf、Thrift、Avro 等成熟的序列化解决方案来搭建 RPC 框架，这些都是久经考验的解决方案。</p><h2 id="通讯过程"><a href="#通讯过程" class="headerlink" title="通讯过程"></a>通讯过程</h2><h3 id="核心问题-线程暂停、消息乱序"><a href="#核心问题-线程暂停、消息乱序" class="headerlink" title="核心问题(线程暂停、消息乱序)"></a>核心问题(线程暂停、消息乱序)</h3><p>如果使用 netty 的话，一般会用 channel.writeAndFlush()方法来发送消息二进制串，这个方法调用后对于整个远程调用(从发出请求到接收到结果)来说是一个异步的，即对于当前线程来说，将请求发送出来后，线程就可以往后执行了，至于服务端的结果，是服务端处理完成后，再以消息的形式发送给客户端的。于是这里出现以下两个问题：</p><ol><li>怎么让当前线程“暂停”，等结果回来后，再向后执行？</li><li>如果有多个线程同时进行远程方法调用，这时建立在 client server 之间的 socket 连接上会有很多双方发送的消息传递，前后顺序也可能是随机的，server 处理完结果后，将结果消息发送给 client，client 收到很多消息，怎么知道哪个消息结果是原先哪个线程调用的？如下图所示，线程 A 和线程 B 同时向 client socket 发送请求 requestA 和 requestB，socket 先后将 requestB 和 requestA 发送至 server，而 server 可能将 responseB 先返<br>回，尽管 requestB 请求到达时间更晚。我们需要一种机制保证 responseA 丢给ThreadA，responseB 丢给 ThreadB。</li></ol><h3 id="通讯流程"><a href="#通讯流程" class="headerlink" title="通讯流程"></a>通讯流程</h3><h4 id="requestID-生成-AtomicLong"><a href="#requestID-生成-AtomicLong" class="headerlink" title="requestID 生成-AtomicLong"></a>requestID 生成-AtomicLong</h4><ol><li>client 线程每次通过 socket 调用一次远程接口前，生成一个唯一的 ID，即 requestID（requestID 必需保证在一个 Socket 连接里面是唯一的），一般常常使用 AtomicLong从 0 开始累计数字生成唯一 ID；</li></ol><h4 id="存放回调对象-callback-到全局-ConcurrentHashMap"><a href="#存放回调对象-callback-到全局-ConcurrentHashMap" class="headerlink" title="存放回调对象 callback 到全局 ConcurrentHashMap"></a>存放回调对象 callback 到全局 ConcurrentHashMap</h4><ol start="2"><li>将 处 理 结 果 的 回 调 对 象 callback ， 存 放 到 全 局 ConcurrentHashMap 里 面put(requestID, callback)；</li></ol><h4 id="synchronized-获取回调对象-callback-的锁并自旋-wait"><a href="#synchronized-获取回调对象-callback-的锁并自旋-wait" class="headerlink" title="synchronized 获取回调对象 callback 的锁并自旋 wait"></a>synchronized 获取回调对象 callback 的锁并自旋 wait</h4><ol start="3"><li>当线程调用 channel.writeAndFlush()发送消息后，紧接着执行 callback 的 get()方法试图获取远程返回的结果。在 get()内部，则使用 synchronized 获取回调对象 callback 的锁，再先检测是否已经获取到结果，如果没有，然后调用 callback 的wait()方法，释放callback上的锁，让当前线程处于等待状态。</li></ol><h4 id="监听消息的线程收到消息，找到-callback-上的锁并唤醒"><a href="#监听消息的线程收到消息，找到-callback-上的锁并唤醒" class="headerlink" title="监听消息的线程收到消息，找到 callback 上的锁并唤醒"></a>监听消息的线程收到消息，找到 callback 上的锁并唤醒</h4><ol start="4"><li>服务端接收到请求并处理后，将 response结果（此结果中包含了前面的requestID）发送给客户端，客户端socket连接上专门监听消息的线程收到消息，分析结果，取到requestID ， 再 从 前 面 的 ConcurrentHashMap 里 面 get(requestID) ， 从 而 找 到callback 对象，再用 synchronized 获取 callback 上的锁，将方法调用结果设置到callback 对象里，再调用 callback.notifyAll()唤醒前面处于等待状态的线程。</li></ol><details>    <summary>通讯流程</summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public Object get() &#123;</span><br><span class="line">    synchronized (this) &#123; // 旋锁</span><br><span class="line">        while (true) &#123; // 是否有结果了</span><br><span class="line">            If （!isDone）&#123;</span><br><span class="line">                wait(); //没结果释放锁，让当前线程处于等待状态</span><br><span class="line">            &#125;else&#123;//获取数据并处理</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">private void setDone(Response res) &#123;</span><br><span class="line">    this.res = res;</span><br><span class="line">    isDone = true;</span><br><span class="line">    synchronized (this) &#123; //获取锁，因为前面 wait()已经释放了 callback 的锁了</span><br><span class="line">        notifyAll(); // 唤醒处于等待的线程</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h1 id="RMI-实现方式"><a href="#RMI-实现方式" class="headerlink" title="RMI 实现方式"></a>RMI 实现方式</h1><p> Java 远程方法调用，即 Java RMI（Java Remote Method Invocation）是 Java编程语言里，一种用于实现远程过程调用的应用程序编程接口。它使客户机上运行的程序可以调用远程服务器上的对象。远程方法调用特性使 Java 编程人员能够在网络环境中分布操作。RMI 全部的宗旨就是尽可能简化远程接口对象的使用。</p><h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><ol><li>编写远程服务接口，该接口必须继承 java.rmi.Remote 接口，方法必须抛出java.rmi.RemoteException 异常；</li><li>编写远程接口实现类，该实现类必须继承 java.rmi.server.UnicastRemoteObject 类；</li><li>运行 RMI 编译器（rmic），创建客户端 stub 类和服务端 skeleton 类;</li><li>启动一个 RMI 注册表，以便驻留这些服务;</li><li>在 RMI 注册表中注册服务；</li><li>客户端查找远程对象，并调用远程方法；</li></ol><details>    <summary>RMI 实现方式</summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1：创建远程接口，继承 java.rmi.Remote 接口</span><br><span class="line">public interface GreetService extends java.rmi.Remote &#123;</span><br><span class="line">    String sayHello(String name) throws RemoteException;</span><br><span class="line">&#125;</span><br><span class="line">2：实现远程接口，继承 java.rmi.server.UnicastRemoteObject 类</span><br><span class="line">public class GreetServiceImpl extends java.rmi.server.UnicastRemoteObject</span><br><span class="line">        implements GreetService &#123;</span><br><span class="line">    private static final long serialVersionUID = 3434060152387200042L;</span><br><span class="line">    public GreetServiceImpl() throws RemoteException &#123;</span><br><span class="line">        super();</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public String sayHello(String name) throws RemoteException &#123;</span><br><span class="line">        return &quot;Hello &quot; + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">3：生成 Stub 和 Skeleton;</span><br><span class="line">4：执行 rmiregistry 命令注册服务</span><br><span class="line">5：启动服务</span><br><span class="line">LocateRegistry.createRegistry(1098);</span><br><span class="line">Naming.bind(&quot;rmi://10.108.1.138:1098/GreetService&quot;, new GreetServiceImpl());</span><br><span class="line">6.客户端调用</span><br><span class="line">GreetService greetService = (GreetService)</span><br><span class="line">        Naming.lookup(&quot;rmi://10.108.1.138:1098/GreetService&quot;);</span><br><span class="line">System.out.println(greetService.sayHello(&quot;Jobs&quot;));</span><br></pre></td></tr></table></figure></details><h1 id="Protoclol-Buffer"><a href="#Protoclol-Buffer" class="headerlink" title="Protoclol Buffer"></a>Protoclol Buffer</h1><p>protocol buffer 是 google 的一个开源项目,它是用于结构化数据串行化的灵活、高效、自动的方法，例如XML，不过它比xml更小、更快、也更简单。你可以定义自己的数据结构，然后使用代码生成器生成的代码来读写这个数据结构。你甚至可以在无需重新部署程序的情况下更新数据结构。</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>Protocol Buffer 的序列化 &amp; 反序列化简单 &amp; 速度快的原因是：</p><ol><li>编码 / 解码 方式简单（只需要简单的数学运算 = 位移等等）</li><li>采用 Protocol Buffer 自身的框架代码 和 编译器 共同完成</li></ol><p>Protocol Buffer 的数据压缩效果好（即序列化后的数据量体积小）的原因是：</p><ol><li>a. 采用了独特的编码方式，如 Varint、Zigzag 编码方式等等</li><li>b. 采用 T - L - V 的数据存储方式：减少了分隔符的使用 &amp; 数据存储得紧凑</li></ol><h1 id="Thrift"><a href="#Thrift" class="headerlink" title="Thrift"></a>Thrift</h1><p>Apache Thrift 是 Facebook实现的一种高效的、支持多种编程语言的远程服务调用的框架。本文将从Java 开发人员角度详细介绍 Apache Thrift的架构、开发和部署，并且针对不同的传输协议和服务类型给出相应的 Java 实例，同时详细介绍 Thrift异步客户端的实现，最后提出使用 Thrift 需要注意的事项。</p><p>目前流行的服务调用方式有很多种，例如基于 SOAP 消息格式的 Web Service，基于 JSON 消息格式的 RESTful 服务等。其中所用到的数据传输方式包括 XML，JSON 等，然而 XML 相对体积太大，传输效率低，JSON 体积较小，新颖，但还不够完善。本文将介绍由 Facebook 开发的远程服务调用框架Apache Thrift，它采用接口描述语言定义并创建服务，支持可扩展的跨语言服务开发，所包含的代码生成引擎可以在多种语言中，如 C++, Java, Python, PHP, Ruby, Erlang, Perl, Haskell, C#, Cocoa,Smalltalk 等创建高效的、无缝的服务，其传输数据采用二进制格式，相对 XML 和 JSON 体积更小，对于高并发、大数据量和多语言的环境更有优势。本文将详细介绍Thrift的使用，并且提供丰富的实例代码加以解释说明，帮助使用者快速构建服务。</p><p>为什么要 Thrift：</p><p>1、多语言开发的需要<br>2、性能问题</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JAVA中，微服务是一种面向服务的架构风格，其中应用程序被构建为多个不同的小型服务的集合而不是单个应用程序。&lt;/p&gt;
    
    </summary>
    
      <category term="2022年1月" scheme="http://yoursite.com/categories/2022%E5%B9%B41%E6%9C%88/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Netty" scheme="http://yoursite.com/tags/Netty/"/>
    
      <category term="RPC" scheme="http://yoursite.com/tags/RPC/"/>
    
  </entry>
  
  <entry>
    <title>JAVA 学习笔记（微服务）</title>
    <link href="http://yoursite.com/2021/12/31/JAVA%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%BE%AE%E6%9C%8D%E5%8A%A1%EF%BC%89/"/>
    <id>http://yoursite.com/2021/12/31/JAVA 学习笔记（微服务）/</id>
    <published>2021-12-31T10:12:12.000Z</published>
    <updated>2022-01-02T12:57:24.914Z</updated>
    
    <content type="html"><![CDATA[<p>JAVA中，微服务是一种面向服务的架构风格，其中应用程序被构建为多个不同的小型服务的集合而不是单个应用程序。</p><a id="more"></a><p>[TOC]</p><h1 id="服务注册发现"><a href="#服务注册发现" class="headerlink" title="服务注册发现"></a>服务注册发现</h1><p>服务注册就是维护一个登记簿，它管理系统内所有的服务地址。当新的服务启动后，它会向登记簿交待自己的地址信息。服务的依赖方直接向登记簿要 Service Provider 地址就行了。当下用于服务注册的工具非常多 ZooKeeper，Consul，Etcd, 还有Netflix家的eureka等。服务注册有两种形式：客户端注册和第三方注册。</p><h2 id="客户端注册（zookeeper）"><a href="#客户端注册（zookeeper）" class="headerlink" title="客户端注册（zookeeper）"></a>客户端注册（zookeeper）</h2><p>客户端注册是服务自身要负责注册与注销的工作。当服务启动后向注册中心注册自身，当服务下线时注销自己。期间还需要和注册中心保持心跳。心跳不一定要客户端来做，也可以由注册中心负责（这个过程叫探活）。这种方式的缺点是注册工作与服务耦合在一起，不同语言都要实现一套注册逻辑。</p><h2 id="第三方注册（独立的服务-Registrar）"><a href="#第三方注册（独立的服务-Registrar）" class="headerlink" title="第三方注册（独立的服务 Registrar）"></a>第三方注册（独立的服务 Registrar）</h2><p>第三方注册由一个独立的服务Registrar负责注册与注销。当服务启动后以某种方式通知Registrar，然后Registrar负责向注册中心发起注册工作。同时注册中心要维护与服务之间的心跳，当服务不可用时，向注册中心注销服务。这种方式的缺点是 Registrar 必须是一个高可用的系统，否则注册工作没法进展。</p><h2 id="客户端发现"><a href="#客户端发现" class="headerlink" title="客户端发现"></a>客户端发现</h2><p>客户端发现是指客户端负责查询可用服务地址，以及负载均衡的工作。这种方式最方便直接，而且也方便做负载均衡。再者一旦发现某个服务不可用立即换另外一个，非常直接。缺点也在于多语言时的重复工作，每个语言实现相同的逻辑</p><h2 id="服务端发现"><a href="#服务端发现" class="headerlink" title="服务端发现"></a>服务端发现</h2><p>服务端发现需要额外的 Router 服务，请求先打到 Router，然后 Router 负责查询服务与负载均衡。这种方式虽然没有客户端发现的缺点，但是它的缺点是保证 Router 的高可用。</p><h2 id="Consul"><a href="#Consul" class="headerlink" title="Consul"></a>Consul</h2><p>相较于etcd、zookeeper，consul最大的特点就是：它整合了用户服务发现普遍的需求，开箱即用，降低了使用的门槛，并不需要任何第三方的工具。代码实现上也足够简单。</p><p>展开了说，consul的功能有：</p><ul><li>通过DNS或HTTP，应用能轻易地找到它们依赖的系统</li><li>提供了多种健康检查方式：http返回码200，内存是否超限，tcp连接是否成功</li><li>kv存储，并提供http api</li><li>多数据中心，这点是zookeeper所不具备的。</li></ul><p>相比于zookeeper的服务发现使用，consul并不需要专门的sdk集成到服务中，因此它不限制任何语言的使用。我们看看consul一般是怎么使用的。</p><ul><li>每台服务器上都要安装一个consul agent。</li><li>consul agent支持通过配置文件注册服务，或者在服务中通过http接口来注册服务。</li><li>注册服务后，consul agent通过指定的健康检查方式，定期检查服务是否存活。</li><li>如果服务想查询其他服务的存活状态，只需要与本机的consul agent发起一次http请求或者dns请求即可。</li></ul><p>简单点说，consul的使用不依赖任何sdk，依靠简单的http请求就能满足服务发现的所有逻辑。不过，服务每次都从consul agent获取其他服务的存活状态，相比于zookeeper的watcher机制，实时性稍差一点，需考虑如何尽可能提高实时性，问题不会很大。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>1.简单易用，不需要集成sdk</p><p>2.自带健康检查</p><p>3.支持多数据中心</p><p>4.提供web管理界面</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>不能实时获取服务信息的变化通知</p><p>接口是http/dns，一致性算法采用Raft</p><h2 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a>Eureka</h2><h2 id="SmartStack"><a href="#SmartStack" class="headerlink" title="SmartStack"></a>SmartStack</h2><h2 id="Etcd"><a href="#Etcd" class="headerlink" title="Etcd"></a>Etcd</h2><p>etcd是一个采用http协议的分布式键值对存储系统，因其易用，简单。很多系统都采用或支持etcd作为服务发现的一部分，比如kubernetes。但因为其只是一个存储系统，如果想要提供完整的服务发现功能，必须搭配一些第三方的工具。</p><p>比如配合etcd、Registrator、confd组合，就能搭建一个非常简单而强大的服务发现框架。但这种搭建操作就稍微麻烦了点，尤其是相对consul来说。所以etcd大部分场景都是被用来做kv存储，比如kubernetes。</p><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><p>1.简单易用，不需要集成sdk</p><p>2.可配置性强</p><h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><p>1.没有健康检查</p><p>2.需配合第三方工具一起完成服务发现</p><p>3.不支持多数据中心</p><p>接口是http，一致性算法采用Raft</p><h2 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h2><h3 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h3><p>1.功能强大，不仅仅只是服务发现</p><p>2.提供watcher机制能实时获取服务提供者的状态</p><p>3.dubbo等框架支持</p><h3 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h3><p>1.没有健康检查</p><p>2.需在服务中集成sdk，复杂度高</p><p>3.不支持多数据中心</p><p>接口是sdk，一致性算法采用Paxos</p><h1 id="API-网关"><a href="#API-网关" class="headerlink" title="API 网关"></a>API 网关</h1><p>API Gateway 是一个服务器，也可以说是进入系统的唯一节点。这跟面向对象设计模式中的Facade 模式很像。API Gateway 封装内部系统的架构，并且提供 API 给各个客户端。它还可能有其他功能，如授权、监控、负载均衡、缓存、请求分片和管理、静态响应处理等。下图展示了一个适应当前架构的 API Gateway。</p><p>API Gateway 负责请求转发、合成和协议转换。所有来自客户端的请求都要先经过 API Gateway，然后路由这些请求到对应的微服务。API Gateway 将经常通过调用多个微服务来处理一个请求以及聚合多个服务的结果。它可以在 web 协议与内部使用的非 Web 友好型协议间进行转换，如HTTP 协议、WebSocket 协议。</p><h2 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发"></a>请求转发</h2><p>服务转发主要是对客户端的请求按照微服务的负载转发到不同的服务上</p><h2 id="响应合并"><a href="#响应合并" class="headerlink" title="响应合并"></a>响应合并</h2><p>把业务上需要调用多个服务接口才能完成的工作合并成一次调用对外统一提供服务。</p><h2 id="协议转换"><a href="#协议转换" class="headerlink" title="协议转换"></a>协议转换</h2><p>重点是支持 SOAP，JMS，Rest 间的协议转换。</p><h2 id="数据转换"><a href="#数据转换" class="headerlink" title="数据转换"></a>数据转换</h2><p>重点是支持 XML 和 Json 之间的报文格式转换能力（可选）</p><h2 id="安全认证"><a href="#安全认证" class="headerlink" title="安全认证"></a>安全认证</h2><ol><li>基于 Token 的客户端访问控制和安全策略</li><li>传输数据和报文加密，到服务端解密，需要在客户端有独立的 SDK 代理包</li><li>基于 Https 的传输加密，客户端和服务端数字证书支持</li><li>基于 OAuth2.0 的服务安全认证(授权码，客户端，密码模式等）</li></ol><h1 id="配置中心"><a href="#配置中心" class="headerlink" title="配置中心"></a>配置中心</h1><p>配置中心一般用作系统的参数配置，它需要满足如下几个要求：高效获取、实时感知、分布式访问。</p><h2 id="zookeeper-配置中心"><a href="#zookeeper-配置中心" class="headerlink" title="zookeeper 配置中心"></a>zookeeper 配置中心</h2><p>实现的架构图如下所示，采取数据加载到内存方式解决高效获取的问题，借助 zookeeper 的节点监听机制来实现实时感知。</p><h2 id="配置中心数据分类"><a href="#配置中心数据分类" class="headerlink" title="配置中心数据分类"></a>配置中心数据分类</h2><h1 id="事件调度（kafka）"><a href="#事件调度（kafka）" class="headerlink" title="事件调度（kafka）"></a>事件调度（kafka）</h1><p>消息服务和事件的统一调度，常用用 kafka ，activemq 等。</p><h1 id="服务跟踪（starter-sleuth）"><a href="#服务跟踪（starter-sleuth）" class="headerlink" title="服务跟踪（starter-sleuth）"></a>服务跟踪（starter-sleuth）</h1><p>随着微服务数量不断增长，需要跟踪一个请求从一个微服务到下一个微服务的传播过程， Spring Cloud Sleuth 正是解决这个问题，它在日志中引入唯一 ID，以保证微服务调用之间的一致性，这样你就能跟踪某个请求是如何从一个微服务传递到下一个。</p><ol><li>为了实现请求跟踪，当请求发送到分布式系统的入口端点时，只需要服务跟踪框架为该请求创建一个唯一的跟踪标识，同时在分布式系统内部流转的时候，框架始终保持传递该唯一标识，直到返回给请求方为止，这个唯一标识就是前文中提到的 Trace ID。通过 Trace ID的记录，我们就能将所有请求过程日志关联起来。</li><li>为了统计各处理单元的时间延迟，当请求达到各个服务组件时，或是处理逻辑到达某个状态时，也通过一个唯一标识来标记它的开始、具体过程以及结束，该标识就是我们前文中提到的 Span ID，对于每个 Span 来说，它必须有开始和结束两个节点，通过记录开始 Span 和结束 Span 的时间戳，就能统计出该 Span 的时间延迟，除了时间戳记录之外，它还可以包含一些其他元数据，比如：事件名称、请求信息等。</li><li>在快速入门示例中，我们轻松实现了日志级别的跟踪信息接入，这完全归功于spring-cloudstarter-sleuth 组件的实现。在 Spring Boot应用中，通过在工程中引入 spring-cloudstarter-sleuth 依赖之后， 它会自动的为当前应用构建起各通信通道的跟踪机制，比如：</li></ol><ul><li>通过诸如 RabbitMQ、Kafka（或者其他任何 Spring Cloud Stream 绑定器实现的消息中间件）传递的请求。</li><li>通过 Zuul 代理传递的请求。</li><li>通过 RestTemplate 发起的请求。</li></ul><h1 id="服务熔断（Hystrix）"><a href="#服务熔断（Hystrix）" class="headerlink" title="服务熔断（Hystrix）"></a>服务熔断（Hystrix）</h1><p>在微服务架构中通常会有多个服务层调用，基础服务的故障可能会导致级联故障，进而造成整个系统不可用的情况，这种现象被称为服务雪崩效应。服务雪崩效应是一种因“服务提供者”的不可用导致“服务消费者”的不可用,并将不可用逐渐放大的过程。熔断器的原理很简单，如同电力过载保护器。它可以实现快速失败，如果它在一段时间内侦测到许多类似的错误，会强迫其以后的多个调用快速失败，不再访问远程服务器，从而防止应用程序不断地尝试执行可能会失败的操作，使得应用程序继续执行而不用等待修正错误，或者浪费CPU时间去等到长时间的超时产生。熔断器也可以使应用程序能够诊断错误是否已经修正，如果已经修正，应用程序会再次尝试调用操作。</p><h1 id="Hystrix-断路器机制"><a href="#Hystrix-断路器机制" class="headerlink" title="Hystrix 断路器机制"></a>Hystrix 断路器机制</h1><p>断路器很好理解, 当 Hystrix Command 请求后端服务失败数量超过一定比例(默认50%),断路器会切换到开路状态(Open).这时所有请求会直接失败而不会发送到后端服务. 断路器保持在开路状态一段时间后(默认5秒),自动切换到半开路状态(HALF-OPEN).这时会判断下一次请求的返回情况,如果请求成功,断路器切回闭路状态(CLOSED), 否则重新切换到开路状态(OPEN). Hystrix 的断路器就像我们家庭电路中的保险丝, 一旦后端服务不可用, 断路器会直接切断请求链, 避免发送大量无效请求影响系统吞吐量, 并且断路器有自我检测并恢复的能力。</p><h1 id="API-管理"><a href="#API-管理" class="headerlink" title="API 管理"></a>API 管理</h1><p>SwaggerAPI 管理工具。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JAVA中，微服务是一种面向服务的架构风格，其中应用程序被构建为多个不同的小型服务的集合而不是单个应用程序。&lt;/p&gt;
    
    </summary>
    
      <category term="2021年12月" scheme="http://yoursite.com/categories/2021%E5%B9%B412%E6%9C%88/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Microservice" scheme="http://yoursite.com/tags/Microservice/"/>
    
  </entry>
  
  <entry>
    <title>JAVA 学习笔记（IoC控制反转）</title>
    <link href="http://yoursite.com/2021/12/30/JAVA%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88IoC%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC%EF%BC%89/"/>
    <id>http://yoursite.com/2021/12/30/JAVA 学习笔记（IoC控制反转）/</id>
    <published>2021-12-30T10:12:12.000Z</published>
    <updated>2021-12-31T03:38:41.796Z</updated>
    
    <content type="html"><![CDATA[<p>Spring提供的容器又称为IoC容器，什么是IoC？</p><p>IoC全称Inversion of Control，直译为控制反转。IoC又称为依赖注入（DI：Dependency Injection）</p><a id="more"></a><p>[TOC]</p><h1 id="控制反转-1"><a href="#控制反转-1" class="headerlink" title="控制反转^1"></a>控制反转<a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1282381977747489" target="_blank" rel="noopener">^1</a></h1><p>那么何谓IoC？在理解IoC之前，我们先看看通常的Java组件是如何协作的。</p><p>我们假定一个在线书店，通过BookService获取书籍：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class BookService &#123;</span><br><span class="line">    private HikariConfig config = new HikariConfig();</span><br><span class="line">    private DataSource dataSource = new HikariDataSource(config);</span><br><span class="line"></span><br><span class="line">    public Book getBook(long bookId) &#123;</span><br><span class="line">        try (Connection conn = dataSource.getConnection()) &#123;</span><br><span class="line">            ...</span><br><span class="line">            return book;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了从数据库查询书籍，BookService持有一个DataSource。为了实例化一个HikariDataSource，又不得不实例化一个HikariConfig。</p><p>现在，我们继续编写UserService获取用户：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class UserService &#123;</span><br><span class="line">    private HikariConfig config = new HikariConfig();</span><br><span class="line">    private DataSource dataSource = new HikariDataSource(config);</span><br><span class="line"></span><br><span class="line">    public User getUser(long userId) &#123;</span><br><span class="line">        try (Connection conn = dataSource.getConnection()) &#123;</span><br><span class="line">            ...</span><br><span class="line">            return user;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为UserService也需要访问数据库，因此，我们不得不也实例化一个HikariDataSource。</p><p>在处理用户购买的CartServlet中，我们需要实例化UserService和BookService：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class CartServlet extends HttpServlet &#123;</span><br><span class="line">    private BookService bookService = new BookService();</span><br><span class="line">    private UserService userService = new UserService();</span><br><span class="line"></span><br><span class="line">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        long currentUserId = getFromCookie(req);</span><br><span class="line">        User currentUser = userService.getUser(currentUserId);</span><br><span class="line">        Book book = bookService.getBook(req.getParameter(&quot;bookId&quot;));</span><br><span class="line">        cartService.addToCart(currentUser, book);</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类似的，在购买历史HistoryServlet中，也需要实例化UserService和BookService：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public class HistoryServlet extends HttpServlet &#123;</span><br><span class="line">    private BookService bookService = new BookService();</span><br><span class="line">    private UserService userService = new UserService();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述每个组件都采用了一种简单的通过new创建实例并持有的方式。仔细观察，会发现以下缺点：</p><p>实例化一个组件其实很难，例如，BookService和UserService要创建HikariDataSource，实际上需要读取配置，才能先实例化HikariConfig，再实例化HikariDataSource。</p><p>没有必要让BookService和UserService分别创建DataSource实例，完全可以共享同一个DataSource，但谁负责创建DataSource，谁负责获取其他组件已经创建的DataSource，不好处理。类似的，CartServlet和HistoryServlet也应当共享BookService实例和UserService实例，但也不好处理。</p><p>很多组件需要销毁以便释放资源，例如DataSource，但如果该组件被多个组件共享，如何确保它的使用方都已经全部被销毁？</p><p>随着更多的组件被引入，例如，书籍评论，需要共享的组件写起来会更困难，这些组件的依赖关系会越来越复杂。</p><p>测试某个组件，例如BookService，是复杂的，因为必须要在真实的数据库环境下执行。</p><p>从上面的例子可以看出，如果一个系统有大量的组件，其生命周期和相互之间的依赖关系如果由组件自身来维护，不但大大增加了系统的复杂度，而且会导致组件之间极为紧密的耦合，继而给测试和维护带来了极大的困难。</p><p>因此，核心问题是：</p><ul><li>谁负责创建组件？</li><li>谁负责根据依赖关系组装组件？</li><li>销毁时，如何按依赖顺序正确销毁？<br>解决这一问题的核心方案就是IoC。</li></ul><p>传统的应用程序中，控制权在程序本身，程序的控制流程完全由开发者控制，例如：</p><p>CartServlet创建了BookService，在创建BookService的过程中，又创建了DataSource组件。这种模式的缺点是，一个组件如果要使用另一个组件，必须先知道如何正确地创建它。</p><p>在IoC模式下，控制权发生了反转，即从应用程序转移到了IoC容器，所有组件不再由应用程序自己创建和配置，而是由IoC容器负责，这样，应用程序只需要直接使用已经创建好并且配置好的组件。为了能让组件在IoC容器中被“装配”出来，需要某种“注入”机制，例如，BookService自己并不会创建DataSource，而是等待外部通过setDataSource()方法来注入一个DataSource：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class BookService &#123;</span><br><span class="line">    private DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    public void setDataSource(DataSource dataSource) &#123;</span><br><span class="line">        this.dataSource = dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不直接new一个DataSource，而是注入一个DataSource，这个小小的改动虽然简单，却带来了一系列好处：</p><ul><li>BookService不再关心如何创建DataSource，因此，不必编写读取数据库配置之类的代码；</li><li>DataSource实例被注入到BookService，同样也可以注入到UserService，因此，共享一个组件非常简单；</li><li>测试BookService更容易，因为注入的是DataSource，可以使用内存数据库，而不是真实的MySQL配置。</li></ul><h1 id="依赖注入（DI：Dependency-Injection）"><a href="#依赖注入（DI：Dependency-Injection）" class="headerlink" title="依赖注入（DI：Dependency Injection）"></a>依赖注入（DI：Dependency Injection）</h1><p>因此，IoC又称为依赖注入（DI：Dependency Injection），它解决了一个最主要的问题：将组件的创建+配置与组件的使用相分离，并且，由IoC容器负责管理组件的生命周期。</p><p>因为IoC容器要负责实例化所有的组件，因此，有必要告诉容器如何创建组件，以及各组件的依赖关系。一种最简单的配置是通过XML文件来实现，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans&gt;</span><br><span class="line">    &lt;bean id=&quot;dataSource&quot; class=&quot;HikariDataSource&quot; /&gt;</span><br><span class="line">    &lt;bean id=&quot;bookService&quot; class=&quot;BookService&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;bean id=&quot;userService&quot; class=&quot;UserService&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p>上述XML配置文件指示IoC容器创建3个JavaBean组件，并把id为dataSource的组件通过属性dataSource（即调用setDataSource()方法）注入到另外两个组件中。</p><p>在Spring的IoC容器中，我们把所有组件统称为JavaBean，即配置一个组件就是配置一个Bean。</p><h1 id="依赖注入方式"><a href="#依赖注入方式" class="headerlink" title="依赖注入方式"></a>依赖注入方式</h1><p>我们从上面的代码可以看到，依赖注入可以通过set()方法实现。但依赖注入也可以通过构造方法实现。</p><p>很多Java类都具有带参数的构造方法，如果我们把BookService改造为通过构造方法注入，那么实现代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class BookService &#123;</span><br><span class="line">    private DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    public BookService(DataSource dataSource) &#123;</span><br><span class="line">        this.dataSource = dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring的IoC容器同时支持属性注入和构造方法注入，并允许混合使用。</p><h1 id="无侵入容器"><a href="#无侵入容器" class="headerlink" title="无侵入容器"></a>无侵入容器</h1><p>在设计上，Spring的IoC容器是一个高度可扩展的无侵入容器。所谓无侵入，是指应用程序的组件无需实现Spring的特定接口，或者说，组件根本不知道自己在Spring的容器中运行。这种无侵入的设计有以下好处：</p><ul><li>应用程序组件既可以在Spring的IoC容器中运行，也可以自己编写代码自行组装配置；</li><li>测试的时候并不依赖Spring容器，可单独进行测试，大大提高了开发效率。</li></ul><h1 id="控制反转（IOC）和依赖注入（DI）的区别-2"><a href="#控制反转（IOC）和依赖注入（DI）的区别-2" class="headerlink" title="控制反转（IOC）和依赖注入（DI）的区别^2"></a>控制反转（IOC）和依赖注入（DI）的区别<a href="https://www.cnblogs.com/jett010/p/10984020.html" target="_blank" rel="noopener">^2</a></h1><p>IOC   inversion of control  控制反转</p><p>DI   Dependency Injection  依赖注入</p><p>要理解这两个概念，首先要搞清楚以下几个问题：</p><ul><li>参与者都有谁？</li><li>依赖：谁依赖于谁？为什么需要依赖？</li><li>注入：谁注入于谁？到底注入什么？</li><li>控制反转：谁控制谁？控制什么？为何叫反转（有反转就应该有正转了）？</li><li>依赖注入和控制反转是同一概念吗？</li></ul><p>下面就来简要的回答一下上述问题，把这些问题搞明白了，IoC/DI也就明白了。</p><h2 id="参与者都有谁："><a href="#参与者都有谁：" class="headerlink" title="参与者都有谁："></a>参与者都有谁：</h2><p>一般有三方参与者，一个是某个对象；一个是IoC/DI的容器；另一个是某个对象的外部资源。</p><p>又要名词解释一下，某个对象指的就是任意的、普通的Java对象;IoC/DI的容器简单点说就是指用来实现IoC/DI功能的一个框架程序；对象的外部资源指的就是对象需要的，但是是从对象外部获取的，都统称资源，比如：对象需要的其它对象、或者是对象需要的文件资源等等。</p><h2 id="谁依赖于谁："><a href="#谁依赖于谁：" class="headerlink" title="谁依赖于谁："></a>谁依赖于谁：</h2><p>当然是某个对象依赖于IoC/DI的容器</p><h2 id="为什么需要依赖："><a href="#为什么需要依赖：" class="headerlink" title="为什么需要依赖："></a>为什么需要依赖：</h2><p>对象需要IoC/DI的容器来提供对象需要的外部资源</p><h2 id="谁注入于谁："><a href="#谁注入于谁：" class="headerlink" title="谁注入于谁："></a>谁注入于谁：</h2><p>很明显是IoC/DI的容器 注入 某个对象</p><h2 id="到底注入什么："><a href="#到底注入什么：" class="headerlink" title="到底注入什么："></a>到底注入什么：</h2><p>就是注入某个对象所需要的外部资源</p><h2 id="谁控制谁："><a href="#谁控制谁：" class="headerlink" title="谁控制谁："></a>谁控制谁：</h2><p>当然是IoC/DI的容器来控制对象了</p><h2 id="控制什么："><a href="#控制什么：" class="headerlink" title="控制什么："></a>控制什么：</h2><p>主要是控制对象实例的创建</p><h2 id="为何叫反转："><a href="#为何叫反转：" class="headerlink" title="为何叫反转："></a>为何叫反转：</h2><p>反转是相对于正向而言的，那么什么算是正向的呢？考虑一下常规情况下的应用程序，如果要在A里面使用C，你会怎么做呢？当然是直接去创建C的对象，也就是说，是在A类中主动去获取所需要的外部资源C，这种情况被称为正向的。那么什么是反向呢？就是A类不再主动去获取C，而是被动等待，等待IoC/DI的容器获取一个C的实例，然后反向的注入到A类中。</p><h2 id="依赖注入和控制反转是同一概念吗？"><a href="#依赖注入和控制反转是同一概念吗？" class="headerlink" title="依赖注入和控制反转是同一概念吗？"></a>依赖注入和控制反转是同一概念吗？</h2><p>根据上面的讲述，应该能看出来，依赖注入和控制反转是对同一件事情的不同描述，从某个方面讲，就是它们描述的角度不同。</p><p>依赖注入是从应用程序的角度在描述，可以把依赖注入描述完整点：</p><p>应用程序依赖容器创建并注入它所需要的外部资源；</p><p>而控制反转是从容器的角度在描述，描述完整点：</p><p>容器控制应用程序，由容器反向的向应用程序注入应用程序所需要的外部资源。</p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>其实IoC/DI对编程带来的最大改变不是从代码上，而是从思想上，发生了“主从换位”的变化。应用程序原本是老大，要获取什么资源都是主动出击，但是在IoC/DI思想中，应用程序就变成被动的了，被动的等待IoC/DI容器来创建并注入它所需要的资源了。</p><p>这么小小的一个改变其实是编程思想的一个大进步，这样就有效的分离了对象和它所需要的外部资源，使得它们松散耦合，有利于功能复用，更重要的是使得程序的整个体系结构变得非常灵活</p><h2 id="接下演示一下依赖注入机制的过程"><a href="#接下演示一下依赖注入机制的过程" class="headerlink" title="接下演示一下依赖注入机制的过程"></a>接下演示一下依赖注入机制的过程</h2><details>    <summary>待注入的业务对象Content.java</summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">package com.zj.ioc.di.ctor;</span><br><span class="line">import com.zj.ioc.di.Content;</span><br><span class="line"> </span><br><span class="line">public class MyBusiness &#123;</span><br><span class="line">    private Content myContent;</span><br><span class="line"> </span><br><span class="line">    public MyBusiness(Content content) &#123;</span><br><span class="line">       myContent = content;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    public void doBusiness()&#123;</span><br><span class="line">       myContent.BusniessContent();</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    public void doAnotherBusiness()&#123;</span><br><span class="line">       myContent.AnotherBusniessContent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p>MyBusniess类展示了一个业务组件，它的实现需要对象Content的注入。分别演示构造子注入（Constructor Injection），设值注入（Setter Injection）和接口注入（Interface Injection）三种方式。</p><details>    <summary>构造子注入（Constructor Injection）MyBusiness.java</summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">package com.zj.ioc.di.ctor;</span><br><span class="line">import com.zj.ioc.di.Content;</span><br><span class="line"> </span><br><span class="line">public class MyBusiness &#123;</span><br><span class="line">    private Content myContent;</span><br><span class="line"> </span><br><span class="line">    public MyBusiness(Content content) &#123;</span><br><span class="line">       myContent = content;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    public void doBusiness()&#123;</span><br><span class="line">       myContent.BusniessContent();</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    public void doAnotherBusiness()&#123;</span><br><span class="line">       myContent.AnotherBusniessContent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>设值注入（Setter Injection） MyBusiness.java</summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">package com.zj.ioc.di.iface;</span><br><span class="line">import com.zj.ioc.di.Content;</span><br><span class="line"> </span><br><span class="line">public interface InContent &#123;</span><br><span class="line">    void createContent(Content content);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>设置注入接口InContent.java</summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">package com.zj.ioc.di.iface;</span><br><span class="line">import com.zj.ioc.di.Content;</span><br><span class="line"> </span><br><span class="line">public interface InContent &#123;</span><br><span class="line">    void createContent(Content content);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>接口注入（Interface Injection）MyBusiness.java</summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    </span><br><span class="line">package com.zj.ioc.di.iface;</span><br><span class="line">import com.zj.ioc.di.Content;</span><br><span class="line"> </span><br><span class="line">public class MyBusiness implements InContent&#123;</span><br><span class="line">    private Content myContent;</span><br><span class="line"> </span><br><span class="line">    public void createContent(Content content) &#123;</span><br><span class="line">       myContent = content;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    public void doBusniess()&#123;</span><br><span class="line">       myContent.BusniessContent();</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    public void doAnotherBusniess()&#123;</span><br><span class="line">       myContent.AnotherBusniessContent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring提供的容器又称为IoC容器，什么是IoC？&lt;/p&gt;
&lt;p&gt;IoC全称Inversion of Control，直译为控制反转。IoC又称为依赖注入（DI：Dependency Injection）&lt;/p&gt;
    
    </summary>
    
      <category term="2021年12月" scheme="http://yoursite.com/categories/2021%E5%B9%B412%E6%9C%88/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>JAVA 学习笔记（Bean）</title>
    <link href="http://yoursite.com/2021/12/30/JAVA%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88Bean%EF%BC%89/"/>
    <id>http://yoursite.com/2021/12/30/JAVA 学习笔记（Bean）/</id>
    <published>2021-12-30T07:12:12.000Z</published>
    <updated>2021-12-30T09:26:14.302Z</updated>
    
    <content type="html"><![CDATA[<p>Bean的概念</p><a id="more"></a><p>[TOC]</p><h1 id="什么是Bean-1-3"><a href="#什么是Bean-1-3" class="headerlink" title="什么是Bean^1^3"></a>什么是Bean<a href="https://www.runoob.com/jsp/jsp-javabean." target="_blank" rel="noopener">^1</a><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1260474416351680" target="_blank" rel="noopener">^3</a></h1><p>你<br>一种规范，表达实体和信息的规范，便于封装重用。</p><p>Bean的中文含义是“豆子”，顾名思义JavaBean是一段Java小程序。JavaBean实际上是指一种特殊的Java类，它通常用来实现一些比较常用的简单功能，并可以很容易的被重用或者是插入其他应用程序中去。所有遵循一定编程原则的Java类都可以被称作JavaBean。</p><h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><p>1、若干private实例字段；</p><p>2、提供一个默认的无参构造函数；</p><p>3、可能有一系列的 getter 或 setter 方法；</p><p>4、需要被序列化并且实现serializable接口；</p><h1 id="JavaBean的作用"><a href="#JavaBean的作用" class="headerlink" title="JavaBean的作用"></a>JavaBean的作用</h1><p>JavaBean主要用来传递数据，即把一组数据组合成一个JavaBean便于传输。此外，JavaBean可以方便地被IDE工具分析，生成读写属性的代码，主要用在图形界面的可视化设计中。</p><p>保持向后兼容性</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Bean的概念&lt;/p&gt;
    
    </summary>
    
      <category term="2021年12月" scheme="http://yoursite.com/categories/2021%E5%B9%B412%E6%9C%88/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>JAVA 学习笔记（Spring 原理）</title>
    <link href="http://yoursite.com/2021/12/30/JAVA%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88Spring%20%E5%8E%9F%E7%90%86%EF%BC%89/"/>
    <id>http://yoursite.com/2021/12/30/JAVA 学习笔记（Spring 原理）/</id>
    <published>2021-12-30T02:12:12.000Z</published>
    <updated>2021-12-31T10:01:06.783Z</updated>
    
    <content type="html"><![CDATA[<p>Spring是一个全面的、企业应用开发一站式的解决方案，贯穿表现层、业务层、持久层。但是Spring仍然可以和其他的框架无缝整合。</p><a id="more"></a><p>[TOC]</p><h1 id="Spring-特点"><a href="#Spring-特点" class="headerlink" title="Spring 特点"></a>Spring 特点</h1><h2 id="轻量级"><a href="#轻量级" class="headerlink" title="轻量级"></a>轻量级</h2><p>从大小与开销两方面而言Spring都是轻量级的，完整的Spring框架可以在一个大小只有1M多的JAR文件里发布，并且所需的处理开销也是微不足道的。所以可以在小型设备中使用。</p><p>此外，Spring是非侵入式的：典型的，Spring应用中的对象不依赖于Spring的特定类。</p><h2 id="控制反转"><a href="#控制反转" class="headerlink" title="控制反转"></a>控制反转</h2><p>控制反转（IOC）：通过控制反转实现解耦，大大降低代码量，促进了低耦合</p><p>当应用了IOC，一个对象依赖的其他对象会通过被动的方式传递进来，而不是这个对象自己创建或者查找依赖对象。</p><h2 id="面向切面编程（AOP）"><a href="#面向切面编程（AOP）" class="headerlink" title="面向切面编程（AOP）"></a>面向切面编程（AOP）</h2><p>Spring支持面向切面的编程，并且把应用业务逻辑和系统服务分开。</p><p>在事务处理、日志管理、权限控制、异常处理这些板块有很明显的优势</p><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><p>Spring提供了容器功能，容器可以管理对象的生命周期、对象与对象间的关系、我们可以通过编写XML来设置对象关系和初始值，这样容器在启动之后，所有的对象都直接可以使用，不用编写任何编码来产生对象。Spring有两种不同的容器：Bean工厂以及应用上下文</p><p>Spring包含并管理应用对象的配置和生命周期，在这个意义上它是一种容齐，你可以配置你的每个bean如何被创建。。。基于一个可配置原型，你的bean可以创建一个单独的实例或者每次需要时都生成一个新的实例以及它们是如何关联的。</p><h2 id="框架集合"><a href="#框架集合" class="headerlink" title="框架集合"></a>框架集合</h2><p>Spring可以将简单的组件配置，组合成为复杂的应用。</p><p>在Spring中，应用对象被声明式的组合，典型的是在一个XML文件里。</p><p>Spring也提供了很多基础功能（事务管理，持久化框架集成等），将应用逻辑的开发留给开发者。</p><p>可以集成mybatis， hibernate等框架</p><h1 id="Spring-核心组件"><a href="#Spring-核心组件" class="headerlink" title="Spring 核心组件"></a>Spring 核心组件</h1><h1 id="Spring-常用模块"><a href="#Spring-常用模块" class="headerlink" title="Spring 常用模块"></a>Spring 常用模块</h1><h2 id="核心容器"><a href="#核心容器" class="headerlink" title="核心容器"></a>核心容器</h2><p>核心容器提供Spring框架的基本功能，核心容器的主要组件是BeanFactory，它是工厂模式的实现，BeanFactory使用控制反转（IOC）模式将应用程序的配置和依赖性规范与实际的应用程序代码分开。</p><h2 id="Spring上下文"><a href="#Spring上下文" class="headerlink" title="Spring上下文"></a>Spring上下文</h2><p>Spring上下文是一个配置文件，向Spring框架提供上下文信息，Spring上下文包括企业服务，例如JNDI，EJB，电子邮件，国际化，校验和调度功能。</p><h2 id="Spring-AOP"><a href="#Spring-AOP" class="headerlink" title="Spring AOP"></a>Spring AOP</h2><p>通过配置管理特性，Spring AOP模块直接将面向切面的编程功能集成到了Spring框架中，可以将一些通用任务，如安全，事务，日志等集中进行管理，提高了复用性和管理的便捷性。</p><h2 id="Spring-DAO"><a href="#Spring-DAO" class="headerlink" title="Spring DAO"></a>Spring DAO</h2><p>为JDBC DAO抽象层提供了有意义的异常层次结构，可用该结构来管理异常处理和不同数据库供应商跑出的错误消息，异常层次结构简化了错误处理，并且极大地降低了需要便携的异常代码数量（例如打开和关闭连接）。Spring DAO的面向JDBC的异常遵从通用的DAO异常层次结构。</p><h2 id="Spring-ORM"><a href="#Spring-ORM" class="headerlink" title="Spring ORM"></a>Spring ORM</h2><p>Spring框架插入了若干个ORM框架，从而提供了ORM的对象关系工具。其中包括JDO，Hiberinate和iBatis SQL Map。所有这些都遵从Spring的通用事务和DAO异常层次结构。</p><h2 id="Spring-Web模块"><a href="#Spring-Web模块" class="headerlink" title="Spring Web模块"></a>Spring Web模块</h2><p>WEb上下文模块建立在应用恒旭上下文模块之上，为基于Web的应用程序提供了上下文。所以，Spring框架支持与Jakarta Struts的集成。Web模块还简化了处理多部分请求以及将请求参数绑定到域对象的工作。</p><h2 id="Spring-MVC框架"><a href="#Spring-MVC框架" class="headerlink" title="Spring MVC框架"></a>Spring MVC框架</h2><p>MVC框架是一个全功能的构建Web应用程序的MVC实现。通过策略接口，MVC框架变成为高度可配置的。MVC容纳了大量视图技术。MVC容纳了大量视图技术，其中包括JSP，Velocity，Tiles，iText和POI。</p><h1 id="Spring-主要包"><a href="#Spring-主要包" class="headerlink" title="Spring 主要包"></a>Spring 主要包</h1><h2 id="Core-Container-核心容器"><a href="#Core-Container-核心容器" class="headerlink" title="Core Container 核心容器"></a>Core Container 核心容器</h2><p>容器是Spring的核心部分，Core Container 模块是Spring框架的基础，所有模块都构建于核心模块之上。</p><p>Beans ： Beans模块是所有应用都要用到的，它包含访问配置文件、创建和管理bean以及进行Inversion of Control / Depen-dency Injection（IoC/DI）操作相关的所有类。</p><p>Core  ： Core模块主要包含Spring框架基本的核心工具类，Spring的其他组件要都要使用到这个包里的类，Core模块是其他组件的基本核心。当然你也可以在自己的应用系统中使用这些工具类。</p><p>Context  :  Spring的上下文即IoC容器，通过上下文可以获得容器中的Bean。ApplicationContext接口是Context模块的关键。  Context模块构建于Core和Beans模块基础之上，提供了一种类似于JNDI注册器的框架式的对象访问方法。</p><p>SpEl  :  Expression Language模块提供了一个强大的表达式语言用于在运行时查询和操纵对象。</p><h1 id="Spring-常用注解"><a href="#Spring-常用注解" class="headerlink" title="Spring 常用注解"></a>Spring 常用注解</h1><p>bean 注入与装配的的方式有很多种，可以通过 xml，get set 方式，构造函数或者注解等。简单易用的方式就是使用 Spring 的注解了，Spring 提供了大量的注解方式。</p><h2 id="声明bean的注解"><a href="#声明bean的注解" class="headerlink" title="声明bean的注解"></a>声明bean的注解</h2><p>@Component 泛指组件，没有明确的角色，当组件不好归类的时候，我们可以使用这个注解进行标注。</p><p>@Service 在业务逻辑层使用（service层）</p><p>@Repository 在数据访问层使用（dao层）</p><p>@Controller 在展现层使用，控制器的声明（C），用于标注控制层组件。</p><h2 id="注入bean的注解"><a href="#注入bean的注解" class="headerlink" title="注入bean的注解"></a>注入bean的注解</h2><p>@Autowired：由Spring提供</p><p>@Inject：由JSR-330提供</p><p>@Resource：由JSR-250提供</p><p>都可以注解在set方法和属性上，推荐注解在属性上（一目了然，少写代码）。</p><h2 id="java配置类相关注解"><a href="#java配置类相关注解" class="headerlink" title="java配置类相关注解"></a>java配置类相关注解</h2><p>@Configuration 声明当前类为配置类，相当于xml形式的Spring配置（类上）</p><p>@Bean 注解在方法上，声明当前方法的返回值为一个bean，替代xml中的方式（方法上）</p><p>@Configuration 声明当前类为配置类，其中内部组合了@Component注解，表明这个类是一个bean（类上）</p><p>@ComponentScan 用于对Component进行扫描，相当于xml中的（类上）</p><p>@WishlyConfiguration 为@Configuration与@ComponentScan的组合注解，可以替代这两个注解</p><h2 id="切面（AOP）相关注解"><a href="#切面（AOP）相关注解" class="headerlink" title="切面（AOP）相关注解"></a>切面（AOP）相关注解</h2><p>Spring支持AspectJ的注解式切面编程。</p><p>@Aspect 声明一个切面（类上）<br>使用@After、@Before、@Around定义建言（advice），可直接将拦截规则（切点）作为参数。</p><p>@After 在方法执行之后执行（方法上） </p><p>@Before 在方法执行之前执行（方法上） </p><p>@Around 在方法执行之前与之后执行（方法上）</p><p>@PointCut 声明切点<br>在java配置类中使用@EnableAspectJAutoProxy注解开启Spring对AspectJ代理的支持（类上）</p><h2 id="Bean的属性支持"><a href="#Bean的属性支持" class="headerlink" title="@Bean的属性支持"></a>@Bean的属性支持</h2><p>@Scope 设置Spring容器如何新建Bean实例（方法上，得有@Bean）<br>其设置类型包括：</p><p>Singleton （单例,一个Spring容器中只有一个bean实例，默认模式）, </p><p>Protetype （每次调用新建一个bean）, </p><p>Request （web项目中，给每个http request新建一个bean）, </p><p>Session （web项目中，给每个http session新建一个bean）, </p><p>GlobalSession（给每一个 global http session新建一个Bean实例）</p><p>@StepScope 在Spring Batch中还有涉及</p><p>@PostConstruct 由JSR-250提供，在构造函数执行完之后执行，等价于xml配置文件中bean的initMethod</p><p>@PreDestory 由JSR-250提供，在Bean销毁之前执行，等价于xml配置文件中bean的destroyMethod</p><h2 id="Value注解"><a href="#Value注解" class="headerlink" title="@Value注解"></a>@Value注解</h2><p>@Value 为属性注入值（属性上）<br>支持如下方式的注入：</p><p>》注入普通字符</p><pre><code>@Value(&quot;Michael Jackson&quot;)String name;</code></pre><p>》注入操作系统属性</p><pre><code>@Value(&quot;#{systemProperties[&apos;os.name&apos;]}&quot;)String osName;</code></pre><p>》注入表达式结果</p><pre><code>@Value(&quot;#{ T(java.lang.Math).random() * 100 }&quot;) String randomNumber;</code></pre><p>》注入其它bean属性</p><pre><code>@Value(&quot;#{domeClass.name}&quot;)String name;</code></pre><p>》注入文件资源</p><pre><code>@Value(&quot;classpath:com/hgs/hello/test.txt&quot;)String Resource file;</code></pre><p>》注入网站资源</p><pre><code>@Value(&quot;http://www.cznovel.com&quot;)Resource url;</code></pre><p>》注入配置文件</p><pre><code>@Value(&quot;${book.name}&quot;)String bookName;</code></pre><p>注入配置使用方法： </p><p>① 编写配置文件（test.properties）</p><pre><code>book.name=《三体》</code></pre><p>② @PropertySource 加载配置文件(类上)</p><pre><code>@PropertySource(&quot;classpath:com/hgs/hello/test/test.propertie&quot;)</code></pre><p>③ 还需配置一个PropertySourcesPlaceholderConfigurer的bean。</p><h2 id="环境切换"><a href="#环境切换" class="headerlink" title="环境切换"></a>环境切换</h2><p>@Profile 通过设定Environment的ActiveProfiles来设定当前context需要使用的配置环境。（类或方法上）</p><p>@Conditional Spring4中可以使用此注解定义条件话的bean，通过实现Condition接口，并重写matches方法，从而决定该bean是否被实例化。（方法上）</p><h2 id="异步相关"><a href="#异步相关" class="headerlink" title="异步相关"></a>异步相关</h2><p>@EnableAsync 配置类中，通过此注解开启对异步任务的支持，叙事性AsyncConfigurer接口（类上）</p><p>@Async 在实际执行的bean方法使用该注解来申明其是一个异步任务（方法上或类上所有的方法都将异步，需要@EnableAsync开启异步任务）</p><h2 id="定时任务相关"><a href="#定时任务相关" class="headerlink" title="定时任务相关"></a>定时任务相关</h2><p>@EnableScheduling 在配置类上使用，开启计划任务的支持（类上）</p><p>@Scheduled 来申明这是一个任务，包括cron,fixDelay,fixRate等类型（方法上，需先开启计划任务的支持）</p><h2 id="Enable-注解说明"><a href="#Enable-注解说明" class="headerlink" title="@Enable*注解说明"></a>@Enable*注解说明</h2><p>这些注解主要用来开启对xxx的支持。<br>@EnableAspectJAutoProxy 开启对AspectJ自动代理的支持</p><p>@EnableAsync 开启异步方法的支持</p><p>@EnableScheduling 开启计划任务的支持</p><p>@EnableWebMvc 开启Web MVC的配置支持</p><p>@EnableConfigurationProperties 开启对@ConfigurationProperties注解配置Bean的支持</p><p>@EnableJpaRepositories 开启对SpringData JPA Repository的支持</p><p>@EnableTransactionManagement 开启注解式事务的支持</p><p>@EnableTransactionManagement 开启注解式事务的支持</p><p>@EnableCaching 开启注解式的缓存支持</p><h2 id="测试相关注解"><a href="#测试相关注解" class="headerlink" title="测试相关注解"></a>测试相关注解</h2><p>@RunWith 运行器，Spring中通常用于对JUnit的支持</p><p>@ContextConfiguration 用来加载配置ApplicationContext，其中classes属性用来加载配置类</p><pre><code>@RunWith(SpringJUnit4ClassRunner.class)@ContextConfiguration(classes={TestConfig.class})public class KjtTest {    private static Logger logger = LoggerFactory.getLogger(&quot;KjtTest&quot;);    @Autowired    Service service;    @Test    public void test() {    }}</code></pre><h2 id="SpringMVC部分"><a href="#SpringMVC部分" class="headerlink" title="SpringMVC部分"></a>SpringMVC部分</h2><p>@EnableWebMvc 在配置类中开启WebMVC的配置支持，如一些ViewResolver或者MessageConverter等，若无此句，重写WebMvcConfigurerAdapter方法（用于对SpringMVC的配置）。</p><p>@Controller 声明该类为SpringMVC中的Controller</p><p>@RequestMapping 用于映射Web请求，包括访问路径和参数（类或方法上）</p><p>@ResponseBody 支持将返回值放在response内，而不是一个页面，通常用户返回json数据（返回值旁或方法上）</p><p>@RequestBody 允许request的参数在request体中，而不是在直接连接在地址后面。（放在参数前）</p><p>@PathVariable 用于接收路径参数，比如@RequestMapping(“/hello/{name}”)申明的路径，将注解放在参数中前，即可获取该值，通常作为Restful的接口实现方法。</p><p>@RestController 该注解为一个组合注解，相当于@Controller和@ResponseBody的组合，注解在类上，意味着，该Controller的所有方法都默认加上了@ResponseBody。</p><p>@ControllerAdvice 通过该注解，我们可以将对于控制器的全局配置放置在同一个位置，注解了@Controller的类的方法可使用@ExceptionHandler、@InitBinder、@ModelAttribute注解到方法上， </p><p>这对所有注解了 @RequestMapping的控制器内的方法有效。</p><p>@ExceptionHandler 用于全局处理控制器里的异常</p><p>@InitBinder 用来设置WebDataBinder，WebDataBinder用来自动绑定前台请求参数到Model中。</p><p>@ModelAttribute 本来的作用是绑定键值对到Model里，在@ControllerAdvice中是让全局的@RequestMapping都能获得在此处设置的键值对。</p><h1 id="Spring-第三方框架结合"><a href="#Spring-第三方框架结合" class="headerlink" title="Spring 第三方框架结合"></a>Spring 第三方框架结合</h1><h2 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h2><h3 id="shiro"><a href="#shiro" class="headerlink" title="shiro"></a>shiro</h3><p>java的一个安全框架</p><p>认证、授权、加密、会话管理、与Web集成、缓存</p><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><h3 id="Ehcache"><a href="#Ehcache" class="headerlink" title="Ehcache"></a>Ehcache</h3><p>是一个纯Java的进程内缓存框架，具有快速、精干等特点，是Hibernate中默认的CacheProvider</p><h3 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h3><p>一个开源的使用ANSIC语言便携、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库</p><h2 id="持久层框架"><a href="#持久层框架" class="headerlink" title="持久层框架"></a>持久层框架</h2><h3 id="Hibernate"><a href="#Hibernate" class="headerlink" title="Hibernate"></a>Hibernate</h3><p>一个开放源代码的对象关系映射框架，它对JDBC进行了非常轻量级的对象封装，它将POJO与数据库表建立映射关系，是一个全自动的orm框架</p><h3 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h3><p>是支持普通SQL查询，存储过程和高级映射的优秀持久层框架</p><h2 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h2><h3 id="quartz"><a href="#quartz" class="headerlink" title="quartz"></a>quartz</h3><p>一个开源的作业调度框架，由java编写，在.NET平台为Quartz.Net ，通过Quart可以快速完成任务调度的工作</p><h3 id="Spring-Task"><a href="#Spring-Task" class="headerlink" title="Spring-Task"></a>Spring-Task</h3><p>可以将它比作一个轻量级的Quartz，而且使用起来很简单，除spring相关的包外不需要额外的包，而且支持注解和配置文件两种形式</p><h2 id="校验框架"><a href="#校验框架" class="headerlink" title="校验框架"></a>校验框架</h2><h3 id="Hibernate-validator"><a href="#Hibernate-validator" class="headerlink" title="Hibernate validator"></a>Hibernate validator</h3><p>常用来验证bean的字段，基于注解，方便快捷高效</p><h3 id="Oval"><a href="#Oval" class="headerlink" title="Oval"></a>Oval</h3><p>一个可扩展的Java对象数据验证框架，验证的规则可以通过配置文件、Annotation、POJOs进行设定，可以使用纯Java语言、JavaScript，Groovy、BeanShell等进行规则的编写。</p><h1 id="Spring-IOC-原理-Inversion-of-Control，控制反转"><a href="#Spring-IOC-原理-Inversion-of-Control，控制反转" class="headerlink" title="Spring IOC 原理 (Inversion of Control，控制反转)"></a>Spring IOC 原理 (Inversion of Control，控制反转)</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>Spring 通过一个配置文件描述 Bean 及 Bean 之间的依赖关系，利用 Java 语言的反射功能实例化Bean 并建立 Bean 之间的依赖关系。 Spring 的 IoC 容器在完成这些底层工作的基础上，还提供了 Bean 实例缓存、生命周期管理、 Bean 实例代理、事件发布、资源装载等高级服务。</p><h2 id="Spring-容器高层视图"><a href="#Spring-容器高层视图" class="headerlink" title="Spring 容器高层视图"></a>Spring 容器高层视图</h2><p>Spring 启动时读取应用程序提供的Bean配置信息，并在Spring容器中生成一份相应的Bean配置注册表，然后根据这张注册表实例化 Bean，装配好 Bean 之间的依赖关系，为上层应用提供准备就绪的运行环境。其中 Bean 缓存池为 HashMap 实现</p><h2 id="IOC-容器实现"><a href="#IOC-容器实现" class="headerlink" title="IOC 容器实现"></a>IOC 容器实现</h2><h3 id="BeanFactory-框架基础设施"><a href="#BeanFactory-框架基础设施" class="headerlink" title="BeanFactory-框架基础设施"></a>BeanFactory-框架基础设施</h3><p>BeanFactory 是 Spring 框架的基础设施，面向Spring本身；ApplicationContext面向使用Spring框架的开发者，几乎所有的应用场合我们都直接使用 ApplicationContext 而非底层的 BeanFactory</p><h4 id="BeanDefinitionRegistry-注册表"><a href="#BeanDefinitionRegistry-注册表" class="headerlink" title="BeanDefinitionRegistry 注册表"></a>BeanDefinitionRegistry 注册表</h4><ol><li>Spring 配置文件中每一个节点元素在 Spring 容器里都通过一个 BeanDefinition 对象表示，它描述了 Bean 的配置信息。而 BeanDefinitionRegistry 接口提供了向容器手工注册BeanDefinition 对象的方法。</li></ol><h4 id="BeanFactory-顶层接口"><a href="#BeanFactory-顶层接口" class="headerlink" title="BeanFactory 顶层接口"></a>BeanFactory 顶层接口</h4><ol start="2"><li>位于类结构树的顶端 ，它最主要的方法就是 getBean(String beanName)，该方法从容器中返回特定名称的Bean，BeanFactory的功能通过其他的接口得到不断扩展：</li></ol><h4 id="ListableBeanFactory"><a href="#ListableBeanFactory" class="headerlink" title="ListableBeanFactory"></a>ListableBeanFactory</h4><ol start="3"><li>该接口定义了访问容器中 Bean基本信息的若干方法，如查看Bean的个数、获取某一类型Bean的配置名、查看容器中是否包括某一 Bean 等方法；</li></ol><h4 id="HierarchicalBeanFactory-父子级联"><a href="#HierarchicalBeanFactory-父子级联" class="headerlink" title="HierarchicalBeanFactory 父子级联"></a>HierarchicalBeanFactory 父子级联</h4><ol start="4"><li>父子级联 IoC 容器的接口，子容器可以通过接口方法访问父容器； 通过HierarchicalBeanFactory 接口， Spring 的 IoC 容器可以建立父子层级关联的容器体系，子容器可以访问父容器中的 Bean，但父容器不能访问子容器的 Bean。Spring 使用父子容器实现了很多功能，比如在 Spring MVC 中，展现层 Bean 位于一个子容器中，而业务层和持久层的Bean位于父容器中。这样，展现层Bean就可以引用业务层和持久层的Bean，而业务层和持久层的 Bean 则看不到展现层的 Bean。</li></ol><h4 id="ConfigurableBeanFactory"><a href="#ConfigurableBeanFactory" class="headerlink" title="ConfigurableBeanFactory"></a>ConfigurableBeanFactory</h4><ol start="5"><li>是一个重要的接口，增强了 IoC 容器的可定制性，它定义了设置类装载器、属性编辑器、容器初始化后置处理器等方法；</li></ol><h4 id="AutowireCapableBeanFactory-自动装配"><a href="#AutowireCapableBeanFactory-自动装配" class="headerlink" title="AutowireCapableBeanFactory 自动装配"></a>AutowireCapableBeanFactory 自动装配</h4><ol start="6"><li>定义了将容器中的 Bean 按某种规则（如按名字匹配、按类型匹配等）进行自动装配的方法；</li></ol><h4 id="SingletonBeanRegistry-运行期间注册单例-Bean"><a href="#SingletonBeanRegistry-运行期间注册单例-Bean" class="headerlink" title="SingletonBeanRegistry 运行期间注册单例 Bean"></a>SingletonBeanRegistry 运行期间注册单例 Bean</h4><ol start="7"><li>定义了允许在运行期间向容器注册单实例 Bean 的方法；对于单实例（ singleton）的 Bean来说，BeanFactory 会缓存 Bean 实例，所以第二次使用 getBean() 获取 Bean 时将直接从IoC 容器的缓存中获取 Bean 实例。Spring 在 DefaultSingletonBeanRegistry 类中提供了一个用于缓存单实例 Bean 的缓存器，它是一个用 HashMap 实现的缓存器，单实例的 Bean 以beanName 为键保存在这个 HashMap 中。</li></ol><h4 id="依赖日志框框"><a href="#依赖日志框框" class="headerlink" title="依赖日志框框"></a>依赖日志框框</h4><ol start="8"><li>在初始化 BeanFactory 时，必须为其提供一种日志框架，比如使用 Log4J， 即在类路径下提供 Log4J 配置文件，这样启动 Spring 容器才不会报错。</li></ol><h3 id="ApplicationContext-面向开发应用"><a href="#ApplicationContext-面向开发应用" class="headerlink" title="ApplicationContext 面向开发应用"></a>ApplicationContext 面向开发应用</h3><p>ApplicationContext 由 BeanFactory 派 生 而 来 ， 提 供 了 更 多 面 向 实 际 应 用 的 功 能 。ApplicationContext 继承了 HierarchicalBeanFactory 和 ListableBeanFactory 接口，在此基础上，还通过多个其他的接口扩展了 BeanFactory 的功能：</p><ol><li>ClassPathXmlApplicationContext：默认从类路径加载配置文件</li><li>FileSystemXmlApplicationContext：默认从文件系统中装载配置文件</li><li>ApplicationEventPublisher：让容器拥有发布应用上下文事件的功能，包括容器启动事件、关闭事件等。</li><li>MessageSource：为应用提供 i18n 国际化消息访问的功能；</li><li>ResourcePatternResolver ： 所 有 ApplicationContext 实现类都实现了类似于PathMatchingResourcePatternResolver 的功能，可以通过带前缀的 Ant 风格的资源文件路径装载 Spring 的配置文件。</li><li>LifeCycle：该接口是 Spring 2.0 加入的，该接口提供了 start()和 stop()两个方法，主要用于控制异步处理过程。在具体使用时，该接口同时被 ApplicationContext 实现及具体Bean 实现， ApplicationContext 会将 start/stop 的信息传递给容器中所有实现了该接口的 Bean，以达到管理和控制 JMX、任务调度等目的。</li><li>ConfigurableApplicationContext 扩展于 ApplicationContext，它新增加了两个主要的方法： refresh()和 close()，让 ApplicationContext 具有启动、刷新和关闭应用上下文的能力。在应用上下文关闭的情况下调用refresh()即可启动应用上下文，在已经启动的状态下，调用refresh()则清除缓存并重新装载配置信息，而调用 close()则可关闭应用上下文。</li></ol><h3 id="WebApplication-体系架构"><a href="#WebApplication-体系架构" class="headerlink" title="WebApplication 体系架构"></a>WebApplication 体系架构</h3><p>WebApplicationContext 是专门为 Web 应用准备的，它允许从相对于 Web 根目录的路径中装载配置文件完成初始化工作。从 WebApplicationContext 中可以获得ServletContext 的引用，整个 Web 应用上下文对象将作为属性放置到 ServletContext中，以便 Web 应用环境可以访问 Spring 应用上下文。</p><h2 id="Spring-Bean-作用域"><a href="#Spring-Bean-作用域" class="headerlink" title="Spring Bean 作用域"></a>Spring Bean 作用域</h2><p>Spring 3 中为 Bean 定义了 5 中作用域，分别为 singleton（单例）、prototype（原型）、request、session 和 global session，5 种作用域说明如下：</p><h3 id="singleton：单例模式（多线程下不安全）"><a href="#singleton：单例模式（多线程下不安全）" class="headerlink" title="singleton：单例模式（多线程下不安全）"></a>singleton：单例模式（多线程下不安全）</h3><ol><li>singleton：单例模式，Spring IoC 容器中只会存在一个共享的Bean实例，无论有多少个Bean引用它，始终指向同一对象。该模式在多线程下是不安全的。Singleton 作用域是Spring 中的缺省作用域，也可以显示的将 Bean 定义为 singleton 模式，配置为：</li></ol><bean id="userDao" class="com.ioc.UserDaoImpl" scope="singleton"><h3 id="prototype-原型模式每次使用时创建"><a href="#prototype-原型模式每次使用时创建" class="headerlink" title="prototype:原型模式每次使用时创建"></a>prototype:原型模式每次使用时创建</h3><ol start="2"><li>prototype:原型模式，每次通过 Spring 容器获取 prototype 定义的 bean 时，容器都将创建一个新的 Bean 实例，每个 Bean 实例都有自己的属性和状态，而 singleton 全局只有一个对象。根据经验，对有状态的bean使用prototype作用域，而对无状态的bean使用singleton<br>作用域。</li></ol><h3 id="Request：一次-request-一个实例"><a href="#Request：一次-request-一个实例" class="headerlink" title="Request：一次 request 一个实例"></a>Request：一次 request 一个实例</h3><ol start="3"><li>request：在一次 Http 请求中，容器会返回该 Bean 的同一实例。而对不同的 Http 请求则会产生新的 Bean，而且该 bean 仅在当前 Http Request 内有效,当前 Http 请求结束，该 bean实例也将会被销毁。</li></ol><bean id="loginAction" class="com.cnblogs.Login" scope="request"><h3 id="session（会话）"><a href="#session（会话）" class="headerlink" title="session（会话）"></a>session（会话）</h3><ol start="4"><li>session：在一次 Http Session 中，容器会返回该 Bean 的同一实例。而对不同的 Session 请求则会创建新的实例，该 bean 实例仅在当前 Session 内有效。同 Http 请求相同，每一次session请求创建新的实例，而不同的实例之间不共享属性，且实例仅在自己的session请求内有效，请求结束，则实例将被销毁。</li></ol><bean id="userPreference" class="com.ioc.UserPreference" scope="session"><h3 id="global-Session"><a href="#global-Session" class="headerlink" title="global Session"></a>global Session</h3><ol start="5"><li>global Session：在一个全局的 Http Session 中，容器会返回该 Bean 的同一个实例，仅在使用 portlet context 时有效</li></ol><h2 id="Spring-Bean-生命周期"><a href="#Spring-Bean-生命周期" class="headerlink" title="Spring Bean 生命周期"></a>Spring Bean 生命周期</h2><h3 id="实例化"><a href="#实例化" class="headerlink" title="实例化"></a>实例化</h3><ol><li>实例化一个 Bean，也就是我们常说的 new。</li></ol><h3 id="IOC-依赖注入"><a href="#IOC-依赖注入" class="headerlink" title="IOC 依赖注入"></a>IOC 依赖注入</h3><ol start="2"><li>按照 Spring 上下文对实例化的 Bean 进行配置，也就是 IOC 注入。</li></ol><h3 id="setBeanName-实现"><a href="#setBeanName-实现" class="headerlink" title="setBeanName 实现"></a>setBeanName 实现</h3><ol start="3"><li>如果这个 Bean 已经实现了 BeanNameAware 接口，会调用它实现的 setBeanName(String)方法，此处传递的就是 Spring 配置文件中 Bean 的 id 值</li></ol><h3 id="BeanFactoryAware-实现"><a href="#BeanFactoryAware-实现" class="headerlink" title="BeanFactoryAware 实现"></a>BeanFactoryAware 实现</h3><ol start="4"><li>如果这个 Bean 已经实现了 BeanFactoryAware接口，会调用它实现的setBeanFactory，setBeanFactory(BeanFactory)传递的是Spring工厂自身（可以用这个方式来获取其它 Bean，只需在 Spring 配置文件中配置一个普通的 Bean 就可以）。</li></ol><h3 id="ApplicationContextAware-实现"><a href="#ApplicationContextAware-实现" class="headerlink" title="ApplicationContextAware 实现"></a>ApplicationContextAware 实现</h3><ol start="5"><li>如果这个 Bean 已经实现了 ApplicationContextAware接口，会调用setApplicationContext(ApplicationContext)方法，传入Spring上下文（同样这个方式也可以实现步骤 4 的内容，但比 4 更好，因为 ApplicationContext 是 BeanFactory 的子接口，有更多的实现方法）</li></ol><h3 id="postProcessBeforeInitialization-接口实现-初始化预处理"><a href="#postProcessBeforeInitialization-接口实现-初始化预处理" class="headerlink" title="postProcessBeforeInitialization 接口实现-初始化预处理"></a>postProcessBeforeInitialization 接口实现-初始化预处理</h3><ol start="6"><li>如果这个 Bean 关联了 BeanPostProcessor 接口，将会调用 postProcessBeforeInitialization(Object obj, String s)方法，BeanPostProcessor 经常被用<br>作是 Bean 内容的更改，并且由于这个是在 Bean 初始化结束时调用那个的方法，也可以被应用于内存或缓存技术。</li></ol><h3 id="init-method"><a href="#init-method" class="headerlink" title="init-method"></a>init-method</h3><ol start="7"><li>如果 Bean 在 Spring 配置文件中配置了 init-method 属性会自动调用其配置的初始化方法。</li></ol><h3 id="postProcessAfterInitialization"><a href="#postProcessAfterInitialization" class="headerlink" title="postProcessAfterInitialization"></a>postProcessAfterInitialization</h3><ol start="8"><li>如果这个 Bean 关联了 BeanPostProcessor 接口，将会调用postProcessAfterInitialization(Object obj, String s)方法。</li></ol><p>注：以上工作完成以后就可以应用这个 Bean 了，那这个 Bean是一个Singleton的，所以一般情况下我们调用同一个id的Bean会是在内容地址相同的实例，当然在 Spring 配置文件中也可以配置非 Singleton。</p><h3 id="Destroy-过期自动清理阶段"><a href="#Destroy-过期自动清理阶段" class="headerlink" title="Destroy 过期自动清理阶段"></a>Destroy 过期自动清理阶段</h3><ol start="9"><li>当 Bean 不再需要时，会经过清理阶段，如果 Bean 实现了 DisposableBean 这个接口，会调用那个其实现的 destroy()方法；</li></ol><h3 id="destroy-method-自配置清理"><a href="#destroy-method-自配置清理" class="headerlink" title="destroy-method 自配置清理"></a>destroy-method 自配置清理</h3><ol start="10"><li>最后，如果这个 Bean 的 Spring 配置中配置了 destroy-method 属性，会自动调用其配置的销毁方法。</li></ol><ol start="11"><li>bean 标签有两个重要的属性（init-method 和 destroy-method）。用它们你可以自己定制初始化和注销方法。它们也有相应的注解（@PostConstruct 和@PreDestroy）。</li></ol><bean id class init-method="初始化方法" destroy-method="销毁方法"><h2 id="Spring-依赖注入四种方式"><a href="#Spring-依赖注入四种方式" class="headerlink" title="Spring 依赖注入四种方式"></a>Spring 依赖注入四种方式</h2><h3 id="构造器注入"><a href="#构造器注入" class="headerlink" title="构造器注入"></a>构造器注入</h3><details>    <summary>构造器注入</summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/*带参数，方便利用构造器进行注入*/</span><br><span class="line"> public CatDaoImpl(String message)&#123;</span><br><span class="line">    this. message = message;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">&lt;bean id=&quot;CatDaoImpl&quot; class=&quot;com.CatDaoImpl&quot;&gt;</span><br><span class="line">    &lt;constructor-arg value=&quot; message &quot;&gt;&lt;/constructor-arg&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></details><h3 id="setter-方法注入"><a href="#setter-方法注入" class="headerlink" title="setter 方法注入"></a>setter 方法注入</h3><details>    <summary>setter 方法注入</summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class Id &#123;</span><br><span class="line">     private int id;</span><br><span class="line">     public int getId() &#123; return id; &#125;</span><br><span class="line">     public void setId(int id) &#123; this.id = id; &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;bean id=&quot;id&quot; class=&quot;com.id &quot;&gt; &lt;property name=&quot;id&quot; value=&quot;123&quot;&gt;&lt;/property&gt; &lt;/bean&gt;</span><br></pre></td></tr></table></figure></details><h3 id="静态工厂注入"><a href="#静态工厂注入" class="headerlink" title="静态工厂注入"></a>静态工厂注入</h3><p>静态工厂顾名思义，就是通过调用静态工厂的方法来获取自己需要的对象，为了让spring管理所有对象，我们不能直接通过”工程类.静态方法()”来获取对象，而是依然通过 spring 注入的形式获取：</p><details>    <summary></summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class DaoFactory &#123; //静态工厂</span><br><span class="line">    public static final FactoryDao getStaticFactoryDaoImpl()&#123;</span><br><span class="line">        return new StaticFacotryDaoImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class SpringAction &#123;</span><br><span class="line">    private FactoryDao staticFactoryDao; //注入对象</span><br><span class="line">    //注入对象的 set 方法</span><br><span class="line">    public void setStaticFactoryDao(FactoryDao staticFactoryDao) &#123;</span><br><span class="line">        this.staticFactoryDao = staticFactoryDao;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//factory-method=&quot;getStaticFactoryDaoImpl&quot;指定调用哪个工厂方法</span><br><span class="line"> &lt;bean name=&quot;springAction&quot; class=&quot; SpringAction&quot; &gt;</span><br><span class="line"> &lt;!--使用静态工厂的方法注入对象,对应下面的配置文件--&gt;</span><br><span class="line"> &lt;property name=&quot;staticFactoryDao&quot; ref=&quot;staticFactoryDao&quot;&gt;&lt;/property&gt;</span><br><span class="line"> &lt;/bean&gt;</span><br><span class="line"> &lt;!--此处获取对象的方式是从工厂类中获取静态方法--&gt;</span><br><span class="line">&lt;bean name=&quot;staticFactoryDao&quot; class=&quot;DaoFactory&quot; factory-method=&quot;getStaticFactoryDaoImpl&quot;&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure></details><h3 id="实例工厂"><a href="#实例工厂" class="headerlink" title="实例工厂"></a>实例工厂</h3><p>实例工厂的意思是获取对象实例的方法不是静态的，所以你需要首先 new 工厂类，再调用普通的实例方法：</p><details>    <summary>实例工厂</summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class DaoFactory &#123; //实例工厂</span><br><span class="line">        public FactoryDao getFactoryDaoImpl()&#123;</span><br><span class="line">            return new FactoryDaoImpl();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public class SpringAction &#123;</span><br><span class="line">        private FactoryDao factoryDao; //注入对象</span><br><span class="line">        public void setFactoryDao(FactoryDao factoryDao) &#123;</span><br><span class="line">            this.factoryDao = factoryDao;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     &lt;bean name=&quot;springAction&quot; class=&quot;SpringAction&quot;&gt;</span><br><span class="line">     &lt;!--使用实例工厂的方法注入对象,对应下面的配置文件--&gt;</span><br><span class="line">     &lt;property name=&quot;factoryDao&quot; ref=&quot;factoryDao&quot;&gt;&lt;/property&gt;</span><br><span class="line">     &lt;/bean&gt;</span><br><span class="line">     &lt;!--此处获取对象的方式是从工厂类中获取实例方法--&gt;</span><br><span class="line">    &lt;bean name=&quot;daoFactory&quot; class=&quot;com.DaoFactory&quot;&gt;&lt;/bean&gt;</span><br><span class="line">    &lt;bean name=&quot;factoryDao&quot; factory-bean=&quot;daoFactory&quot;</span><br><span class="line">            factory-method=&quot;getFactoryDaoImpl&quot;&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure></details><h2 id="5-种不同方式的自动装配"><a href="#5-种不同方式的自动装配" class="headerlink" title="5 种不同方式的自动装配"></a>5 种不同方式的自动装配</h2><p>Spring 装配包括手动装配和自动装配，手动装配是有基于 xml 装配、构造方法、setter 方法等自动装配有五种自动装配的方式，可以用来指导 Spring 容器用自动装配方式来进行依赖注入。</p><ol><li>no：默认的方式是不进行自动装配，通过显式设置 ref 属性来进行装配。</li><li>byName：通过参数名 自动装配，Spring 容器在配置文件中发现 bean 的 autowire 属性被设置成 byname，之后容器试图匹配、装配和该 bean 的属性具有相同名字的 bean。</li><li>byType：通过参数类型自动装配，Spring 容器在配置文件中发现 bean 的 autowire 属性被设置成 byType，之后容器试图匹配、装配和该 bean 的属性具有相同类型的 bean。如果有多个 bean 符合条件，则抛出错误。</li><li>constructor：这个方式类似于 byType， 但是要提供给构造器参数，如果没有确定的带参数的构造器参数类型，将会抛出异常。</li><li>autodetect：首先尝试使用 constructor 来自动装配，如果无法工作，则使用 byType 方式。</li></ol><h1 id="Spring-AOP-原理（Aspect-Oriented-Programming-面向切面编程）"><a href="#Spring-AOP-原理（Aspect-Oriented-Programming-面向切面编程）" class="headerlink" title="Spring AOP 原理（Aspect Oriented Programming 面向切面编程）"></a>Spring AOP 原理（Aspect Oriented Programming 面向切面编程）</h1><h2 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h2><p>“横切”的技术，剖解开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块，并将其命名为”Aspect”，即切面。所谓”切面”，简单说就是那些与业务无关，却为业务模块所共同调用的逻辑或责任封装起来，便于减少系统的重复代码，降低模块之间的耦合度，并有利于未来的可操作性和可维护性。</p><p>使用”横切”技术，AOP 把软件系统分为两个部分：核心关注点和横切关注点。业务处理的主要流程是核心关注点，与之关系不大的部分是横切关注点。横切关注点的一个特点是，他们经常发生在核心关注点的多处，而各处基本相似，比如权限认证、日志、事物。AOP的作用在于分离系统中的各种关注点，将核心关注点和横切关注点分离开来。</p><p>AOP 主要应用场景有：</p><ol><li>Authentication 权限</li><li>Caching 缓存</li><li>Context passing 内容传递</li><li>Error handling 错误处理</li><li>Lazy loading 懒加载</li><li>Debugging 调试</li><li>logging, tracing, profiling and monitoring 记录跟踪 优化 校准</li><li>Performance optimization 性能优化</li><li>Persistence 持久化</li><li>Resource pooling 资源池</li><li>Synchronization 同步</li><li>Transactions 事务</li></ol><h2 id="AOP-核心概念"><a href="#AOP-核心概念" class="headerlink" title="AOP 核心概念"></a>AOP 核心概念</h2><p>1、切面（aspect）：类是对物体特征的抽象，切面就是对横切关注点的抽象</p><p>一个关注点的模块化，这个关注点可能会横切多个对象。事务管理是J2EE应用中一个关于横切关注点的很好的例子。在Spring AOP中，切面可以使用基于模式或者基于@Aspect注解的方式实现，可以简单地认为, 使用 @Aspect 注解的类就是切面。</p><p>2、横切关注点：对哪些方法进行拦截，拦截后怎么处理，这些关注点称之为横切关注点。</p><p>3、连接点（join point）：被拦截到的点，因为Spring只支持方法类型的连接点，所以在Spring中连接点指的就是被拦截到的方法，实际上连接点还可以是字段或者构造器。</p><p>在程序执行过程中某个特定的点，比如某方法调用的时候或者处理异常的时候。在Spring AOP中，一个连接点总是表示一个方法的执行。</p><p>4、切入点（point cut）：对连接点进行拦截的定义</p><p>匹配连接点的断言。通知和一个切入点表达式关联，并在满足这个切入点的连接点上运行（例如，当执行某个特定名称的方法时）。切入点表达式如何和连接点匹配是AOP的核心：Spring缺省使用AspectJ切入点语法。</p><p>5、通知（advice）：所谓通知指的就是指拦截到连接点之后要执行的代码，通知分为前置、后置、异常、最终、环绕通知五类。</p><p>在切面的某个特定的连接点上执行的动作，许多AOP框架（包括Spring）都是以拦截器做通知模型，并维护一个以连接点为中心的拦截器链。</p><p>6、目标对象（Target Object)：代理的目标对象</p><p>被一个或多个切面所通知的对象。也被成为被通知（advised）对象,既然Spring AOP是通过运行时代理所实现的，这个对象永远是一个被代理(Proxied)对象</p><p>7、织入（weaving）：将切面应用到目标对象并导致代理对象创建的过程</p><p>把切面连接到其它的应用程序类型或者对象上，并创建一个被通知的对象，这些可以在编译时（例如使用AspectJ编译器），类加载时和运行时完成。Spring和其它纯Java AOP框架一样，在运行时完成织入。</p><p>8、引入（introduction）：在不修改代码的前提下，引入可以在运行期为类动态地添加一些方法或字段。</p><p>用来给一个类型声明额外的方法或属性（也被成为连接类型声明（inter-type declaration)).Spring允许引入新的接口及对应的实现到任何被代理的对象。例如可以使用引入来使一个bean实现IsModified接口，一边简化缓存机制。</p><ol start="9"><li>AOP代理（AOP Proxy）：AOP框架创建的对象，用来实现切面契约（例如通知方法执行等等）在Spring中，AOP代理可以是JDK动态代理或者CGLIB代理。</li></ol><p>参考：<a href="https://segmentfault.com/a/1190000007469968" target="_blank" rel="noopener">https://segmentfault.com/a/1190000007469968</a></p><h3 id="通知类型"><a href="#通知类型" class="headerlink" title="通知类型"></a>通知类型</h3><h4 id="前置通知（Before-advice）"><a href="#前置通知（Before-advice）" class="headerlink" title="前置通知（Before advice）"></a>前置通知（Before advice）</h4><p>在某连接点之前执行的通知，但这个通知不能组织连接点之前的执行流程（除非它抛出一个异常）</p><h4 id="后置通知（After-returning-advice）"><a href="#后置通知（After-returning-advice）" class="headerlink" title="后置通知（After returning advice）"></a>后置通知（After returning advice）</h4><p>在某连接点正常完成后执行的通知：例如，一个方法没有抛出任何异常，正常返回。</p><h4 id="异常通知（After-throwing-advice）"><a href="#异常通知（After-throwing-advice）" class="headerlink" title="异常通知（After throwing advice）"></a>异常通知（After throwing advice）</h4><p>在方法抛出异常退出时执行的通知</p><h4 id="最终通知（After-Finally-advice）"><a href="#最终通知（After-Finally-advice）" class="headerlink" title="最终通知（After/Finally advice）"></a>最终通知（After/Finally advice）</h4><p>当某连接点退出的时候执行的通知（不论是正常返回还是异常退出）</p><h4 id="环绕通知（Around-Advice）"><a href="#环绕通知（Around-Advice）" class="headerlink" title="环绕通知（Around Advice）"></a>环绕通知（Around Advice）</h4><p>包围一个连接点的通知，如方法调用，这是最强大的一种通知类型。环绕通知可以在方法调用前后完成自定义的行为。它也会选择是否继续执行连接点或直接返回它自己的返回值或抛出异常来结束执行。</p><h2 id="彻底理解-aspect-join-point-point-cut-advice"><a href="#彻底理解-aspect-join-point-point-cut-advice" class="headerlink" title="彻底理解 aspect, join point, point cut, advice"></a>彻底理解 aspect, join point, point cut, advice</h2><p>参考自：<a href="https://segmentfault.com/a/1190000007469968" target="_blank" rel="noopener">https://segmentfault.com/a/1190000007469968</a></p><p>下面以一个简单的例子来比喻一下 AOP 中 aspect, jointpoint, pointcut 与 advice 之间的关系.</p><p>让我们来假设一下, 从前有一个叫爪哇的小县城, 在一个月黑风高的晚上, 这个县城中发生了命案. 作案的凶手十分狡猾, 现场没有留下什么有价值的线索. 不过万幸的是, 刚从隔壁回来的老王恰好在这时候无意中发现了凶手行凶的过程, 但是由于天色已晚, 加上凶手蒙着面, 老王并没有看清凶手的面目, 只知道凶手是个男性, 身高约七尺五寸. 爪哇县的县令根据老王的描述, 对守门的士兵下命令说: 凡是发现有身高七尺五寸的男性, 都要抓过来审问. 士兵当然不敢违背县令的命令, 只好把进出城的所有符合条件的人都抓了起来.</p><p>来让我们看一下上面的一个小故事和 AOP 到底有什么对应关系.</p><p>首先我们知道, 在 Spring AOP 中 join point 指代的是所有方法的执行点, 而 point cut 是一个描述信息, 它修饰的是 join point, 通过 point cut, 我们就可以确定哪些 join point 可以被织入 Advice. 对应到我们在上面举的例子, 我们可以做一个简单的类比, join point 就相当于 爪哇的小县城里的百姓, point cut 就相当于 老王所做的指控, 即凶手是个男性, 身高约七尺五寸, 而 advice 则是施加在符合老王所描述的嫌疑人的动作: 抓过来审问.<br>为什么可以这样类比呢?</p><p>join point –&gt; 爪哇的小县城里的百姓: 因为根据定义, join point 是所有可能被织入 advice 的候选的点, 在 Spring AOP中, 则可以认为所有方法执行点都是 join point. 而在我们上面的例子中, 命案发生在小县城中, 按理说在此县城中的所有人都有可能是嫌疑人.</p><p>point cut –&gt; 男性, 身高约七尺五寸: 我们知道, 所有的方法(joint point) 都可以织入 advice, 但是我们并不希望在所有方法上都织入 advice, 而 pointcut 的作用就是提供一组规则来匹配joinpoint, 给满足规则的 joinpoint 添加 advice. 同理, 对于县令来说, 他再昏庸, 也知道不能把县城中的所有百姓都抓起来审问, 而是根据凶手是个男性, 身高约七尺五寸, 把符合条件的人抓起来. 在这里 凶手是个男性, 身高约七尺五寸 就是一个修饰谓语, 它限定了凶手的范围, 满足此修饰规则的百姓都是嫌疑人, 都需要抓起来审问.</p><p>advice –&gt; 抓过来审问, advice 是一个动作, 即一段 Java 代码, 这段 Java 代码是作用于 point cut 所限定的那些 join point 上的. 同理, 对比到我们的例子中, 抓过来审问 这个动作就是对作用于那些满足 男性, 身高约七尺五寸 的爪哇的小县城里的百姓.</p><p>aspect: aspect 是 point cut 与 advice 的组合, 因此在这里我们就可以类比: “根据老王的线索, 凡是发现有身高七尺五寸的男性, 都要抓过来审问” 这一整个动作可以被认为是一个 aspect.</p><p>或则我们也可以从语法的角度来简单类比一下. 我们在学英语时, 经常会接触什么 定语, 被动句 之类的概念, 那么可以做一个不严谨的类比, 即 joinpoint 可以认为是一个 宾语, 而 pointcut 则可以类比为修饰 joinpoint 的定语, 那么整个 aspect 就可以描述为: 满足 pointcut 规则的 joinpoint 会被添加相应的 advice 操作.</p><h2 id="AOP-两种代理方式"><a href="#AOP-两种代理方式" class="headerlink" title="AOP 两种代理方式"></a>AOP 两种代理方式</h2><p>Spring 提供了两种方式来生成代理对象:JDKProxy和Cglib，具体使用哪种方式生成由AopProxyFactory根据AdvisedSupport对象的配置来决定。默认的策略是如果目标类是接口，则使用 JDK 动态代理技术，否则使用 Cglib 来生成代理。</p><h3 id="JDK-动态接口代理"><a href="#JDK-动态接口代理" class="headerlink" title="JDK 动态接口代理"></a>JDK 动态接口代理</h3><ol><li>JDK 动态代理主要涉及到 java.lang.reflect包中的两个类：Proxy和InvocationHandler。InvocationHandler是一个接口，通过实现该接口定义横切逻辑，并通过反射机制调用目标类的代码，动态将横切逻辑和业务逻辑编制在一起。Proxy利用InvocationHandler动态创建一个符合某一接口的实例，生成目标类的代理对象。</li></ol><h3 id="CGLib-动态代理"><a href="#CGLib-动态代理" class="headerlink" title="CGLib 动态代理"></a>CGLib 动态代理</h3><ol start="2"><li>CGLib 全称为 Code Generation Library，是一个强大的高性能，高质量的代码生成类库，可以在运行期扩展 Java 类与实现 Java 接口，CGLib 封装了 asm，可以再运行期动态生成新的 class。和JDK动态代理相比较：JDK创建代理有一个限制，就是只能为接口创建代理实例，而对于没有通过接口定义业务方法的类，则可以通过 CGLib 创建动态代理。</li></ol><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><details>    <summary>CGLib</summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@Aspect</span><br><span class="line">public class TransactionDemo &#123;</span><br><span class="line">    @Pointcut(value=&quot;execution(* com.yangxin.core.service.*.*.*(..))&quot;)</span><br><span class="line">    public void point()&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    @Before(value=&quot;point()&quot;)</span><br><span class="line">    public void before()&#123;</span><br><span class="line">        System.out.println(&quot;transaction begin&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @AfterReturning(value = &quot;point()&quot;)</span><br><span class="line">    public void after()&#123;</span><br><span class="line">        System.out.println(&quot;transaction commit&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @Around(&quot;point()&quot;)</span><br><span class="line">    public void around(ProceedingJoinPoint joinPoint) throws Throwable&#123;</span><br><span class="line">        System.out.println(&quot;transaction begin&quot;);</span><br><span class="line">        joinPoint.proceed();</span><br><span class="line">        System.out.println(&quot;transaction commit&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h1 id="Spring-MVC-原理"><a href="#Spring-MVC-原理" class="headerlink" title="Spring MVC 原理"></a>Spring MVC 原理</h1><p>Spring 的模型-视图-控制器（MVC）框架是围绕一个DispatcherServlet来设计的，这个Servlet会把请求分发给各个处理器，并支持可配置的处理器映射、视图渲染、本地化、时区与主题渲染等，甚至还能支持文件上传。</p><h2 id="Http-请求到-DispatcherServlet"><a href="#Http-请求到-DispatcherServlet" class="headerlink" title="Http 请求到 DispatcherServlet"></a>Http 请求到 DispatcherServlet</h2><p>(1) 客户端请求提交到 DispatcherServlet。</p><h2 id="HandlerMapping-寻找处理器"><a href="#HandlerMapping-寻找处理器" class="headerlink" title="HandlerMapping 寻找处理器"></a>HandlerMapping 寻找处理器</h2><p>(2) 由 DispatcherServlet 控制器查询一个或多个 HandlerMapping，找到处理请求的Controller。</p><h2 id="调用处理器-Controller"><a href="#调用处理器-Controller" class="headerlink" title="调用处理器 Controller"></a>调用处理器 Controller</h2><p>(3) DispatcherServlet 将请求提交到 Controller。</p><h2 id="Controller-调用业务逻辑处理后，返回-ModelAndView"><a href="#Controller-调用业务逻辑处理后，返回-ModelAndView" class="headerlink" title="Controller 调用业务逻辑处理后，返回 ModelAndView"></a>Controller 调用业务逻辑处理后，返回 ModelAndView</h2><p>(4)(5)调用业务处理和返回结果：Controller 调用业务逻辑处理后，返回 ModelAndView。</p><h2 id="DispatcherServlet-查询-ModelAndView"><a href="#DispatcherServlet-查询-ModelAndView" class="headerlink" title="DispatcherServlet 查询 ModelAndView"></a>DispatcherServlet 查询 ModelAndView</h2><p>(6)(7)处理视图映射并返回模型： DispatcherServlet 查询一个或多个 ViewResoler 视图解析器，找到 ModelAndView 指定的视图。</p><h2 id="ModelAndView-反馈浏览器-HTTP"><a href="#ModelAndView-反馈浏览器-HTTP" class="headerlink" title="ModelAndView 反馈浏览器 HTTP"></a>ModelAndView 反馈浏览器 HTTP</h2><p>(8) Http 响应：视图负责将结果显示到客户端。</p><h2 id="MVC常用注解"><a href="#MVC常用注解" class="headerlink" title="MVC常用注解"></a>MVC常用注解</h2><h1 id="Spring-Boot-原理"><a href="#Spring-Boot-原理" class="headerlink" title="Spring Boot 原理"></a>Spring Boot 原理</h1><p>Spring Boot 是由 Pivotal 团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通过这种方式，Spring Boot 致力于在蓬勃发展的快速应用开发领域(rapid application<br>development)成为领导者。其特点如下：</p><ol><li>创建独立的 Spring 应用程序</li><li>嵌入的 Tomcat，无需部署 WAR 文件</li><li>简化 Maven 配置</li><li>自动配置 Spring</li><li>提供生产就绪型功能，如指标，健康检查和外部配置</li><li>绝对没有代码生成和对 XML 没有要求配置</li></ol><h1 id="JPA-原理（Java-Persistence-API）Java持久化API"><a href="#JPA-原理（Java-Persistence-API）Java持久化API" class="headerlink" title="JPA 原理（Java Persistence API）Java持久化API"></a>JPA 原理（Java Persistence API）Java持久化API</h1><p>是一套Sun公司Java官方制定的ORM 方案,是规范，是标准 ，sun公司自己并没有实现</p><p>关注点：ORM ，标准 概念 （关键字）</p><p>ORM是什么？</p><p>ORM（Object Relational Mapping）对象关系映射。</p><p>问：ORM有什么用？</p><p>在操作数据库之前，先把数据表与实体类关联起来。然后通过实体类的对象操作（增删改查）数据库表，这个就是ORM的行为！</p><p>所以：ORM是一个实现使用对象操作数据库的设计思想</p><p>通过这句话，我们知道JPA的作用就是通过对象操作数据库的，不用编写sql语句。</p><p>JPA的实现者</p><p>既然我们说JPA是一套标准，意味着，它只是一套实现ORM理论的接口。没有实现的代码。</p><p>那么我们必须要有具体的实现者才可以完成ORM操作功能的实现</p><p>市场上的主流的JPA框架（实现者）有：Hibernate （JBoos）、EclipseTop（Eclipse社区）、OpenJPA （Apache基金会）。</p><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>事务是计算机应用中不可或缺的组件模型，它保证了用户操作的原子性(Atomicity)、一致性(Consistency)、隔离性 (Isolation) 和持久性 (Durabilily)。</p><h2 id="本地事务"><a href="#本地事务" class="headerlink" title="本地事务"></a>本地事务</h2><p>紧密依赖于底层资源管理器（例如数据库连接)，事务处理局限在当前事务资源内。此种事务处理方式不存在对应用服务器的依赖，因而部署灵活却无法支持多数据源的分布式事务。在数据库连接中使用本地事务示例如下：</p><details>    <summary>本地事务</summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public void transferAccount() &#123;</span><br><span class="line">    Connection conn = null;</span><br><span class="line">    Statement stmt = null;</span><br><span class="line">    try&#123;</span><br><span class="line">        conn = getDataSource().getConnection();</span><br><span class="line">        // 将自动提交设置为 false，若设置为 true 则数据库将会把每一次数据更新认定为一个事务并自动提交</span><br><span class="line">        conn.setAutoCommit(false);</span><br><span class="line">        stmt = conn.createStatement();</span><br><span class="line">        // 将 A 账户中的金额减少 500</span><br><span class="line">        stmt.execute(&quot;update t_account set amount = amount - 500 where account_id = &apos;A&apos;&quot;);</span><br><span class="line">        // 将 B 账户中的金额增加 500</span><br><span class="line">        stmt.execute(&quot;update t_account set amount = amount + 500 where account_id = &apos;B&apos;&quot;);</span><br><span class="line">        // 提交事务</span><br><span class="line">        conn.commit();</span><br><span class="line">        // 事务提交：转账的两步操作同时成功</span><br><span class="line">    &#125; catch(SQLException sqle)&#123;</span><br><span class="line">        // 发生异常，回滚在本事务中的操做</span><br><span class="line">        conn.rollback();</span><br><span class="line">        // 事务回滚：转账的两步操作完全撤销</span><br><span class="line">        stmt.close();</span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h2 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h2><p>Java 事务编程接口（JTA：Java Transaction API）和 Java 事务服务 (JTS；Java Transaction Service)为J2EE平台提供了分布式事务服务。分布式事务（Distributed Transaction）包括事务管理器（Transaction Manager）和一个或多个支持 XA 协议的资源管理器 ( Resource Manager )。我们可以将资源管理器看做任意类型的持久化数据存储；事务管理器承担着所有事务参与单元的协调与控制。</p><details>    <summary>分布式事务</summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public void transferAccount() &#123;</span><br><span class="line">    UserTransaction userTx = null;</span><br><span class="line">    Connection connA = null; Statement stmtA = null;</span><br><span class="line">    Connection connB = null; Statement stmtB = null;</span><br><span class="line">    try&#123;</span><br><span class="line">        // 获得 Transaction 管理对象</span><br><span class="line">        userTx = (UserTransaction)getContext().lookup(&quot;java:comp/UserTransaction&quot;);</span><br><span class="line">        connA = getDataSourceA().getConnection();// 从数据库 A 中取得数据库连接</span><br><span class="line">        connB = getDataSourceB().getConnection();// 从数据库 B 中取得数据库连接</span><br><span class="line">        userTx.begin(); // 启动事务</span><br><span class="line">        stmtA = connA.createStatement();// 将 A 账户中的金额减少 500</span><br><span class="line">        stmtA.execute(&quot;update t_account set amount = amount - 500 where account_id = &apos;A&apos;&quot;);</span><br><span class="line">        // 将 B 账户中的金额增加 500</span><br><span class="line">        stmtB = connB.createStatement();</span><br><span class="line">        stmtB.execute(&quot;update t_account set amount = amount + 500 where account_id = &apos;B&apos;&quot;);</span><br><span class="line">        userTx.commit();// 提交事务</span><br><span class="line">        // 事务提交：转账的两步操作同时成功（数据库 A 和数据库 B 中的数据被同时更新）</span><br><span class="line">    &#125; catch(SQLException sqle)&#123;</span><br><span class="line">        // 发生异常，回滚在本事务中的操纵</span><br><span class="line">        userTx.rollback();// 事务回滚：数据库 A 和数据库 B 中的数据更新被同时撤销</span><br><span class="line">    &#125; catch(Exception ne)&#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h2 id="两阶段提交"><a href="#两阶段提交" class="headerlink" title="两阶段提交"></a>两阶段提交</h2><p>两阶段提交主要保证了分布式事务的原子性：即所有结点要么全做要么全不做，所谓的两个阶段是指：第一阶段：准备阶段；第二阶段：提交阶段</p><h3 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h3><p>事务协调者(事务管理器)给每个参与者(资源管理器)发送 Prepare 消息，每个参与者要么直接返回失败(如权限验证失败)，要么在本地执行事务，写本地的 redo 和 undo 日志，但不提交，到达一种“万事俱备，只欠东风”的状态。</p><h3 id="提交阶段："><a href="#提交阶段：" class="headerlink" title="提交阶段："></a>提交阶段：</h3><p>如果协调者收到了参与者的失败消息或者超时，直接给每个参与者发送回滚(Rollback)消息；否则，发送提交(Commit)消息；参与者根据协调者的指令执行提交或者回滚操作，释放所有事务处理过程中使用的锁资源。(注意:必须在最后阶段释放锁资源)</p><p>将提交分成两阶段进行的目的很明确，就是尽可能晚地提交事务，让事务在提交前尽可能地完成所有能完成的工作。</p><h1 id="Mybatis-缓存"><a href="#Mybatis-缓存" class="headerlink" title="Mybatis 缓存"></a>Mybatis 缓存</h1><p>Mybatis 中有一级缓存和二级缓存，默认情况下一级缓存是开启的，而且是不能关闭的。一级缓存是指 SqlSession 级别的缓存，当在同一个 SqlSession 中进行相同的 SQL 语句查询时，第二次以后的查询不会从数据库查询，而是直接从缓存中获取，一级缓存最多缓存 1024 条 SQL。二级缓存是指可以跨 SqlSession 的缓存。是 mapper 级别的缓存，对于 mapper 级别的缓存不同的sqlsession 是可以共享的</p><h2 id="Mybatis-的一级缓存原理（sqlsession-级别）"><a href="#Mybatis-的一级缓存原理（sqlsession-级别）" class="headerlink" title="Mybatis 的一级缓存原理（sqlsession 级别）"></a>Mybatis 的一级缓存原理（sqlsession 级别）</h2><p>第一次发出一个查询 sql，sql 查询结果写入 sqlsession 的一级缓存中，缓存使用的数据结构是一个 map。</p><p>key：MapperID+offset+limit+Sql+所有的入参</p><p>value：用户信息</p><p>同一个 sqlsession 再次发出相同的 sql，就从缓存中取出数据。如果两次中间出现 commit 操作（修改、添加、删除），本 sqlsession 中的一级缓存区域全部清空，下次再去缓存中查询不到所以要从数据库查询，从数据库查询到再写入缓存。</p><h2 id="二级缓存原理（mapper-基本）"><a href="#二级缓存原理（mapper-基本）" class="headerlink" title="二级缓存原理（mapper 基本）"></a>二级缓存原理（mapper 基本）</h2><p>二级缓存的范围是 mapper 级别（mapper 同一个命名空间），mapper 以命名空间为单位创建缓存数据结构，结构是 map。mybatis 的二级缓存是通过 CacheExecutor 实现的。CacheExecutor其实是 Executor 的代理对象。所有的查询操作，在CacheExecutor中都会先匹配缓存中是否存在，不存在则查询数据库。</p><p>key：MapperID+offset+limit+Sql+所有的入参</p><p>具体使用需要配置：</p><ol><li>Mybatis 全局配置中启用二级缓存配置</li><li>在对应的 Mapper.xml 中配置 cache 节点</li><li>在对应的 select 查询节点中添加 useCache=true</li></ol><h1 id="Tomcat-架构"><a href="#Tomcat-架构" class="headerlink" title="Tomcat 架构"></a>Tomcat 架构</h1><p><a href="http://www.importnew.com/21112.html" target="_blank" rel="noopener">http://www.importnew.com/21112.html</a></p></bean></bean></bean></bean>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring是一个全面的、企业应用开发一站式的解决方案，贯穿表现层、业务层、持久层。但是Spring仍然可以和其他的框架无缝整合。&lt;/p&gt;
    
    </summary>
    
      <category term="2021年12月" scheme="http://yoursite.com/categories/2021%E5%B9%B412%E6%9C%88/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>JAVA 学习笔记（异常，反射，注解，内部类，泛型，序列化，复制）</title>
    <link href="http://yoursite.com/2021/12/29/JAVA%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%BC%82%E5%B8%B8%EF%BC%8C%E5%8F%8D%E5%B0%84%EF%BC%8C%E6%B3%A8%E8%A7%A3%EF%BC%8C%E5%86%85%E9%83%A8%E7%B1%BB%EF%BC%8C%E6%B3%9B%E5%9E%8B%EF%BC%8C%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%8C%E5%A4%8D%E5%88%B6%EF%BC%89/"/>
    <id>http://yoursite.com/2021/12/29/JAVA 学习笔记（异常，反射，注解，内部类，泛型，序列化，复制）/</id>
    <published>2021-12-29T08:50:12.000Z</published>
    <updated>2021-12-30T02:12:32.097Z</updated>
    
    <content type="html"><![CDATA[<p>JAVA 学习笔记（异常，反射，注解，内部类，泛型，序列化，复制）</p><a id="more"></a><p>[TOC]</p><h1 id="JAVA-异常分类及处理"><a href="#JAVA-异常分类及处理" class="headerlink" title="JAVA 异常分类及处理"></a>JAVA 异常分类及处理</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>如果某个方法不能按照正常的途径完成任务，就可以通过另一种路径退出方法。在这种情况下会抛出一个封装了错误信息的对象。此时，这个方法会立刻退出同时不返回任何值。另外，调用这个方法的其他代码也无法继续执行，异常处理机制会将代码执行交给异常处理器。</p><h2 id="异常分类"><a href="#异常分类" class="headerlink" title="异常分类"></a>异常分类</h2><p>Throwable 是 Java 语言中所有错误或异常的超类。下一层分为 Error 和 Exception </p><h3 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h3><ol><li>Error 类是指 java 运行时系统的内部错误和资源耗尽错误。应用程序不会抛出该类对象。如果出现了这样的错误，除了告知用户，剩下的就是尽力使程序安全的终止。</li></ol><h3 id="Exception（RuntimeException、CheckedException）"><a href="#Exception（RuntimeException、CheckedException）" class="headerlink" title="Exception（RuntimeException、CheckedException）"></a>Exception（RuntimeException、CheckedException）</h3><ol start="2"><li>Exception 又 有 两 个 分 支 ， 一 个 是 运 行 时 异 常 RuntimeException ， 一 个 是CheckedException。</li></ol><p>RuntimeException 如 ： NullPointerException 、 ClassCastException ； 一 个 是 检 查 异 常CheckedException，如 I/O 错误导致的 IOException、SQLException。 RuntimeException是那些可能在Java虚拟机正常运行期间抛出的异常的超类。</p><p>如果出现RuntimeException，那么一定是程序员的错误</p><p>检查异常 CheckedException：一般是外部错误，这种异常都发生在编译阶段，Java编译器会强制程序去捕获此类异常，即会出现要求你把这段可能出现异常的程序进行 try catch，该类异常一般包括几个方面：</p><ol><li>试图在文件尾部读取数据</li><li>试图打开一个错误格式的 URL</li><li>试图根据给定的字符串查找 class 对象，而这个字符串表示的类并不存在</li></ol><h2 id="异常的处理方式"><a href="#异常的处理方式" class="headerlink" title="异常的处理方式"></a>异常的处理方式</h2><p>遇到问题不进行具体处理，而是继续抛给调用者 （throw,throws）抛出异常有三种形式，一是 throw,一个 throws，还有一种系统自动抛异常。</p><details>    <summary>异常的处理方式</summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        String s = &quot;abc&quot;;</span><br><span class="line">        if(s.equals(&quot;abc&quot;)) &#123;</span><br><span class="line">            throw new NumberFormatException();</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    int div(int a,int b) throws Exception&#123;</span><br><span class="line">        return a/b;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></details><h2 id="Throw-和-throws-的区别："><a href="#Throw-和-throws-的区别：" class="headerlink" title="Throw 和 throws 的区别："></a>Throw 和 throws 的区别：</h2><h3 id="位置不同"><a href="#位置不同" class="headerlink" title="位置不同"></a>位置不同</h3><ol><li>throws 用在函数上，后面跟的是异常类，可以跟多个；而 throw 用在函数内，后面跟的是异常对象。</li></ol><h3 id="功能不同："><a href="#功能不同：" class="headerlink" title="功能不同："></a>功能不同：</h3><ol start="2"><li>throws 用来声明异常，让调用者只知道该功能可能出现的问题，可以给出预先的处理方式；throw 抛出具体的问题对象，执行到 throw，功能就已经结束了，跳转到调用者，并将具体的问题对象抛给调用者。也就是说 throw 语句独立存在时，下面不要定义其他语句，因为执行不到。</li><li>throws 表示出现异常的一种可能性，并不一定会发生这些异常；throw 则是抛出了异常，执行 throw 则一定抛出了某种异常对象。</li><li>两者都是消极处理异常的方式，只是抛出或者可能抛出异常，但是不会由函数去处理异常，真正的处理异常由函数的上层调用处理。</li></ol><h1 id="JAVA-反射"><a href="#JAVA-反射" class="headerlink" title="JAVA 反射"></a>JAVA 反射</h1><h2 id="动态语言"><a href="#动态语言" class="headerlink" title="动态语言"></a>动态语言</h2><p>动态语言，是指程序在运行时可以改变其结构：新的函数可以引进，已有的函数可以被删除等结构上的变化。比如常见的 JavaScript 就是动态语言，除此之外 Ruby,Python 等也属于动态语言，而 C、C++则不属于动态语言。从反射角度说 JAVA 属于半动态语言。</p><h2 id="反射机制概念-（运行状态中知道类所有的属性和方法）"><a href="#反射机制概念-（运行状态中知道类所有的属性和方法）" class="headerlink" title="反射机制概念 （运行状态中知道类所有的属性和方法）"></a>反射机制概念 （运行状态中知道类所有的属性和方法）</h2><p>在 Java 中的反射机制是指在运行状态中，对于任意一个类都能够知道这个类所有的属性和方法；并且对于任意一个对象，都能够调用它的任意一个方法；这种动态获取信息以及动态调用对象方法的功能是 Java 语言的反射机制。</p><h2 id="反射的应用场合"><a href="#反射的应用场合" class="headerlink" title="反射的应用场合"></a>反射的应用场合</h2><h3 id="编译时类型和运行时类型"><a href="#编译时类型和运行时类型" class="headerlink" title="编译时类型和运行时类型"></a>编译时类型和运行时类型</h3><p>在 Java 程序中许多对象在运行是都会出现两种类型：编译时类型和运行时类型。 编译时的类型由声明对象时实用的类型来决定，运行时的类型由实际赋值给对象的类型决定 。如：</p><pre><code>Person p=new Student();</code></pre><p>其中编译时类型为 Person，运行时类型为 Student。</p><h3 id="编译时类型无法获取具体方法"><a href="#编译时类型无法获取具体方法" class="headerlink" title="编译时类型无法获取具体方法"></a>编译时类型无法获取具体方法</h3><p>程序在运行时还可能接收到外部传入的对象，该对象的编译时类型为Object,但是程序有需要调用该对象的运行时类型的方法。为了解决这些问题，程序需要在运行时发现对象和类的真实信息。<br>然而，如果编译时根本无法预知该对象和类属于哪些类，程序只能依靠运行时信息来发现该对象和类的真实信息，此时就必须使用到反射了。</p><h2 id="Java-反射-API"><a href="#Java-反射-API" class="headerlink" title="Java 反射 API"></a>Java 反射 API</h2><p>反射 API 用来生成 JVM 中的类、接口或则对象的信息。</p><ol><li>Class 类：反射的核心类，可以获取类的属性，方法等信息。</li><li>Field 类：Java.lang.reflec 包中的类，表示类的成员变量，可以用来获取和设置类之中的属性值。</li><li>Method 类： Java.lang.reflec 包中的类，表示类的方法，它可以用来获取类中的方法信息或者执行方法。</li><li>Constructor 类： Java.lang.reflec 包中的类，表示类的构造方法。</li></ol><h2 id="反射使用步骤（获取-Class-对象、调用对象方法）"><a href="#反射使用步骤（获取-Class-对象、调用对象方法）" class="headerlink" title="反射使用步骤（获取 Class 对象、调用对象方法）"></a>反射使用步骤（获取 Class 对象、调用对象方法）</h2><ol><li>获取想要操作的类的 Class 对象，他是反射的核心，通过 Class 对象我们可以任意调用类的方法。</li><li>调用 Class 类中的方法，既就是反射的使用阶段。</li><li>使用反射 API 来操作这些信息。</li></ol><h2 id="获取-Class-对象的-3-种方法"><a href="#获取-Class-对象的-3-种方法" class="headerlink" title="获取 Class 对象的 3 种方法"></a>获取 Class 对象的 3 种方法</h2><p>调用某个对象的 getClass()方法</p><pre><code>Person p=new Person();Class clazz=p.getClass();</code></pre><p>调用某个类的 class 属性来获取该类对应的 Class 对象</p><pre><code>Class clazz=Person.class;</code></pre><p>使用 Class 类中的 forName()静态方法(最安全/性能最好)</p><pre><code>Class clazz=Class.forName(&quot;类的全路径&quot;); (最常用)</code></pre><p>当我们获得了想要操作的类的 Class 对象后，可以通过 Class 类中的方法获取并查看该类中的方法和属性。</p><details>    <summary>获取 Class 对象的 3 种方法</summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//获取 Person 类的 Class 对象</span><br><span class="line">Class clazz=Class.forName(&quot;reflection.Person&quot;);</span><br><span class="line">//获取 Person 类的所有方法信息</span><br><span class="line">Method[] method=clazz.getDeclaredMethods();</span><br><span class="line">for(Method m:method)&#123;</span><br><span class="line">    System.out.println(m.toString());</span><br><span class="line">&#125;</span><br><span class="line">//获取 Person 类的所有成员属性信息</span><br><span class="line">Field[] field=clazz.getDeclaredFields();</span><br><span class="line">for(Field f:field)&#123;</span><br><span class="line">    System.out.println(f.toString());</span><br><span class="line">&#125;</span><br><span class="line">//获取 Person 类的所有构造方法信息</span><br><span class="line">Constructor[] constructor=clazz.getDeclaredConstructors();</span><br><span class="line">for(Constructor c:constructor)&#123;</span><br><span class="line">    System.out.println(c.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h2 id="创建对象的两种方法"><a href="#创建对象的两种方法" class="headerlink" title="创建对象的两种方法"></a>创建对象的两种方法</h2><h3 id="Class-对象的-newInstance"><a href="#Class-对象的-newInstance" class="headerlink" title="Class 对象的 newInstance()"></a>Class 对象的 newInstance()</h3><ol><li>使用 Class 对象的 newInstance()方法来创建该 Class 对象对应类的实例，但是这种方法要求<br>该 Class 对象对应的类有默认的空构造器。</li></ol><h3 id="调用-Constructor-对象的-newInstance"><a href="#调用-Constructor-对象的-newInstance" class="headerlink" title="调用 Constructor 对象的 newInstance()"></a>调用 Constructor 对象的 newInstance()</h3><ol start="2"><li>先使用 Class 对象获取指定的 Constructor 对象，再调用 Constructor 对象的 newInstance()<br>方法来创建 Class 对象对应类的实例,通过这种方法可以选定构造方法创建实例。</li></ol><details>    <summary>newInstance</summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//获取 Person 类的 Class 对象</span><br><span class="line"> Class clazz=Class.forName(&quot;reflection.Person&quot;);</span><br><span class="line"> //使用.newInstane 方法创建对象</span><br><span class="line"> Person p=(Person) clazz.newInstance();</span><br><span class="line">//获取构造方法并创建对象</span><br><span class="line"> Constructor c=clazz.getDeclaredConstructor(String.class,String.class,int.class);</span><br><span class="line"> //创建对象并设置属性</span><br><span class="line"> Person p1=(Person) c.newInstance(&quot;李四&quot;,&quot;男&quot;,20);</span><br></pre></td></tr></table></figure></details><h1 id="JAVA-注解"><a href="#JAVA-注解" class="headerlink" title="JAVA 注解"></a>JAVA 注解</h1><h2 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h2><p>Annotation（注解）是 Java 提供的一种对元程序中元素关联信息和元数据（metadata）的途径和方法。Annatation(注解)是一个接口，程序可以通过反射来获取指定程序中元素的 Annotation对象，然后通过该 Annotation 对象来获取注解中的元数据信息。</p><h2 id="4-种标准元注解"><a href="#4-种标准元注解" class="headerlink" title="4 种标准元注解"></a>4 种标准元注解</h2><p>元注解的作用是负责注解其他注解。 Java5.0 定义了 4 个标准的 meta-annotation 类型，它们被用来提供对其它 annotation 类型作说明。</p><h3 id="Target-修饰的对象范围"><a href="#Target-修饰的对象范围" class="headerlink" title="@Target 修饰的对象范围"></a>@Target 修饰的对象范围</h3><p>@Target说明了Annotation所修饰的对象范围： Annotation可被用于 packages、types（类、接口、枚举、Annotation 类型）、类型成员（方法、构造方法、成员变量、枚举值）、方法参数和本地变量（如循环变量、catch 参数）。在 Annotation 类型的声明中使用了 target 可更加明晰其修饰的目标</p><h3 id="Retention-定义-被保留的时间长短"><a href="#Retention-定义-被保留的时间长短" class="headerlink" title="@Retention 定义 被保留的时间长短"></a>@Retention 定义 被保留的时间长短</h3><p>Retention 定义了该 Annotation 被保留的时间长短：表示需要在什么级别保存注解信息，用于描述注解的生命周期（即：被描述的注解在什么范围内有效），取值（RetentionPoicy）由：</p><ul><li>SOURCE:在源文件中有效（即源文件保留）</li><li>CLASS:在 class 文件中有效（即 class 保留）</li><li>RUNTIME:在运行时有效（即运行时保留）</li></ul><h3 id="Documented-描述-javadoc"><a href="#Documented-描述-javadoc" class="headerlink" title="@Documented 描述-javadoc"></a>@Documented 描述-javadoc</h3><p>@ Documented 用于描述其它类型的 annotation 应该被作为被标注的程序成员的公共 API，因此可以被例如 javadoc 此类的工具文档化。</p><h3 id="Inherited-阐述了某个被标注的类型是被继承的"><a href="#Inherited-阐述了某个被标注的类型是被继承的" class="headerlink" title="@Inherited 阐述了某个被标注的类型是被继承的"></a>@Inherited 阐述了某个被标注的类型是被继承的</h3><p>@Inherited 元注解是一个标记注解，@Inherited 阐述了某个被标注的类型是被继承的。如果一个使用了@Inherited 修饰的 annotation 类型被用于一个 class，则这个 annotation 将被用于该class 的子类。</p><h2 id="注解处理器"><a href="#注解处理器" class="headerlink" title="注解处理器"></a>注解处理器</h2><p>如果没有用来读取注解的方法和工作，那么注解也就不会比注释更有用处了。使用注解的过程中，很重要的一部分就是创建于使用注解处理器。Java SE5 扩展了反射机制的 API，以帮助程序员快速的构造自定义注解处理器。下面实现一个注解处理器。</p><details>    <summary>注解处理器</summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import java.lang.annotation.*;</span><br><span class="line">import java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line">/***</span><br><span class="line"> 1：定义注解</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">@Target(ElementType.FIELD)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">@interface FruitProvider &#123;</span><br><span class="line">    /**供应商编号*/</span><br><span class="line">    public int id() default -1;</span><br><span class="line">    /*** 供应商名称*/</span><br><span class="line">    public String name() default &quot;&quot;; /** * 供应商地址*/</span><br><span class="line">    public String address() default &quot;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">//2：注解使用</span><br><span class="line">public class Apple &#123;</span><br><span class="line">    @FruitProvider(id = 1, name = &quot;陕西红富士集团&quot;, address = &quot;陕西省西安市延安路&quot;)</span><br><span class="line">    private String appleProvider;</span><br><span class="line">    public void setAppleProvider(String appleProvider) &#123;</span><br><span class="line">        this.appleProvider = appleProvider;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getAppleProvider() &#123;</span><br><span class="line">        return appleProvider;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">/*********** 3：注解处理器 ***************/</span><br><span class="line">class FruitInfoUtil &#123;</span><br><span class="line">    public static void getFruitInfo(Class&lt;?&gt; clazz) &#123;</span><br><span class="line">        String strFruitProvicer = &quot;供应商信息：&quot;;</span><br><span class="line">        Field[] fields = clazz.getDeclaredFields();//通过反射获取处理注解</span><br><span class="line">        for (Field field : fields) &#123;</span><br><span class="line">            if (field.isAnnotationPresent(FruitProvider.class)) &#123;</span><br><span class="line">                FruitProvider fruitProvider = (FruitProvider) field.getAnnotation(FruitProvider.class);</span><br><span class="line">                //注解信息的处理地方</span><br><span class="line">                strFruitProvicer = &quot; 供应商编号：&quot; + fruitProvider.id() + &quot; 供应商名称：&quot;</span><br><span class="line">                        + fruitProvider.name() + &quot; 供应商地址：&quot;+ fruitProvider.address();</span><br><span class="line">                System.out.println(strFruitProvicer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class FruitRun &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        FruitInfoUtil.getFruitInfo(Apple.class);</span><br><span class="line">        /***********输出结果***************/</span><br><span class="line">        // 供应商编号：1 供应商名称：陕西红富士集团 供应商地址：陕西省西安市延</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h1 id="JAVA-内部类"><a href="#JAVA-内部类" class="headerlink" title="JAVA 内部类"></a>JAVA 内部类</h1><p>Java 类中不仅可以定义变量和方法，还可以定义类，这样定义在类内部的类就被称为内部类。根<br>据定义的方式不同，内部类分为静态内部类，成员内部类，局部内部类，匿名内部类四种。</p><h2 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h2><p>定义在类内部的静态类，就是静态内部类。</p><details>    <summary>静态内部类</summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class Out &#123;</span><br><span class="line">            private static int a;</span><br><span class="line">            private int b;</span><br><span class="line">            public static class Inner &#123;</span><br><span class="line">                public void print() &#123;</span><br><span class="line">                    System.out.println(a);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></details><ol><li><p>静态内部类可以访问外部类所有的静态变量和方法，即使是 private 的也一样。</p></li><li><p>静态内部类和一般类一致，可以定义静态变量、方法，构造方法等。</p></li><li><p>其它类使用静态内部类需要使用“外部类.静态内部类”方式，如下所示：</p><p> Out.Inner inner =new Out.Inner();inner.print();</p></li><li><p>Java集合类HashMap内部就有一个静态内部类Entry。Entry是HashMap存放元素的抽象，HashMap 内部维护 Entry 数组用了存放元素，但是 Entry 对使用者是透明的。像这种和外部类关系密切的，且不依赖外部类实例的，都可以使用静态内部类。</p></li></ol><h2 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h2><p>定义在类内部的非静态类，就是成员内部类。成员内部类不能定义静态方法和变量（final修饰的除外）。这是因为成员内部类是非静态的，类初始化的时候先初始化静态成员，如果允许成员内部类定义静态变量，那么成员内部类的静态变量初始化顺序是有歧义的。</p><details>    <summary>成员内部类</summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class Out &#123;</span><br><span class="line">    private static int a;</span><br><span class="line">    private int b;</span><br><span class="line">    public class Inner &#123;</span><br><span class="line">        public void print() &#123;</span><br><span class="line">            System.out.println(a);</span><br><span class="line">            System.out.println(b);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h2 id="局部内部类（定义在方法中的类）"><a href="#局部内部类（定义在方法中的类）" class="headerlink" title="局部内部类（定义在方法中的类）"></a>局部内部类（定义在方法中的类）</h2><p>定义在方法中的类，就是局部类。如果一个类只在某个方法中使用，则可以考虑使用局部类。</p><details>    <summary>局部内部类</summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class Out &#123;</span><br><span class="line">        private static int a;</span><br><span class="line">        private int b;</span><br><span class="line">        public void test(final int c) &#123;</span><br><span class="line">            final int d = 1;</span><br><span class="line">            class Inner &#123;</span><br><span class="line">                public void print() &#123;</span><br><span class="line">                    System.out.println(c);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></details><h2 id="匿名内部类（要继承一个父类或者实现一个接口、直接使用new-来生成一个对象的引用）"><a href="#匿名内部类（要继承一个父类或者实现一个接口、直接使用new-来生成一个对象的引用）" class="headerlink" title="匿名内部类（要继承一个父类或者实现一个接口、直接使用new 来生成一个对象的引用）"></a>匿名内部类（要继承一个父类或者实现一个接口、直接使用new 来生成一个对象的引用）</h2><p>匿名内部类我们必须要继承一个父类或者实现一个接口，当然也仅能只继承一个父类或者实现一个接口。同时它也是没有 class 关键字，这是因为匿名内部类是直接使用 new 来生成一个对象的引用。</p><details>    <summary>匿名内部类</summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public abstract class Bird &#123;</span><br><span class="line">        private String name;</span><br><span class="line">        public String getName() &#123;</span><br><span class="line">            return name;</span><br><span class="line">        &#125;</span><br><span class="line">        public void setName(String name) &#123;</span><br><span class="line">            this.name = name;</span><br><span class="line">        &#125;</span><br><span class="line">        public abstract int fly();</span><br><span class="line">    &#125;</span><br><span class="line">    public class Test &#123;</span><br><span class="line">        public void test(Bird bird)&#123;</span><br><span class="line">            System.out.println(bird.getName() + &quot;能够飞 &quot; + bird.fly() + &quot;米&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        public static void main(String[] args) &#123;</span><br><span class="line">            Test test = new Test();</span><br><span class="line">            test.test(new Bird() &#123;</span><br><span class="line">                public int fly() &#123;</span><br><span class="line">                    return 10000;</span><br><span class="line">                &#125;</span><br><span class="line">                public String getName() &#123;</span><br><span class="line">                    return &quot;大雁&quot;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></details><h1 id="JAVA-泛型"><a href="#JAVA-泛型" class="headerlink" title="JAVA 泛型"></a>JAVA 泛型</h1><p>泛型提供了编译时类型安全检测机制，该机制允许程序员在编译时检测到非法的类型。泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。比如我们要写一个排序方法，能够对整型数组、字符串数组甚至其他任何类型的数组进行排序，我们就可以使用 Java 泛型。</p><h2 id="泛型方法（）"><a href="#泛型方法（）" class="headerlink" title="泛型方法（）"></a>泛型方法（<e>）</e></h2><p>你可以写一个泛型方法，该方法在调用时可以接收不同类型的参数。根据传递给泛型方法的参数类型，编译器适当地处理每一个方法调用。</p><details>    <summary>泛型方法（<e>）</e></summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 泛型方法 printArray</span><br><span class="line">public static &lt; E &gt; void printArray( E[] inputArray )</span><br><span class="line">&#123;</span><br><span class="line">    for ( E element : inputArray )&#123;</span><br><span class="line">        System.out.printf( &quot;%s &quot;, element );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>1. <? extends T>表示该通配符所代表的类型是 T 类型的子类。2. <? super T>表示该通配符所代表的类型是 T 类型的父类。<h2 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类<t></t></h2><p>泛型类的声明和非泛型类的声明类似，除了在类名后面添加了类型参数声明部分。和泛型方法一样，泛型类的类型参数声明部分也包含一个或多个类型参数，参数间用逗号隔开。一个泛型参数，也被称为一个类型变量，是用于指定一个泛型类型名称的标识符。因为他们接受一个或多个参数，这些类被称为参数化的类或参数化的类型。</p><details>    <summary>泛型类<t></t></summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class Box&lt;T&gt; &#123;</span><br><span class="line">     private T t;</span><br><span class="line">     public void add(T t) &#123;</span><br><span class="line">     this.t = t;</span><br><span class="line">     &#125;</span><br><span class="line">     public T get() &#123;</span><br><span class="line">     return t;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></details><h2 id="类型通配符"><a href="#类型通配符" class="headerlink" title="类型通配符?"></a>类型通配符?</h2><p>类型通配符一般是使用 ? 代 替 具 体 的 类 型 参 数 。 例 如 List&lt;?&gt; 在逻辑上是List<string>,List<integer> 等所有 List&lt;具体类型实参&gt;的父类。</integer></string></p><h2 id="类型擦除"><a href="#类型擦除" class="headerlink" title="类型擦除"></a>类型擦除</h2><p>Java 中的泛型基本上都是在编译器这个层次来实现的。在生成的Java字节代码中是不包含泛型中的类型信息的。使用泛型的时候加上的类型参数，会被编译器在编译的时候去掉。这个过程就称为类型擦除。如在代码中定义的 List<object>和 List<string>等类型，在编译之后都会变成 List。JVM 看到的只是 List，而由泛型附加的类型信息对 JVM 来说是不可见的。类型擦除的基本过程也比较简单，首先是找到用来替换类型参数的具体类。这个具体类一般是 Object。如果指定了类型参数的上界的话，则使用这个上界。把代码中的类型参数都替换成具体的类。</string></object></p><h1 id="JAVA-序列化-创建可复用的-Java-对象"><a href="#JAVA-序列化-创建可复用的-Java-对象" class="headerlink" title="JAVA 序列化(创建可复用的 Java 对象)"></a>JAVA 序列化(创建可复用的 Java 对象)</h1><h2 id="保存-持久化-对象及其状态到内存或者磁盘"><a href="#保存-持久化-对象及其状态到内存或者磁盘" class="headerlink" title="保存(持久化)对象及其状态到内存或者磁盘"></a>保存(持久化)对象及其状态到内存或者磁盘</h2><p>Java 平台允许我们在内存中创建可复用的 Java 对象，但一般情况下，只有当 JVM 处于运行时，这些对象才可能存在，即，这些对象的生命周期不会比 JVM 的生命周期更长。但在现实应用中，就可能要求在JVM停止运行之后能够保存(持久化)指定的对象，并在将来重新读取被保存的对象。</p><p>Java 对象序列化就能够帮助我们实现该功能。</p><h2 id="序列化对象以字节数组保持-静态成员不保存"><a href="#序列化对象以字节数组保持-静态成员不保存" class="headerlink" title="序列化对象以字节数组保持-静态成员不保存"></a>序列化对象以字节数组保持-静态成员不保存</h2><p>使用 Java 对象序列化，在保存对象时，会把其状态保存为一组字节，在未来，再将这些字节组装成对象。必须注意地是，对象序列化保存的是对象的”状态”，即它的成员变量。由此可知，对象序列化不会关注类中的静态变量。</p><h2 id="序列化用户远程对象传输"><a href="#序列化用户远程对象传输" class="headerlink" title="序列化用户远程对象传输"></a>序列化用户远程对象传输</h2><p>除了在持久化对象时会用到对象序列化之外，当使用RMI(远程方法调用)，或在网络中传递对象时，都会用到对象序列化。Java序列化API为处理对象序列化提供了一个标准机制，该API简单易用。</p><h2 id="Serializable-实现序列化"><a href="#Serializable-实现序列化" class="headerlink" title="Serializable 实现序列化"></a>Serializable 实现序列化</h2><p>在 Java 中，只要一个类实现了java.io.Serializable接口，那么它就可以被序列化</p><h2 id="ObjectOutputStream-和-ObjectInputStream-对对象进行序列化及反序列化"><a href="#ObjectOutputStream-和-ObjectInputStream-对对象进行序列化及反序列化" class="headerlink" title="ObjectOutputStream 和 ObjectInputStream 对对象进行序列化及反序列化"></a>ObjectOutputStream 和 ObjectInputStream 对对象进行序列化及反序列化</h2><p>通过 ObjectOutputStream 和 ObjectInputStream 对对象进行序列化及反序列化。</p><h2 id="writeObject-和-readObject-自定义序列化策略"><a href="#writeObject-和-readObject-自定义序列化策略" class="headerlink" title="writeObject 和 readObject 自定义序列化策略"></a>writeObject 和 readObject 自定义序列化策略</h2><p>在类中增加 writeObject 和 readObject 方法可以实现自定义序列化策略。</p><h2 id="序列化-ID"><a href="#序列化-ID" class="headerlink" title="序列化 ID"></a>序列化 ID</h2><p>虚拟机是否允许反序列化，不仅取决于类路径和功能代码是否一致，一个非常重要的一点是两个类的序列化ID是否一致（就是 private static final long serialVersionUID）</p><h2 id="序列化并不保存静态变量"><a href="#序列化并不保存静态变量" class="headerlink" title="序列化并不保存静态变量"></a>序列化并不保存静态变量</h2><h2 id="序列化子父类说明"><a href="#序列化子父类说明" class="headerlink" title="序列化子父类说明"></a>序列化子父类说明</h2><p>要想将父类对象也序列化，就需要让父类也实现 Serializable 接口。</p><h2 id="Transient-关键字阻止该变量被序列化到文件中"><a href="#Transient-关键字阻止该变量被序列化到文件中" class="headerlink" title="Transient 关键字阻止该变量被序列化到文件中"></a>Transient 关键字阻止该变量被序列化到文件中</h2><ol><li>在变量声明前加上 Transient关键字，可以阻止该变量被序列化到文件中，在被反序列化后，transient变量的值被设为初始值，如int型的是0，对象型的是 null。</li><li>服务器端给客户端发送序列化对象数据，对象中有一些数据是敏感的，比如密码字符串等，希望对该密码字段在序列化时，进行加密，而客户端如果拥有解密的密钥，只有在客户端进行反序列化时，才可以对密码进行读取，这样可以一定程度保证序列化对象的数据安全。</li></ol><h1 id="JAVA-复制"><a href="#JAVA-复制" class="headerlink" title="JAVA 复制"></a>JAVA 复制</h1><p>将一个对象的引用复制给另外一个对象，一共有三种方式。第一种方式是直接赋值，第二种方式是浅拷贝，第三种是深拷贝。所以大家知道了哈，这三种概念实际上都是为了拷贝对象。</p><h2 id="直接赋值复制"><a href="#直接赋值复制" class="headerlink" title="直接赋值复制"></a>直接赋值复制</h2><p>直接赋值。在 Java 中，A a1 = a2，我们需要理解的是这实际上复制的是引用，也就是说 a1 和 a2指向的是同一个对象。因此，当 a1 变化的时候，a2 里面的成员变量也会跟着变化。</p><h2 id="浅复制（复制引用但不复制引用的对象）"><a href="#浅复制（复制引用但不复制引用的对象）" class="headerlink" title="浅复制（复制引用但不复制引用的对象）"></a>浅复制（复制引用但不复制引用的对象）</h2><p>创建一个新对象，然后将当前对象的非静态字段复制到该新对象，如果字段是值类型的，那么对该字段执行复制；如果该字段是引用类型的话，则复制引用但不复制引用的对象。因此，原始对象及其副本引用同一个对象。</p><details>    <summary>浅复制<t></t></summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class Resume implements Cloneable&#123;</span><br><span class="line">     public Object clone() &#123;</span><br><span class="line">         try &#123;</span><br><span class="line">             return (Resume)super.clone();</span><br><span class="line">         &#125; catch (Exception e) &#123;</span><br><span class="line">             e.printStackTrace();</span><br><span class="line">             return null;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></details><h2 id="深复制（复制对象和其应用对象）"><a href="#深复制（复制对象和其应用对象）" class="headerlink" title="深复制（复制对象和其应用对象）"></a>深复制（复制对象和其应用对象）</h2><p>深拷贝不仅复制对象本身，而且复制对象包含的引用指向的所有对象。</p><details>    <summary>深复制<t></t></summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class Student implements Cloneable &#123;</span><br><span class="line">         String name;</span><br><span class="line">         int age;</span><br><span class="line">         Professor p;</span><br><span class="line">         Student(String name, int age, Professor p) &#123;</span><br><span class="line">             this.name = name;</span><br><span class="line">             this.age = age;</span><br><span class="line">             this.p = p;</span><br><span class="line">         &#125;</span><br><span class="line">         public Object clone() &#123;</span><br><span class="line">             Student o = null;</span><br><span class="line">             try &#123;</span><br><span class="line">                 o = (Student) super.clone();</span><br><span class="line">             &#125; catch (CloneNotSupportedException e) &#123;</span><br><span class="line">                 System.out.println(e.toString());</span><br><span class="line">             &#125;</span><br><span class="line">             o.p = (Professor) p.clone();</span><br><span class="line">             return o;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure></details><h2 id="引用拷贝"><a href="#引用拷贝" class="headerlink" title="引用拷贝"></a>引用拷贝</h2><p>创建一个指向对象的引用变量的拷贝，他们都指向了一个相同的对象。 这就叫做引用拷贝。</p><h2 id="对象拷贝"><a href="#对象拷贝" class="headerlink" title="对象拷贝"></a>对象拷贝</h2><p>创建对象本身的一个副本，它们的地址是不同的，也就是说创建了新的对象，而不是把原对象的地址赋给了一个新的引用变量,这就叫做对象拷贝。</p><h2 id="深复制与浅复制的区别和相同点"><a href="#深复制与浅复制的区别和相同点" class="headerlink" title="深复制与浅复制的区别和相同点"></a>深复制与浅复制的区别和相同点</h2><p>深拷贝和浅拷贝都是对象拷贝</p><p>浅拷贝</p><p>被复制对象的所有变量都含有与原来的对象相同的值，而所有的对其他对象的引用仍然指向原来的对象。即对象的浅拷贝会对“主”对象进行拷贝，但不会复制主对象里面的对象。”里面的对象“会在原来的对象和它的副本之间共享。</p><p>简而言之，浅拷贝仅仅复制所考虑的对象，而不复制它所引用的对象。</p><p>深拷贝</p><p>深拷贝是一个整个独立的对象拷贝，深拷贝会拷贝所有的属性,并拷贝属性指向的动态分配的内存。当对象和它所引用的对象一起拷贝时即发生深拷贝。深拷贝相比于浅拷贝速度较慢并且花销较大。</p><p>简而言之，深拷贝把要复制的对象所引用的对象都复制了一遍。</p><h2 id="序列化（深-clone-一中实现）"><a href="#序列化（深-clone-一中实现）" class="headerlink" title="序列化（深 clone 一中实现）"></a>序列化（深 clone 一中实现）</h2><p>在 Java 语言里深复制一个对象，常常可以先使对象实现Serializable接口，然后把对象（实际上只是对象的一个拷贝）写到一个流里，再从流里读出来，便可以重建对象。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JAVA 学习笔记（异常，反射，注解，内部类，泛型，序列化，复制）&lt;/p&gt;
    
    </summary>
    
      <category term="2021年12月" scheme="http://yoursite.com/categories/2021%E5%B9%B412%E6%9C%88/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>423. 从英文中重建数字</title>
    <link href="http://yoursite.com/2021/12/24/423.%20%E4%BB%8E%E8%8B%B1%E6%96%87%E4%B8%AD%E9%87%8D%E5%BB%BA%E6%95%B0%E5%AD%97/"/>
    <id>http://yoursite.com/2021/12/24/423. 从英文中重建数字/</id>
    <published>2021-12-24T10:12:12.000Z</published>
    <updated>2021-12-24T12:12:22.782Z</updated>
    
    <content type="html"><![CDATA[<p>给你一个字符串 s ，其中包含字母顺序打乱的用英文单词表示的若干数字（0-9）。按 升序 返回原始的数字。</p><a id="more"></a><p>[TOC]</p><p>示例 1：</p><pre><code>输入：s = &quot;owoztneoer&quot;输出：&quot;012&quot;</code></pre><p>示例 2：</p><pre><code>输入：s = &quot;fviefuro&quot;输出：&quot;45&quot;</code></pre><p>提示：</p><pre><code>1 &lt;= s.length &lt;= 105s[i] 为 [&quot;e&quot;,&quot;g&quot;,&quot;f&quot;,&quot;i&quot;,&quot;h&quot;,&quot;o&quot;,&quot;n&quot;,&quot;s&quot;,&quot;r&quot;,&quot;u&quot;,&quot;t&quot;,&quot;w&quot;,&quot;v&quot;,&quot;x&quot;,&quot;z&quot;] 这些字符之一s 保证是一个符合题目要求的字符串</code></pre><h1 id="方法一：依次确定每一个数字的次数-1"><a href="#方法一：依次确定每一个数字的次数-1" class="headerlink" title="方法一：依次确定每一个数字的次数^1"></a>方法一：依次确定每一个数字的次数<a href="https://leetcode-cn.com/problems/reconstruct-original-digits-from-english/solution/cong-ying-wen-zhong-zhong-jian-shu-zi-by-9g1r/" target="_blank" rel="noopener">^1</a></h1><p><strong>思路与算法</strong></p><p>首先我们可以统计每个字母分别在哪些数字中出现：</p><table><thead><tr><th align="center">字母</th><th align="center">数字</th></tr></thead><tbody><tr><td align="center">e</td><td align="center">0 1 3 5 7 8 9</td></tr><tr><td align="center">f</td><td align="center">4 5</td></tr><tr><td align="center">g</td><td align="center">8</td></tr><tr><td align="center">h</td><td align="center">3 8</td></tr><tr><td align="center">i</td><td align="center">5 6 8 9</td></tr><tr><td align="center">n</td><td align="center">1 7 9</td></tr><tr><td align="center">o</td><td align="center">0 1 2 4</td></tr><tr><td align="center">r</td><td align="center">0 3 4</td></tr><tr><td align="center">s</td><td align="center">6 7</td></tr><tr><td align="center">t</td><td align="center">2 3 8</td></tr><tr><td align="center">u</td><td align="center">4</td></tr><tr><td align="center">v</td><td align="center">5 7</td></tr><tr><td align="center">w</td><td align="center">2</td></tr><tr><td align="center">x</td><td align="center">6</td></tr><tr><td align="center">z</td><td align="center">0</td></tr></tbody></table><p>可以发现，z,w,u,x,g 都只在一个数字中，即 <em>0, 2, 4, 6, 8</em> 中出现。因此我们可以使用一个哈希表统计每个字母出现的次数，那么 z,w,u,x,g 出现的次数，即分别为 <em>0, 2, 4, 6, 8</em> 出现的次数。</p><p>随后我们可以注意那些只在两个数字中出现的字符：</p><ul><li><p>h  只在 <em>3, 8</em> 中出现。由于我们已经知道了 <em>8</em> 出现的次数，因此可以计算出 <em>3</em> 出现的次数。</p></li><li><p>f  只在 <em>4, 5</em> 中出现。由于我们已经知道了 <em>4</em> 出现的次数，因此可以计算出 <em>5</em> 出现的次数。</p></li><li><p>s  只在 <em>6, 7</em> 中出现。由于我们已经知道了 <em>6</em> 出现的次数，因此可以计算出 <em>7</em> 出现的次数。</p></li></ul><p>此时，我们还剩下 <em>1</em> 和 <em>9</em> 的出现次数没有求出：</p><ul><li>o  只在 <em>0, 1, 2, 4</em> 中出现，由于我们已经知道了 <em>0, 2, 4</em> 出现的次数，因此可以计算出 <em>1</em> 出现的次数。</li></ul><p>最后的 <em>9</em> 就可以通过 n,i,e 中的任一字符计算得到了。这里推荐使用 i  进行计算，因为 n 在 <em>9</em> 中出现了 <em>2</em> 次，e 在 <em>3</em> 中出现了 <em>2</em> 次，容易在计算中遗漏。</p><p>当我们统计完每个数字出现的次数后，我们按照升序将它们进行拼接即可。</p><p><strong>代码</strong></p><details>    <summary>C++</summary><figure class="highlight c++"><figcaption><span>[sol1-C++]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">originalDigits</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; c;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> ch: s) &#123;</span><br><span class="line">            ++c[ch];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cnt(<span class="number">10</span>);</span><br><span class="line">        cnt[<span class="number">0</span>] = c[<span class="string">'z'</span>];</span><br><span class="line">        cnt[<span class="number">2</span>] = c[<span class="string">'w'</span>];</span><br><span class="line">        cnt[<span class="number">4</span>] = c[<span class="string">'u'</span>];</span><br><span class="line">        cnt[<span class="number">6</span>] = c[<span class="string">'x'</span>];</span><br><span class="line">        cnt[<span class="number">8</span>] = c[<span class="string">'g'</span>];</span><br><span class="line"></span><br><span class="line">        cnt[<span class="number">3</span>] = c[<span class="string">'h'</span>] - cnt[<span class="number">8</span>];</span><br><span class="line">        cnt[<span class="number">5</span>] = c[<span class="string">'f'</span>] - cnt[<span class="number">4</span>];</span><br><span class="line">        cnt[<span class="number">7</span>] = c[<span class="string">'s'</span>] - cnt[<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line">        cnt[<span class="number">1</span>] = c[<span class="string">'o'</span>] - cnt[<span class="number">0</span>] - cnt[<span class="number">2</span>] - cnt[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">        cnt[<span class="number">9</span>] = c[<span class="string">'i'</span>] - cnt[<span class="number">5</span>] - cnt[<span class="number">6</span>] - cnt[<span class="number">8</span>];</span><br><span class="line"></span><br><span class="line">        <span class="built_in">string</span> ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cnt[i]; ++j) &#123;</span><br><span class="line">                ans += <span class="keyword">char</span>(i + <span class="string">'0'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></details><details>    <summary>Java</summary><figure class="highlight java"><figcaption><span>[sol1-Java]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">originalDigits</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Map&lt;Character, Integer&gt; c = <span class="keyword">new</span> HashMap&lt;Character, Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); ++i) &#123;</span><br><span class="line">            <span class="keyword">char</span> ch = s.charAt(i);</span><br><span class="line">            c.put(ch, c.getOrDefault(ch, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] cnt = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">        cnt[<span class="number">0</span>] = c.getOrDefault(<span class="string">'z'</span>, <span class="number">0</span>);</span><br><span class="line">        cnt[<span class="number">2</span>] = c.getOrDefault(<span class="string">'w'</span>, <span class="number">0</span>);</span><br><span class="line">        cnt[<span class="number">4</span>] = c.getOrDefault(<span class="string">'u'</span>, <span class="number">0</span>);</span><br><span class="line">        cnt[<span class="number">6</span>] = c.getOrDefault(<span class="string">'x'</span>, <span class="number">0</span>);</span><br><span class="line">        cnt[<span class="number">8</span>] = c.getOrDefault(<span class="string">'g'</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        cnt[<span class="number">3</span>] = c.getOrDefault(<span class="string">'h'</span>, <span class="number">0</span>) - cnt[<span class="number">8</span>];</span><br><span class="line">        cnt[<span class="number">5</span>] = c.getOrDefault(<span class="string">'f'</span>, <span class="number">0</span>) - cnt[<span class="number">4</span>];</span><br><span class="line">        cnt[<span class="number">7</span>] = c.getOrDefault(<span class="string">'s'</span>, <span class="number">0</span>) - cnt[<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line">        cnt[<span class="number">1</span>] = c.getOrDefault(<span class="string">'o'</span>, <span class="number">0</span>) - cnt[<span class="number">0</span>] - cnt[<span class="number">2</span>] - cnt[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">        cnt[<span class="number">9</span>] = c.getOrDefault(<span class="string">'i'</span>, <span class="number">0</span>) - cnt[<span class="number">5</span>] - cnt[<span class="number">6</span>] - cnt[<span class="number">8</span>];</span><br><span class="line"></span><br><span class="line">        StringBuffer ans = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cnt[i]; ++j) &#123;</span><br><span class="line">                ans.append((<span class="keyword">char</span>) (i + <span class="string">'0'</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>C#</summary><figure class="highlight plain"><figcaption><span>[sol1-C#]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">public class Solution &#123;</span><br><span class="line">    public string OriginalDigits(string s) &#123;</span><br><span class="line">        Dictionary&lt;char, int&gt; c = new Dictionary&lt;char, int&gt;();</span><br><span class="line">        foreach (char ch in s) &#123;</span><br><span class="line">            if (!c.ContainsKey(ch)) &#123;</span><br><span class="line">                c.Add(ch, 0);</span><br><span class="line">            &#125;</span><br><span class="line">            ++c[ch];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        int[] cnt = new int[10];</span><br><span class="line">        cnt[0] = c.ContainsKey(&apos;z&apos;) ? c[&apos;z&apos;] : 0;</span><br><span class="line">        cnt[2] = c.ContainsKey(&apos;w&apos;) ? c[&apos;w&apos;] : 0;</span><br><span class="line">        cnt[4] = c.ContainsKey(&apos;u&apos;) ? c[&apos;u&apos;] : 0;</span><br><span class="line">        cnt[6] = c.ContainsKey(&apos;x&apos;) ? c[&apos;x&apos;] : 0;</span><br><span class="line">        cnt[8] = c.ContainsKey(&apos;g&apos;) ? c[&apos;g&apos;] : 0;</span><br><span class="line"></span><br><span class="line">        cnt[3] = (c.ContainsKey(&apos;h&apos;) ? c[&apos;h&apos;] : 0) - cnt[8];</span><br><span class="line">        cnt[5] = (c.ContainsKey(&apos;f&apos;) ? c[&apos;f&apos;] : 0) - cnt[4];</span><br><span class="line">        cnt[7] = (c.ContainsKey(&apos;s&apos;) ? c[&apos;s&apos;] : 0) - cnt[6];</span><br><span class="line"></span><br><span class="line">        cnt[1] = (c.ContainsKey(&apos;o&apos;) ? c[&apos;o&apos;] : 0) - cnt[0] - cnt[2] - cnt[4];</span><br><span class="line"></span><br><span class="line">        cnt[9] = (c.ContainsKey(&apos;i&apos;) ? c[&apos;i&apos;] : 0) - cnt[5] - cnt[6] - cnt[8];</span><br><span class="line"></span><br><span class="line">        StringBuilder ans = new StringBuilder();</span><br><span class="line">        for (int i = 0; i &lt; 10; ++i) &#123;</span><br><span class="line">            for (int j = 0; j &lt; cnt[i]; ++j) &#123;</span><br><span class="line">                ans.Append((char) (i + &apos;0&apos;));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return ans.ToString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>Python3</summary><figure class="highlight python"><figcaption><span>[sol1-Python3]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">originalDigits</span><span class="params">(self, s: str)</span> -&gt; str:</span></span><br><span class="line">        c = Counter(s)</span><br><span class="line"></span><br><span class="line">        cnt = [<span class="number">0</span>] * <span class="number">10</span></span><br><span class="line">        cnt[<span class="number">0</span>] = c[<span class="string">"z"</span>]</span><br><span class="line">        cnt[<span class="number">2</span>] = c[<span class="string">"w"</span>]</span><br><span class="line">        cnt[<span class="number">4</span>] = c[<span class="string">"u"</span>]</span><br><span class="line">        cnt[<span class="number">6</span>] = c[<span class="string">"x"</span>]</span><br><span class="line">        cnt[<span class="number">8</span>] = c[<span class="string">"g"</span>]</span><br><span class="line"></span><br><span class="line">        cnt[<span class="number">3</span>] = c[<span class="string">"h"</span>] - cnt[<span class="number">8</span>]</span><br><span class="line">        cnt[<span class="number">5</span>] = c[<span class="string">"f"</span>] - cnt[<span class="number">4</span>]</span><br><span class="line">        cnt[<span class="number">7</span>] = c[<span class="string">"s"</span>] - cnt[<span class="number">6</span>]</span><br><span class="line">        </span><br><span class="line">        cnt[<span class="number">1</span>] = c[<span class="string">"o"</span>] - cnt[<span class="number">0</span>] - cnt[<span class="number">2</span>] - cnt[<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">        cnt[<span class="number">9</span>] = c[<span class="string">"i"</span>] - cnt[<span class="number">5</span>] - cnt[<span class="number">6</span>] - cnt[<span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>.join(str(x) * cnt[x] <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>))</span><br></pre></td></tr></table></figure></details><details>    <summary>Golang</summary><figure class="highlight go"><figcaption><span>[sol1-Golang]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">originalDigits</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    c := <span class="keyword">map</span>[<span class="keyword">rune</span>]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> _, ch := <span class="keyword">range</span> s &#123;</span><br><span class="line">        c[ch]++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cnt := [<span class="number">10</span>]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">    cnt[<span class="number">0</span>] = c[<span class="string">'z'</span>]</span><br><span class="line">    cnt[<span class="number">2</span>] = c[<span class="string">'w'</span>]</span><br><span class="line">    cnt[<span class="number">4</span>] = c[<span class="string">'u'</span>]</span><br><span class="line">    cnt[<span class="number">6</span>] = c[<span class="string">'x'</span>]</span><br><span class="line">    cnt[<span class="number">8</span>] = c[<span class="string">'g'</span>]</span><br><span class="line"></span><br><span class="line">    cnt[<span class="number">3</span>] = c[<span class="string">'h'</span>] - cnt[<span class="number">8</span>]</span><br><span class="line">    cnt[<span class="number">5</span>] = c[<span class="string">'f'</span>] - cnt[<span class="number">4</span>]</span><br><span class="line">    cnt[<span class="number">7</span>] = c[<span class="string">'s'</span>] - cnt[<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">    cnt[<span class="number">1</span>] = c[<span class="string">'o'</span>] - cnt[<span class="number">0</span>] - cnt[<span class="number">2</span>] - cnt[<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">    cnt[<span class="number">9</span>] = c[<span class="string">'i'</span>] - cnt[<span class="number">5</span>] - cnt[<span class="number">6</span>] - cnt[<span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">    ans := []<span class="keyword">byte</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i, c := <span class="keyword">range</span> cnt &#123;</span><br><span class="line">        ans = <span class="built_in">append</span>(ans, bytes.Repeat([]<span class="keyword">byte</span>&#123;<span class="keyword">byte</span>(<span class="string">'0'</span> + i)&#125;, c)...)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">string</span>(ans)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>JavaScript</summary><figure class="highlight javascript"><figcaption><span>[sol1-JavaScript]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> originalDigits = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> c = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> ch <span class="keyword">of</span> s) &#123;</span><br><span class="line">        c.set(ch, (c.get(ch) || <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> cnt = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10</span>).fill(<span class="number">0</span>);</span><br><span class="line">    cnt[<span class="number">0</span>] = c.get(<span class="string">'z'</span>) || <span class="number">0</span>;</span><br><span class="line">    cnt[<span class="number">2</span>] = c.get(<span class="string">'w'</span>) || <span class="number">0</span>;</span><br><span class="line">    cnt[<span class="number">4</span>] = c.get(<span class="string">'u'</span>) || <span class="number">0</span>;</span><br><span class="line">    cnt[<span class="number">6</span>] = c.get(<span class="string">'x'</span>) || <span class="number">0</span>;</span><br><span class="line">    cnt[<span class="number">8</span>] = c.get(<span class="string">'g'</span>) || <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    cnt[<span class="number">3</span>] = (c.get(<span class="string">'h'</span>) || <span class="number">0</span>) - cnt[<span class="number">8</span>];</span><br><span class="line">    cnt[<span class="number">5</span>] = (c.get(<span class="string">'f'</span>) || <span class="number">0</span>) - cnt[<span class="number">4</span>];</span><br><span class="line">    cnt[<span class="number">7</span>] = (c.get(<span class="string">'s'</span>) || <span class="number">0</span>) - cnt[<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line">    cnt[<span class="number">1</span>] = (c.get(<span class="string">'o'</span>) || <span class="number">0</span>) - cnt[<span class="number">0</span>] - cnt[<span class="number">2</span>] - cnt[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">    cnt[<span class="number">9</span>] = (c.get(<span class="string">'i'</span>) || <span class="number">0</span>) - cnt[<span class="number">5</span>] - cnt[<span class="number">6</span>] - cnt[<span class="number">8</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> ans = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; cnt[i]; ++j) &#123;</span><br><span class="line">            ans.push(<span class="built_in">String</span>.fromCharCode(i + <span class="string">'0'</span>.charCodeAt()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans.join(<span class="string">''</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></details><h1 id="方法二：线性代数-2"><a href="#方法二：线性代数-2" class="headerlink" title="方法二：线性代数^2"></a>方法二：线性代数<a href="https://leetcode-cn.com/problems/reconstruct-original-digits-from-english/solution/jian-dan-de-xian-xing-dai-shu-kuai-lai-f-6e01/" target="_blank" rel="noopener">^2</a></h1><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>已知所有字符只能有<code>chs = [&quot;e&quot;,&quot;g&quot;,&quot;f&quot;,&quot;i&quot;,&quot;h&quot;,&quot;o&quot;,&quot;n&quot;,&quot;s&quot;,&quot;r&quot;,&quot;u&quot;,&quot;t&quot;,&quot;w&quot;,&quot;v&quot;,&quot;x&quot;,&quot;z&quot;]</code>这15个字符（这大大方便了我们手算增广矩阵😭）</p><p>且构成的数字为0到9</p><ul><li>建一个<code>15×10</code>的矩阵<code>A</code>,可以认为A是一个<strong>词向量矩阵</strong>，第<code>i</code>行表示对应的字符<code>chs[i]</code>，比如第0行对应字符”e”；第<code>j</code>列向量表示数字<code>j</code>，比如第0列表示数字0，对应的单词为”zero”, 其列向量记为<code>[1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1]</code>。</li><li>给定单词表范围矩阵<code>A</code>就固定下来，不会变了，与题目给出的字符串无关</li><li>构建<code>10×1</code>的列向量<code>X = [n0,n1,...,n9]</code>，<code>X[i]</code>就表示数字<code>i</code>有多少个</li><li>就有这样矩阵方程<code>AX = b</code>，其中<code>b</code>就是给出字符串的字符统计（也是一个<strong>列向量</strong>）,<code>b[i]</code>表示<code>s</code>中<code>chs[i]</code>的个数</li><li>那么我们的任务就是求解<code>AX = b</code>，求解一个非齐次线性方程</li></ul><h2 id="计算A矩阵"><a href="#计算A矩阵" class="headerlink" title="计算A矩阵"></a>计算A矩阵</h2><details>    <summary>Python3</summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">chs = [<span class="string">"e"</span>,<span class="string">"g"</span>,<span class="string">"f"</span>,<span class="string">"i"</span>,<span class="string">"h"</span>,<span class="string">"o"</span>,<span class="string">"n"</span>,<span class="string">"s"</span>,<span class="string">"r"</span>,<span class="string">"u"</span>,<span class="string">"t"</span>,<span class="string">"w"</span>,<span class="string">"v"</span>,<span class="string">"x"</span>,<span class="string">"z"</span>]</span><br><span class="line">num2en = [<span class="string">'zero'</span>, <span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>, <span class="string">'four'</span>, <span class="string">'five'</span>, <span class="string">'six'</span>, <span class="string">'seven'</span>, <span class="string">'eight'</span>, <span class="string">'nine'</span>]</span><br><span class="line">A = []</span><br><span class="line"><span class="keyword">for</span> ch <span class="keyword">in</span> chs:</span><br><span class="line">    row = []</span><br><span class="line">    <span class="keyword">for</span> en <span class="keyword">in</span> num2en:</span><br><span class="line">        row.append(en.count(ch))</span><br><span class="line">    A.append(row)</span><br><span class="line">-----------------------------------------</span><br><span class="line">A = [</span><br><span class="line">        [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>], </span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></details><h2 id="计算列向量b"><a href="#计算列向量b" class="headerlink" title="计算列向量b"></a>计算列向量b</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chs = [&quot;e&quot;,&quot;g&quot;,&quot;f&quot;,&quot;i&quot;,&quot;h&quot;,&quot;o&quot;,&quot;n&quot;,&quot;s&quot;,&quot;r&quot;,&quot;u&quot;,&quot;t&quot;,&quot;w&quot;,&quot;v&quot;,&quot;x&quot;,&quot;z&quot;]</span><br><span class="line">b = [s.count(ch) for ch in chs]</span><br></pre></td></tr></table></figure><p>实际在手写增广矩阵的时候可以先不用带入值，就使用字符符号</p><h2 id="得到增广矩阵"><a href="#得到增广矩阵" class="headerlink" title="得到增广矩阵"></a>得到增广矩阵</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">2</span> <span class="number">1</span> <span class="number">1</span> | e</span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> | g</span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> | f</span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> | i</span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> | h</span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> | o</span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">2</span> | n</span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> | s</span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> | r</span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> | u</span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> | t</span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> | w</span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> | v</span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> | x</span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> | z</span><br></pre></td></tr></table></figure><h2 id="计算增广矩阵"><a href="#计算增广矩阵" class="headerlink" title="计算增广矩阵"></a>计算增广矩阵</h2><p>使用<strong>初等行变换</strong>把增广矩阵的系数矩阵化为阶梯型，因为题目保证了「s是一个符合题目要求的字符串」，<strong>所以一定有解且是唯一解</strong>。</p><p>我偷懒化到10个行向量线性无关就行了，最后增广矩阵化为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">2</span> <span class="number">1</span> <span class="number">1</span> | e</span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> | g</span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> | f</span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> | i</span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> | h</span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> | o - z - w - u</span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> | (n - s + x - o + z + w + u) / <span class="number">2</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> | s - x</span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> | r - z - u</span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> | u</span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> | t - w - r + z + u</span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> | w</span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> | v - s + x</span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> | x</span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> | z</span><br></pre></td></tr></table></figure><p>调整为阶梯阵，把值代入增广矩阵的右边，就可以求解出列向量<code>X</code>了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> | z</span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> | o - z - w - u</span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> | w</span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> | r - z - u</span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> | u</span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> | v - s + x</span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> | x</span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> | s - x</span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> | t - w - r + z + u</span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> | (n - s + x - o + z + w + u) / <span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><details>    <summary>Python3</summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">originalDigits</span><span class="params">(self, s: str)</span> -&gt; str:</span></span><br><span class="line">        cnt = Counter(s)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"0"</span> * cnt[<span class="string">"z"</span>] + \</span><br><span class="line">               <span class="string">"1"</span> * (cnt[<span class="string">"o"</span>] - cnt[<span class="string">"z"</span>] - cnt[<span class="string">"u"</span>] - cnt[<span class="string">"w"</span>]) + \</span><br><span class="line">               <span class="string">"2"</span> * cnt[<span class="string">"w"</span>] + \</span><br><span class="line">               <span class="string">"3"</span> * (cnt[<span class="string">"r"</span>] - cnt[<span class="string">"z"</span>] - cnt[<span class="string">"u"</span>]) + \</span><br><span class="line">               <span class="string">"4"</span> * cnt[<span class="string">"u"</span>] + \</span><br><span class="line">               <span class="string">"5"</span> * (cnt[<span class="string">"v"</span>] - cnt[<span class="string">"s"</span>] + cnt[<span class="string">"x"</span>]) + \</span><br><span class="line">               <span class="string">"6"</span> * cnt[<span class="string">"x"</span>] + \</span><br><span class="line">               <span class="string">"7"</span> * (cnt[<span class="string">"s"</span>] - cnt[<span class="string">"x"</span>]) + \</span><br><span class="line">               <span class="string">"8"</span> * (cnt[<span class="string">"t"</span>] - cnt[<span class="string">"w"</span>] - cnt[<span class="string">"r"</span>] + cnt[<span class="string">"z"</span>] + cnt[<span class="string">"u"</span>]) + \</span><br><span class="line">               <span class="string">"9"</span> * ((cnt[<span class="string">"n"</span>] - cnt[<span class="string">"s"</span>] + cnt[<span class="string">"x"</span>] - cnt[<span class="string">"o"</span>] + cnt[<span class="string">"z"</span>] + cnt[<span class="string">"u"</span>] + cnt[<span class="string">"w"</span>]) // <span class="number">2</span>)</span><br></pre></td></tr></table></figure></details>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给你一个字符串 s ，其中包含字母顺序打乱的用英文单词表示的若干数字（0-9）。按 升序 返回原始的数字。&lt;/p&gt;
    
    </summary>
    
      <category term="2021年12月" scheme="http://yoursite.com/categories/2021%E5%B9%B412%E6%9C%88/"/>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Hash Table" scheme="http://yoursite.com/tags/Hash-Table/"/>
    
      <category term="String" scheme="http://yoursite.com/tags/String/"/>
    
      <category term="Math" scheme="http://yoursite.com/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>JAVA 多线程并发学习笔记（线程，锁，进程调度）</title>
    <link href="http://yoursite.com/2021/12/22/JAVA%20%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E7%BA%BF%E7%A8%8B%EF%BC%8C%E9%94%81%EF%BC%8C%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6%EF%BC%89/"/>
    <id>http://yoursite.com/2021/12/22/JAVA 多线程并发学习笔记（线程，锁，进程调度）/</id>
    <published>2021-12-22T13:30:12.000Z</published>
    <updated>2021-12-29T10:06:24.095Z</updated>
    
    <content type="html"><![CDATA[<p>JAVA 多线程并发</p><a id="more"></a><p>[TOC]</p><h1 id="JAVA-线程实现-创建方式"><a href="#JAVA-线程实现-创建方式" class="headerlink" title="JAVA 线程实现/创建方式"></a>JAVA 线程实现/创建方式</h1><h2 id="继承-Thread-类"><a href="#继承-Thread-类" class="headerlink" title="继承 Thread 类"></a>继承 Thread 类</h2><p>Thread 类本质上是实现了 Runnable 接口的一个实例，代表一个线程的实例。启动线程的唯一方法就是通过Thread类的start()实例方法。start()方法是一个 native方法，它将启动一个新线程，并执行 run()方法。</p><details>    <summary>Thread</summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br></pre></td><td class="code"><pre><span class="line">    public class MyThread extends Thread &#123;</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                System.out.println(&quot;MyThread.run()&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        MyThread myThread1 = new MyThread();</span><br><span class="line">        myThread1.start();</span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line">&lt;/details&gt;   </span><br><span class="line"></span><br><span class="line">## 实现 Runnable 接口。</span><br><span class="line">如果自己的类已经 extends 另一个类，就无法直接 extends Thread，此时，可以实现一个Runnable 接口。</span><br><span class="line"> </span><br><span class="line">&lt;details&gt;</span><br><span class="line">    &lt;summary&gt;Runnable&lt;/summary&gt;</span><br><span class="line">    </span><br><span class="line">```    </span><br><span class="line">    public class MyThread extends OtherClass implements Runnable &#123;</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                System.out.println(&quot;MyThread.run()&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //启动 MyThread，需要首先实例化一个 Thread，并传入自己的 MyThread 实例：</span><br><span class="line">        MyThread myThread = new MyThread();</span><br><span class="line">        Thread thread = new Thread(myThread);</span><br><span class="line">        thread.start();</span><br><span class="line">        //事实上，当传入一个 Runnable target 参数给 Thread 后，Thread 的 run()方法就会调用</span><br><span class="line">        target.run()</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            if (target != null) &#123;</span><br><span class="line">                target.run();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">``` </span><br><span class="line">&lt;/details&gt;  </span><br><span class="line"></span><br><span class="line">## ExecutorService、Callable&lt;Class&gt;、Future 有返回值线程</span><br><span class="line"></span><br><span class="line">有返回值的任务必须实现Callable接口，类似的，无返回值的任务必须 Runnable 接口。执行Callable 任务后，可以获取一个 Future的对象，在该对象上调用 get 就可以获取到 Callable 任务返回的 Object 了，再结合线程池接口ExecutorService就可以实现传说中有返回结果的多线程了。</span><br><span class="line">   </span><br><span class="line">&lt;details&gt;</span><br><span class="line">    &lt;summary&gt;ExecutorService&lt;/summary&gt;</span><br><span class="line">    </span><br><span class="line">```   </span><br><span class="line">    //创建一个线程池</span><br><span class="line">        ExecutorService pool = Executors.newFixedThreadPool(taskSize);</span><br><span class="line">        // 创建多个有返回值的任务</span><br><span class="line">        List&lt;Future&gt; list = new ArrayList&lt;Future&gt;();</span><br><span class="line">        for (int i = 0; i &lt; taskSize; i++) &#123;</span><br><span class="line">            Callable c = new MyCallable(i + &quot; &quot;);</span><br><span class="line">            // 执行任务并获取 Future 对象</span><br><span class="line">            Future f = pool.submit(c);</span><br><span class="line">            list.add(f);</span><br><span class="line">        &#125;</span><br><span class="line">        // 关闭线程池</span><br><span class="line">        pool.shutdown();</span><br><span class="line">        // 获取所有并发任务的运行结果</span><br><span class="line">        for (Future f : list) &#123;</span><br><span class="line">            // 从 Future 对象上获取任务的返回值，并输出到控制台</span><br><span class="line">            System.out.println(&quot;res：&quot; + f.get().toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line">&lt;/details&gt;  </span><br><span class="line"></span><br><span class="line">## 基于线程池的方式</span><br><span class="line">线程和数据库连接这些资源都是非常宝贵的资源。那么每次需要的时候创建，不需要的时候销毁，是非常浪费资源的。那么我们就可以使用缓存的策略，也就是使用线程池。</span><br><span class="line"></span><br><span class="line">&lt;details&gt;</span><br><span class="line">    &lt;summary&gt;基于线程池的方式&lt;/summary&gt;</span><br><span class="line">    </span><br><span class="line">```  </span><br><span class="line">      // 创建线程池</span><br><span class="line">        ExecutorService threadPool = Executors.newFixedThreadPool(10);</span><br><span class="line">        while(true) &#123;</span><br><span class="line">            threadPool.execute(new Runnable() &#123; // 提交多个线程任务，并执行</span><br><span class="line">                @Override</span><br><span class="line">                public void run() &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + &quot; is running ..&quot;);</span><br><span class="line">                    try &#123;</span><br><span class="line">                        Thread.sleep(3000);</span><br><span class="line">                    &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line">&lt;/details&gt;  </span><br><span class="line"></span><br><span class="line"># 4 种线程池</span><br><span class="line">Java 里面线程池的顶级接口是 Executor，但是严格意义上讲 Executor 并不是一个线程池，而只是一个执行线程的工具。真正的线程池接口是 ExecutorService。</span><br><span class="line"></span><br><span class="line">## newCachedThreadPool</span><br><span class="line">创建一个可根据需要创建新线程的线程池，但是在以前构造的线程可用时将重用它们。对于执行很多短期异步任务的程序而言，这些线程池通常可提高程序性能。调用 execute 将重用以前构造的线程（如果线程可用）。如果现有线程没有可用的，则创建一个新线程并添加到池中。终止并从缓存中移除那些已有60秒钟未被使用的线程。因此，长时间保持空闲的线程池不会使用任何资源。</span><br><span class="line"></span><br><span class="line">## newFixedThreadPool</span><br><span class="line">创建一个可重用固定线程数的线程池，以共享的无界队列方式来运行这些线程。在任意点，在大多数nThreads线程会处于处理任务的活动状态。如果在所有线程处于活动状态时提交附加任务，则在有可用线程之前，附加任务将在队列中等待。如果在关闭前的执行期间由于失败而导致任何线程终止，那么一个新线程将代替它执行后续的任务（如果需要）。在某个线程被显式地关闭之前，池中的线程将一直存在。</span><br><span class="line"></span><br><span class="line">## newScheduledThreadPool</span><br><span class="line">创建一个线程池，它可安排在给定延迟后运行命令或者定期地执行。</span><br><span class="line"> </span><br><span class="line">&lt;details&gt;</span><br><span class="line">    &lt;summary&gt;newScheduledThreadPool&lt;/summary&gt;</span><br><span class="line">    </span><br><span class="line">```  </span><br><span class="line">     ScheduledExecutorService scheduledThreadPool= Executors.newScheduledThreadPool(3);</span><br><span class="line">     scheduledThreadPool.schedule(newRunnable()&#123;</span><br><span class="line">         @Override</span><br><span class="line">         public void run() &#123;</span><br><span class="line">         System.out.println(&quot;延迟三秒&quot;);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;, 3, TimeUnit.SECONDS);</span><br><span class="line">    scheduledThreadPool.scheduleAtFixedRate(newRunnable()&#123;</span><br><span class="line">         @Override</span><br><span class="line">         public void run() &#123;</span><br><span class="line">         System.out.println(&quot;延迟 1 秒后每三秒执行一次&quot;);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;,1,3,TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line">&lt;/details&gt;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## newSingleThreadExecutor</span><br><span class="line">Executors.newSingleThreadExecutor()返回一个线程池（这个线程池只有一个线程）,这个线程池可以在线程死后（或发生异常时）重新启动一个线程来替代原来的线程继续执行下去！</span><br><span class="line"></span><br><span class="line"># 线程生命周期(状态)</span><br><span class="line">当线程被创建并启动以后，它既不是一启动就进入了执行状态，也不是一直处于执行状态。在线程的生命周期中，它要经过新建(New)、就绪（Runnable）、运行（Running）、阻塞(Blocked)和死亡(Dead)5 种状态。尤其是当线程启动以后，它不可能一直&quot;霸占&quot;着 CPU 独自运行，所以CPU需要在多条线程之间切换，于是线程状态也会多次在运行、阻塞之间切换</span><br><span class="line"></span><br><span class="line">## 新建状态（NEW）</span><br><span class="line">当程序使用 new关键字创建了一个线程之后，该线程就处于新建状态，此时仅由JVM为其分配内存，并初始化其成员变量的值</span><br><span class="line"></span><br><span class="line">## 就绪状态（RUNNABLE）：</span><br><span class="line">当线程对象调用了 start()方法之后，该线程处于就绪状态。Java 虚拟机会为其创建方法调用栈和程序计数器，等待调度运行。</span><br><span class="line"></span><br><span class="line">##  运行状态（RUNNING）：</span><br><span class="line">如果处于就绪状态的线程获得了 CPU，开始执行 run()方法的线程执行体，则该线程处于运行状态。</span><br><span class="line"></span><br><span class="line">## 阻塞状态（BLOCKED）：</span><br><span class="line">阻塞状态是指线程因为某种原因放弃了 cpu 使用权，也即让出了 cpu timeslice，暂时停止运行。直到线程进入可运行(runnable)状态，才有机会再次获得 cpu timeslice 转到运行(running)状态。阻塞的情况分三种：</span><br><span class="line"></span><br><span class="line">- 等待阻塞（o.wait-&gt;等待对列）：</span><br><span class="line"></span><br><span class="line">运行(running)的线程执行 o.wait()方法，JVM 会把该线程放入等待队列(waitting queue)中。</span><br><span class="line"></span><br><span class="line">- 同步阻塞(lock-&gt;锁池)</span><br><span class="line"></span><br><span class="line">运行(running)的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则 JVM 会把该线程放入锁池(lock pool)中。</span><br><span class="line"></span><br><span class="line">- 其他阻塞(sleep/join)</span><br><span class="line"></span><br><span class="line">运行(running)的线程执行 Thread.sleep(long ms)或t.join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入可运行(runnable)状态。</span><br><span class="line">## 线程死亡（DEAD）</span><br><span class="line">线程会以下面三种方式结束，结束后就是死亡状态。</span><br><span class="line"></span><br><span class="line">- 正常结束</span><br><span class="line">1. run()或 call()方法执行完成，线程正常结束。</span><br><span class="line">- 异常结束</span><br><span class="line">2. 线程抛出一个未捕获的 Exception 或 Error。</span><br><span class="line">- 调用 stop</span><br><span class="line">3. 直接调用该线程的 stop()方法来结束该线程—该方法通常容易导致死锁，不推荐使用。</span><br><span class="line"></span><br><span class="line"># 终止线程 4 种方式</span><br><span class="line"></span><br><span class="line">## 正常运行结束</span><br><span class="line"> 程序运行结束，线程自动结束。</span><br><span class="line"></span><br><span class="line">## 使用退出标志退出线程</span><br><span class="line">一般 run()方法执行完，线程就会正常结束，然而，常常有些线程是伺服线程。它们需要长时间的运行，只有在外部某些条件满足的情况下，才能关闭这些线程。使用一个变量来控制循环，例如：最直接的方法就是设一个 boolean 类型的标志，并通过设置这个标志为true或false来控制while循环是否退出，代码示例：</span><br><span class="line"></span><br><span class="line">    public class ThreadSafe extends Thread &#123;</span><br><span class="line">         public volatile boolean exit = false;</span><br><span class="line">             public void run() &#123;</span><br><span class="line">             while (!exit)&#123;</span><br><span class="line">             //do something</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">定义了一个退出标志 exit，当 exit 为 true时，while循环退出，exit的默认值为false.在定义exit时，使用了一个Java关键字volatile，这个关键字的目的是使 exit同步，也就是说在同一时刻只能由一个线程来修改 exit 的值。</span><br><span class="line"></span><br><span class="line">## Interrupt 方法结束线程</span><br><span class="line">使用 interrupt()方法来中断线程有两种情况：</span><br><span class="line"></span><br><span class="line">1. 线程处于阻塞状态：</span><br><span class="line"></span><br><span class="line">如使用了 sleep,同步锁的wait,socket中的receiver,accept等方法时，会使线程处于阻塞状态。当调用线程的interrupt()方法时，会抛出 InterruptException 异常。阻塞中的那个方法抛出这个异常，通过代码捕获该异常，然后break跳出循环状态，从而让我们有机会结束这个线程的执行。通常很多人认为只要调用 interrupt 方法线程就会结束，实际上是错的， 一定要先捕获 InterruptedException 异常之后通过 break 来跳出循环，才能正常结束 run 方法。</span><br><span class="line"></span><br><span class="line">2. 线程未处于阻塞状态：</span><br><span class="line"></span><br><span class="line">使用 isInterrupted()判断线程的中断标志来退出循环。当使用interrupt()方法时，中断标志就会置 true，和使用自定义的标志来控制循环是一样的道理。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;details&gt;</span><br><span class="line">    &lt;summary&gt;isInterrupted&lt;/summary&gt;</span><br><span class="line">    </span><br><span class="line">```  </span><br><span class="line">     public class ThreadSafe extends Thread &#123;</span><br><span class="line">         public void run() &#123;</span><br><span class="line">                 while (!isInterrupted())&#123; //非阻塞过程中通过判断中断标志来退出</span><br><span class="line">                 try&#123;</span><br><span class="line">                    Thread.sleep(5*1000);//阻塞过程捕获中断异常来退出</span><br><span class="line">                 &#125;catch(InterruptedException e)&#123;</span><br><span class="line">                     e.printStackTrace();</span><br><span class="line">                     break;//捕获到异常之后，执行 break 跳出循环</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">```  </span><br><span class="line">&lt;/details&gt;</span><br><span class="line"></span><br><span class="line">## stop 方法终止线程（线程不安全）</span><br><span class="line"></span><br><span class="line">程序中可以直接使用 thread.stop()来强行终止线程，但是stop方法是很危险的，就象突然关闭计算机电源，而不是按正常程序关机一样，可能会产生不可预料的结果，不安全主要是：thread.stop()调用之后，创建子线程的线程就会抛出ThreadDeatherror的错误，并且会释放子线程所持有的所有锁。一般任何进行加锁的代码块，都是为了保护数据的一致性，如果在调用thread.stop()后导致了该线程所持有的所有锁的突然释放(不可控制)，那么被保护数据就有可能呈现不一致性，其他线程在使用这些被破坏的数据时，有可能导致一些很奇怪的应用程序错误。因此，并不推荐使用 stop 方法来终止线程。</span><br><span class="line"></span><br><span class="line">### sleep 与 wait 区别</span><br><span class="line"></span><br><span class="line">1. 对于 sleep()方法，我们首先要知道该方法是属于 Thread 类中的。而 wait()方法，则是属于Object 类中的。</span><br><span class="line">2. sleep()方法导致了程序暂停执行指定的时间，让出 cpu 该其他线程，但是他的监控状态依然保持者，当指定的时间到了又会自动恢复运行状态。</span><br><span class="line">3. 在调用 sleep()方法的过程中，线程不会释放对象锁。</span><br><span class="line">4. 而当调用 wait()方法的时候，线程会放弃对象锁，进入等待此对象的等待锁定池，只有针对此对象调用notify()方法后本线程才进入对象锁定池准备获取对象锁进入运行状态。</span><br><span class="line"></span><br><span class="line">## start 与 run 区别</span><br><span class="line">1. start（）方法来启动线程，真正实现了多线程运行。这时无需等待 run 方法体代码执行完毕，可以直接继续执行下面的代码。</span><br><span class="line">2. 通过调用 Thread 类的 start()方法来启动一个线程， 这时此线程是处于就绪状态， 并没有运行。</span><br><span class="line">3. 方法 run()称为线程体，它包含了要执行的这个线程的内容，线程就进入了运行状态，开始运行 run 函数当中的代码。Run方法运行结束，此线程终止。然后 CPU 再调度其它线程。</span><br><span class="line"></span><br><span class="line">## JAVA 后台线程</span><br><span class="line"></span><br><span class="line">1. 定义：守护线程--也称“服务线程”，他是后台线程，它有一个特性，即为用户线程 提供 公共服务，在没有用户线程可服务时会自动离开。</span><br><span class="line">2. 优先级：守护线程的优先级比较低，用于为系统中的其它对象和线程提供服务。</span><br><span class="line">3. 设置：通过 setDaemon(true)来设置线程为“守护线程”；将一个用户线程设置为守护线程的方式是在 线程对象创建 之前 用线程对象的 setDaemon 方法。</span><br><span class="line">4. 在 Daemon 线程中产生的新线程也是 Daemon 的。</span><br><span class="line">5. 线程则是 JVM 级别的，以 Tomcat 为例，如果你在 Web 应用中启动一个线程，这个线程的生命周期并不会和Web应用程序保持同步。也就是说，即使你停止了 Web 应用，这个线程依旧是活跃的。</span><br><span class="line">6. example: 垃圾回收线程就是一个经典的守护线程，当我们的程序中不再有任何运行的Thread,程序就不会再产生垃圾，垃圾回收器也就无事可做，所以当垃圾回收线程是 JVM 上仅剩的线程时，垃圾回收线程会自动离开。它始终在低级别的状态中运行，用于实时监控和管理系统中的可回收资源。</span><br><span class="line">7. 生命周期：守护进程（Daemon）是运行在后台的一种特殊进程。它独立于控制终端并且周期性地执行某种任务或等待处理某些发生的事件。也就是说守护线程不依赖于终端，但是依赖于系统，与系统“同生共死”。当 JVM 中所有的线程都是守护线程的时候，JVM 就可以退出了；如果还有一个或以上的非守护线程则 JVM 不会退出。</span><br><span class="line"></span><br><span class="line"># JAVA 锁</span><br><span class="line">## 乐观锁</span><br><span class="line">乐观锁是一种乐观思想，即认为读多写少，遇到并发写的可能性低，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，采取在写时先读出当前版本号，然后加锁操作（比较跟上一次的版本号，如果一样则更新），如果失败则要重复读-比较-写的操作。java 中的乐观锁基本都是通过 CAS 操作实现的，CAS 是一种更新的原子操作，比较当前值跟传入值是否一样，一样则更新，否则失败。</span><br><span class="line"></span><br><span class="line">## 悲观锁</span><br><span class="line">悲观锁是就是悲观思想，即认为写多，遇到并发写的可能性高，每次去拿数据的时候都认为别人会修改，所以每次在读写数据的时候都会上锁，这样别人想读写这个数据就会 block 直到拿到锁。java中的悲观锁就是Synchronized,AQS框架下的锁则是先尝试cas乐观锁去获取锁，获取不到，才会转换为悲观锁，如 RetreenLock。</span><br><span class="line"></span><br><span class="line">## 自旋锁</span><br><span class="line">自旋锁原理非常简单，如果持有锁的线程能在很短时间内释放锁资源，那么那些等待竞争锁的线程就不需要做内核态和用户态之间的切换进入阻塞挂起状态，它们只需要等一等（自旋），等持有锁的线程释放锁后即可立即获取锁，这样就避免用户线程和内核的切换的消耗。</span><br><span class="line"></span><br><span class="line">线程自旋是需要消耗cpu的，说白了就是让cpu在做无用功，如果一直获取不到锁，那线程也不能一直占用cpu自旋做无用功，所以需要设定一个自旋等待的最大时间。</span><br><span class="line"></span><br><span class="line">如果持有锁的线程执行的时间超过自旋等待的最大时间扔没有释放锁，就会导致其它争用锁的线程在最大等待时间内还是获取不到锁，这时争用线程会停止自旋进入阻塞状态。</span><br><span class="line"></span><br><span class="line">### 自旋锁的优缺点</span><br><span class="line">自旋锁尽可能的减少线程的阻塞，这对于锁的竞争不激烈，且占用锁时间非常短的代码块来说性能能大幅度的提升，因为自旋的消耗会小于线程阻塞挂起再唤醒的操作的消耗，这些操作会导致线程发生两次上下文切换！</span><br><span class="line"></span><br><span class="line">但是如果锁的竞争激烈，或者持有锁的线程需要长时间占用锁执行同步块，这时候就不适合使用自旋锁了，因为自旋锁在获取锁前一直都是占用cpu做无用功，占着 XX 不 XX，同时有大量线程在竞争一个锁，会导致获取锁的时间很长，线程自旋的消耗大于线程阻塞挂起操作的消耗，其它需要cup的线程又不能获取到cpu，造成 cpu 的浪费。所以这种情况下我们要关闭自旋锁；</span><br><span class="line"></span><br><span class="line">### 自旋锁时间阈值（1.6 引入了适应性自旋锁）</span><br><span class="line">自旋锁的目的是为了占着CPU的资源不释放，等到获取到锁立即进行处理。但是如何去选择自旋的执行时间呢？如果自旋执行时间太长，会有大量的线程处于自旋状态占用 CPU 资源，进而会影响整体系统的性能。因此自旋的周期选的额外重要！</span><br><span class="line"></span><br><span class="line">JVM 对于自旋周期的选择，jdk1.5 这个限度是一定的写死的，在1.6引入了适应性自旋锁，适应性自旋锁意味着自旋的时间不再是固定的了，而是由前一次在同一个锁上的自旋时间以及锁的拥有者的状态来决定，基本认为一个线程上下文切换的时间是最佳的一个时间，同时JVM还针对当前CPU的负荷情况做了较多的优化，如果平均负载小于 CPUs 则一直自旋，如果有超过(CPUs/2)个线程正在自旋，则后来线程直接阻塞，如果正在自旋的线程发现 Owner 发生了变化则延迟自旋</span><br><span class="line">时间（自旋计数）或进入阻塞，如果 CPU 处于节电模式则停止自旋，自旋时间的最坏情况是 CPU的存储延迟（CPU A 存储了一个数据，到 CPU B得知这个数据直接的时间差），自旋时会适当放弃线程优先级之间的差异。</span><br><span class="line"></span><br><span class="line">自旋锁的开启</span><br><span class="line">    </span><br><span class="line">    JDK1.6 中-XX:+UseSpinning 开启；</span><br><span class="line">    -XX:PreBlockSpin=10 为自旋次数；</span><br><span class="line">    JDK1.7 后，去掉此参数，由 jvm 控制；    </span><br><span class="line"></span><br><span class="line">## Synchronized 同步锁</span><br><span class="line"></span><br><span class="line">synchronized 它可以把任意一个非 NULL 的对象当作锁。他属于独占式的悲观锁，同时属于可重入锁。</span><br><span class="line"></span><br><span class="line">### Synchronized 作用范围</span><br><span class="line">1. 作用于方法时，锁住的是对象的实例(this)；</span><br><span class="line">2. 当作用于静态方法时，锁住的是Class实例，又因为Class的相关数据存储在永久带PermGen（jdk1.8则是metaspace），永久带是全局共享的，因此静态方法锁相当于类的一个全局锁，会锁所有调用该方法的线程；</span><br><span class="line">3. synchronized 作用于一个对象实例时，锁住的是所有以该对象为锁的代码块。它有多个队列，当多个线程一起访问某个对象监视器的时候，对象监视器会将这些线程存储在不同的容器中。</span><br><span class="line"></span><br><span class="line">### Synchronized 核心组件</span><br><span class="line">1) Wait Set：哪些调用 wait 方法被阻塞的线程被放置在这里；</span><br><span class="line">2) Contention List：竞争队列，所有请求锁的线程首先被放在这个竞争队列中；</span><br><span class="line">3) Entry List：Contention List 中那些有资格成为候选资源的线程被移动到 Entry List 中；</span><br><span class="line">4) OnDeck：任意时刻，最多只有一个线程正在竞争锁资源，该线程被成为 OnDeck；</span><br><span class="line">5) Owner：当前已经获取到所资源的线程被称为 Owner；</span><br><span class="line">6) !Owner：当前释放锁的线程。</span><br><span class="line"></span><br><span class="line">### Synchronized 实现</span><br><span class="line">1. JVM 每次从队列的尾部取出一个数据用于锁竞争候选者（OnDeck），但是并发情况下，ContentionList会被大量的并发线程进行CAS访问，为了降低对尾部元素的竞争，JVM 会将一部分线程移动到 EntryList 中作为候选竞争线程。</span><br><span class="line">2. Owner 线程会在 unlock 时，将 ContentionList中的部分线程迁移到EntryList中，并指定EntryList中的某个线程为OnDeck线程（一般是最先进去的那个线程）。</span><br><span class="line">3. Owner 线程并不直接把锁传递给 OnDeck线程，而是把锁竞争的权利交给OnDeck，OnDeck需要重新竞争锁。这样虽然牺牲了一些公平性，但是能极大的提升系统的吞吐量，在JVM 中，也把这种选择行为称之为“竞争切换”。</span><br><span class="line">4. OnDeck 线程获取到锁资源后会变为 Owner 线程，而没有得到锁资源的仍然停留在 EntryList中。如果 Owner 线程被 wait 方法阻塞，则转移到 WaitSet 队列中，直到某个时刻通过 notify或者 notifyAll 唤醒，会重新进去 EntryList 中。</span><br><span class="line">5. 处于 ContentionList、EntryList、WaitSet 中的线程都处于阻塞状态，该阻塞是由操作系统来完成的（Linux 内核下采用 pthread_mutex_lock 内核函数实现的）。</span><br><span class="line">6. Synchronized 是非公平锁。 Synchronized在线程进入ContentionList时，等待的线程会先尝试自旋获取锁，如果获取不到就进入ContentionList，这明显对于已经进入队列的线程是不公平的，还有一个不公平的事情就是自旋获取锁的线程还可能直接抢占 OnDeck 线程的锁资源。</span><br><span class="line">参考：https://blog.csdn.net/zqz_zqz/article/details/70233767</span><br><span class="line">7. 每个对象都有个 monitor 对象，加锁就是在竞争monitor对象，代码块加锁是在前后分别加上monitorenter和monitorexit指令来实现的，方法加锁是通过一个标记位来判断的</span><br><span class="line">8. synchronized 是一个重量级操作，需要调用操作系统相关接口，性能是低效的，有可能给线程加锁消耗的时间比有用操作消耗的时间更多。</span><br><span class="line">9. Java1.6，synchronized 进行了很多的优化，有适应自旋、锁消除、锁粗化、轻量级锁及偏向锁等，效率有了本质上的提高。在之后推出的 Java1.7 与 1.8 中，均对该关键字的实现机理做了优化。引入了偏向锁和轻量级锁。都是在对象头中有标记位，不需要经过操作系统加锁。</span><br><span class="line">10. 锁可以从偏向锁升级到轻量级锁，再升级到重量级锁。这种升级过程叫做锁膨胀；</span><br><span class="line">11. JDK 1.6 中默认是开启偏向锁和轻量级锁，可以通过-XX:-UseBiasedLocking 来禁用偏向锁。</span><br><span class="line"></span><br><span class="line">## ReentrantLock</span><br><span class="line">ReentantLock 继承接口 Lock 并实现了接口中定义的方法，他是一种可重入锁，除了能完成synchronized所能完成的所有工作外，还提供了诸如可响应中断锁、可轮询锁请求、定时锁等避免多线程死锁的方法。</span><br><span class="line"></span><br><span class="line">### Lock 接口的主要方法</span><br><span class="line"></span><br><span class="line">1. void lock(): 执行此方法时, 如果锁处于空闲状态, 当前线程将获取到锁. 相反, 如果锁已经被其他线程持有, 将禁用当前线程, 直到当前线程获取到锁.</span><br><span class="line">2. boolean tryLock()：如果锁可用, 则获取锁, 并立即返回 true, 否则返回 false. 该方法和lock()的区别在于, tryLock()只是&quot;试图&quot;获取锁, 如果锁不可用, 不会导致当前线程被禁用,当前线程仍然继续往下执行代码.而lock()方法则是一定要获取到锁,如果锁不可用,就一直等待,在未获得锁之前,当前线程并不继续向下执行.</span><br><span class="line">3. void unlock()：执行此方法时, 当前线程将释放持有的锁. 锁只能由持有者释放, 如果线程并不持有锁, 却执行该方法, 可能导致异常的发生.</span><br><span class="line">4. Condition newCondition()：条件对象，获取等待通知组件。该组件和当前的锁绑定，当前线程只有获取了锁，才能调用该组件的await()方法，而调用后，当前线程将缩放锁。</span><br><span class="line">5. getHoldCount() ：查询当前线程保持此锁的次数，也就是执行此线程执行 lock 方法的次数。</span><br><span class="line">6. getQueueLength（）：返回正等待获取此锁的线程估计数，比如启动 10 个线程，1 个线程获得锁，此时返回的是 9</span><br><span class="line">7. getWaitQueueLength：（Condition condition）返回等待与此锁相关的给定条件的线程估计数。比如 10 个线程，用同一个 condition 对象，并且此时这 10 个线程都执行了condition 对象的 await 方法，那么此时执行此方法返回 10</span><br><span class="line">8. hasWaiters(Condition condition)：查询是否有线程等待与此锁有关的给定条件(condition)，对于指定 contidion 对象，有多少线程执行了 condition.await 方法</span><br><span class="line">9. hasQueuedThread(Thread thread)：查询给定线程是否等待获取此锁</span><br><span class="line">10. hasQueuedThreads()：是否有线程等待此锁</span><br><span class="line">11. isFair()：该锁是否公平锁</span><br><span class="line">12. isHeldByCurrentThread()： 当前线程是否保持锁锁定，线程的执行 lock 方法的前后分别是 false 和 true</span><br><span class="line">13. isLock()：此锁是否有任意线程占用</span><br><span class="line">14. lockInterruptibly（）：如果当前线程未被中断，获取锁</span><br><span class="line">15. tryLock（）：尝试获得锁，仅在调用时锁未被线程占用，获得锁</span><br><span class="line">16. tryLock(long timeout TimeUnit unit)：如果锁在给定等待时间内没有被另一个线程保持，则获取该锁。</span><br><span class="line"></span><br><span class="line">### 非公平锁</span><br><span class="line">JVM 按随机、就近原则分配锁的机制则称为不公平锁，ReentrantLock在构造函数中提供了是否公平锁的初始化方式，默认为非公平锁。非公平锁实际执行的效率要远远超出公平锁，除非程序有特殊需要，否则最常用非公平锁的分配机制。</span><br><span class="line"></span><br><span class="line">### 公平锁</span><br><span class="line">公平锁指的是锁的分配机制是公平的，通常先对锁提出获取请求的线程会先被分配到锁，ReentrantLock在构造函数中提供了是否公平锁的初始化方式来定义公平锁。</span><br><span class="line"></span><br><span class="line">### ReentrantLock 与 synchronized</span><br><span class="line"></span><br><span class="line">1. ReentrantLock 通过方法 lock()与 unlock()来进行加锁与解锁操作，与synchronized会被JVM自动解锁机制不同，ReentrantLock加锁后需要手动进行解锁。为了避免程序出现异常而无法正常解锁的情况，使用 ReentrantLock 必须在 finally控制块中进行解锁操作。</span><br><span class="line">2. ReentrantLock 相比 synchronized 的优势是可中断、公平锁、多个锁。这种情况下需要使用 ReentrantLock。</span><br><span class="line"></span><br><span class="line">### ReentrantLock 实现</span><br><span class="line">&lt;details&gt;</span><br><span class="line">    &lt;summary&gt;ReentrantLock&lt;/summary&gt;</span><br></pre></td></tr></table></figure><p>public class MyService {<br>    private Lock lock = new ReentrantLock();<br>    //Lock lock=new ReentrantLock(true);//公平锁<br>    //Lock lock=new ReentrantLock(false);//非公平锁<br>    private Condition condition=lock.newCondition();//创建 Condition<br>    public void testMethod() {<br>        try {<br>            lock.lock();//lock 加锁<br>            //1：wait 方法等待：<br>            //System.out.println(“开始 wait”);<br>            condition.await();<br>            //通过创建 Condition 对象来使线程 wait，必须先执行 lock.lock 方法获得锁<br>            //:2：signal 方法唤醒<br>            condition.signal();//condition 对象的 signal 方法可以唤醒 wait 线程<br>            for (int i = 0; i &lt; 5; i++) {<br>                System.out.println(“ThreadName=” + Thread.currentThread().getName()+ (“ “ + (i + 1)));<br>            }<br>        } catch (InterruptedException e) {<br>            e.printStackTrace();<br>        }<br>        finally{<br>            lock.unlock();<br>        }<br>    }<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;/details&gt;</span><br><span class="line"></span><br><span class="line">### Condition 类和 Object 类锁方法区别 </span><br><span class="line">1. Condition 类的 awiat 方法和 Object 类的 wait 方法等效</span><br><span class="line">2. Condition 类的 signal 方法和 Object 类的 notify 方法等效</span><br><span class="line">3. Condition 类的 signalAll 方法和 Object 类的 notifyAll 方法等效</span><br><span class="line">4. ReentrantLock 类可以唤醒指定条件的线程，而 object 的唤醒是随机的</span><br><span class="line"></span><br><span class="line">### tryLock 和 lock 和 lockInterruptibly 的区别</span><br><span class="line">1. tryLock 能获得锁就返回 true，不能就立即返回 false，tryLock(long timeout,TimeUnitunit)，可以增加时间限制，如果超过该时间段还没获得锁，返回 false</span><br><span class="line">2. lock 能获得锁就返回 true，不能的话一直等待获得锁</span><br><span class="line">3. lock 和 lockInterruptibly，如果两个线程分别执行这两个方法，但此时中断这两个线程，lock 不会抛出异常，而 lockInterruptibly 会抛出异常。</span><br><span class="line"></span><br><span class="line">## Semaphore 信号量</span><br><span class="line">Semaphore 是一种基于计数的信号量。它可以设定一个阈值，基于此，多个线程竞争获取许可信号，做完自己的申请后归还，超过阈值后，线程申请许可信号将会被阻塞。Semaphore 可以用来构建一些对象池，资源池之类的，比如数据库连接池</span><br><span class="line"></span><br><span class="line">### 实现互斥锁（计数器为 1）</span><br><span class="line">我们也可以创建计数为 1 的 Semaphore，将其作为一种类似互斥锁的机制，这也叫二元信号量，表示两种互斥状态。</span><br><span class="line"></span><br><span class="line">### 代码实现</span><br><span class="line">它的用法如下：</span><br><span class="line"></span><br><span class="line">&lt;details&gt;</span><br><span class="line">    &lt;summary&gt;ReentrantLock&lt;/summary&gt;</span><br></pre></td></tr></table></figure><pre><code>// 创建一个计数阈值为 5 的信号量对象// 只能 5 个线程同时访问Semaphore semp = new Semaphore(5);try { // 申请许可    semp.acquire();    try {// 业务逻辑    } catch (Exception e) {    } finally {// 释放许可        semp.release();    }} catch (InterruptedException e) {}</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;/details&gt;</span><br><span class="line"></span><br><span class="line">### Semaphore 与 ReentrantLock</span><br><span class="line">Semaphore 基本能完成ReentrantLock的所有工作，使用方法也与之类似，通过acquire()与release()方法来获得和释放临界资源。经实测，Semaphone.acquire()方法默认为可响应中断锁，与ReentrantLock.lockInterruptibly()作用效果一致，也就是说在等待临界资源的过程中可以被Thread.interrupt()方法中断。</span><br><span class="line"></span><br><span class="line">此外，Semaphore也实现了可轮询的锁请求与定时锁的功能，除了方法名tryAcquire与tryLock不同，其使用方法与ReentrantLock几乎一致。Semaphore也提供了公平与非公平锁的机制，也可在构造函数中进行设定。</span><br><span class="line"></span><br><span class="line">Semaphore 的锁释放操作也由手动进行，因此与ReentrantLock一样，为避免线程因抛出异常而无法正常释放锁的情况发生，释放锁的操作也必须在finally代码块中完成。</span><br><span class="line"></span><br><span class="line">## AtomicInteger</span><br><span class="line">首先说明，此处 AtomicInteger ，一个提供原子操作的 Integer 的类，常见的还有AtomicBoolean、AtomicInteger、AtomicLong、AtomicReference 等，他们的实现原理相同，区别在与运算对象类型的不同。令人兴奋地，还可以通过 AtomicReference&lt;V&gt;将一个对象的所有操作转化成原子操作。</span><br><span class="line"></span><br><span class="line">我们知道，在多线程程序中，诸如++i 或 i++等运算不具有原子性，是不安全的线程操作之一。通常我们会使用 synchronized 将该操作变成一个原子操作，但 JVM 为此类操作特意提供了一些同步类，使得使用更方便，且使程序运行效率变得更高。通过相关资料显示，通常AtomicInteger的性能是 ReentantLock 的好几倍。</span><br><span class="line"></span><br><span class="line">## 可重入锁（递归锁）</span><br><span class="line">本文里面讲的是广义上的可重入锁，而不是单指 JAVA 下的 ReentrantLock。可重入锁，也叫做递归锁，指的是同一线程 外层函数获得锁之后 ，内层递归函数仍然有获取该锁的代码，但不受影响。在 JAVA 环境下 ReentrantLock 和 synchronized 都是 可重入锁。</span><br><span class="line"></span><br><span class="line">### 可重入</span><br><span class="line">什么是 “可重入”，可重入就是说某个线程已经获得某个锁，可以再次获取锁而不会出现死锁。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;details&gt;</span><br><span class="line">    &lt;summary&gt;synchronized&lt;/summary&gt;</span><br></pre></td></tr></table></figure><p>public class Reentrant {<br>    public static void main(String[] args) {<br>        new Thread(new Runnable() {<br>            @Override<br>            public void run() {<br>                synchronized (this) {<br>                    System.out.println(“第1次获取锁，这个锁是：” + this);<br>                    int index = 1;<br>                    while (true) {<br>                        synchronized (this) {<br>                            System.out.println(“第” + index + “次获取锁，这个锁是：” + this);<br>                            index++;<br>                        }<br>                        if (index &gt; 10) {<br>                            break;<br>                        }<br>                    }<br>                }<br>            }<br>        }).start();<br>    }<br>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;/details&gt;</span><br><span class="line"></span><br><span class="line">&lt;details&gt;</span><br><span class="line">    &lt;summary&gt;ReentrantLock&lt;/summary&gt;</span><br></pre></td></tr></table></figure><p>import java.util.Random;<br>import java.util.concurrent.locks.ReentrantLock;</p><p>public class Reentrant {<br>    public static void main(String[] args) {<br>        ReentrantLock reentrantLock = new ReentrantLock();</p><pre><code>    new Thread(new Runnable() {        @Override        public void run() {            try {                reentrantLock.lock();                System.out.println(&quot;第1次获取锁，这个锁是：&quot; + reentrantLock);                int index = 1;                while (true) {                    try {                        reentrantLock.lock();                        System.out.println(&quot;第&quot; + ++index + &quot;次获取锁，这个锁是：&quot; + reentrantLock);                        try {                            Thread.sleep(new Random().nextInt(200));                        } catch (InterruptedException e) {                            e.printStackTrace();                        }                        if (index &gt;= 10) {                            break;                        }                    } finally {                        reentrantLock.unlock();                    }                }            } finally {                reentrantLock.unlock();            }        }    }).start();}</code></pre><p>}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br></pre></td><td class="code"><pre><span class="line">&lt;/details&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">可以发现没发生死锁，可以多次获取相同的锁。</span><br><span class="line"></span><br><span class="line">### ReentrantLock 和 synchronized区别</span><br><span class="line"></span><br><span class="line">使用ReentrantLock的注意点ReentrantLock和synchronized不一样，需要手动释放锁，所以使用ReentrantLock的时候一定要手动释放锁，并且加锁次数和释放次数要一样。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 公平锁与非公平锁</span><br><span class="line"></span><br><span class="line">### 公平锁（Fair）</span><br><span class="line">加锁前检查是否有排队等待的线程，优先排队等待的线程，先来先得。</span><br><span class="line"></span><br><span class="line">### 非公平锁（Nonfair）</span><br><span class="line">加锁时不考虑排队等待问题，直接尝试获取锁，获取不到自动到队尾等待。</span><br><span class="line"></span><br><span class="line">1. 非公平锁性能比公平锁高5~10倍，因为公平锁需要在多核的情况下维护一个队列</span><br><span class="line">2. Java 中的 synchronized是非公平锁，ReentrantLock 默认的 lock()方法采用的是非公平锁。</span><br><span class="line"></span><br><span class="line">参考https://blog.csdn.net/w8y56f/article/details/89554060</span><br><span class="line"></span><br><span class="line">## ReadWriteLock 读写锁</span><br><span class="line">为了提高性能，Java 提供了读写锁，在读的地方使用读锁，在写的地方使用写锁，灵活控制，如果没有写锁的情况下，读是无阻塞的,在一定程度上提高了程序的执行效率。读写锁分为读锁和写锁，多个读锁不互斥，读锁与写锁互斥，这是由 jvm 自己控制的，你只要上好相应的锁即可。</span><br><span class="line"></span><br><span class="line">### 读锁</span><br><span class="line">如果你的代码只读数据，可以很多人同时读，但不能同时写，那就上读锁</span><br><span class="line"></span><br><span class="line">### 写锁</span><br><span class="line">如果你的代码修改数据，只能有一个人在写，且不能同时读取，那就上写锁。总之，读的时候上读锁，写的时候上写锁！</span><br><span class="line"></span><br><span class="line">Java 中 读 写 锁 有 个 接 口 java.util.concurrent.locks.ReadWriteLock ， 也 有 具 体 的 实 现ReentrantReadWriteLock。</span><br><span class="line"></span><br><span class="line">## 共享锁和独占锁</span><br><span class="line">java 并发包提供的加锁模式分为独占锁和共享锁。</span><br><span class="line"></span><br><span class="line">### 独占锁</span><br><span class="line">独占锁模式下，每次只能有一个线程能持有锁，ReentrantLock 就是以独占方式实现的互斥锁。</span><br><span class="line">独占锁是一种悲观保守的加锁策略，它避免了读/读冲突，如果某个只读线程获取锁，则其他读线程都只能等待，这种情况下就限制了不必要的并发性，因为读操作并不会影响数据的一致性。</span><br><span class="line"></span><br><span class="line">### 共享锁</span><br><span class="line">共享锁则允许多个线程同时获取锁，并发访问共享资源，如：ReadWriteLock。共享锁则是一种乐观锁，它放宽了加锁策略，允许多个执行读操作的线程同时访问共享资源。</span><br><span class="line">1. AQS 的内部类 Node 定义了两个常量 SHARED 和 EXCLUSIVE，他们分别标识 AQS 队列中等待线程的锁获取模式。</span><br><span class="line">2. java 的并发包中提供了 ReadWriteLock，读-写锁。它允许一个资源可以被多个读操作访问，或者被一个 写操作访问，但两者不能同时进行。</span><br><span class="line"></span><br><span class="line">### 重量级锁（Mutex Lock）</span><br><span class="line">Synchronized 是通过对象内部的一个叫做监视器锁（monitor）来实现的。但是监视器锁本质又是依赖于底层的操作系统的MutexLock来实现的。而操作系统实现线程之间的切换这就需要从用户态转换到核心态，这个成本非常高，状态之间的转换需要相对比较长的时间，这就是为什么Synchronized效率低的原因。因此，这种依赖于操作系统 Mutex Lock 所实现的锁我们称之为“重量级锁”。JDK 中对 Synchronized 做的种种优化，其核心都是为了减少这种重量级锁的使用。</span><br><span class="line">JDK1.6 以后，为了减少获得锁和释放锁所带来的性能消耗，提高性能，引入了“轻量级锁”和“偏向锁”。</span><br><span class="line"></span><br><span class="line">### 轻量级锁</span><br><span class="line">锁的状态总共有四种：无锁状态、偏向锁、轻量级锁和重量级锁。</span><br><span class="line"></span><br><span class="line">#### 锁升级</span><br><span class="line">随着锁的竞争，锁可以从偏向锁升级到轻量级锁，再升级的重量级锁（但是锁的升级是单向的，也就是说只能从低到高升级，不会出现锁的降级）。</span><br><span class="line"></span><br><span class="line">“轻量级”是相对于使用操作系统互斥量来实现的传统锁而言的。但是，首先需要强调一点的是，轻量级锁并不是用来代替重量级锁的，它的本意是在没有多线程竞争的前提下，减少传统的重量级锁使用产生的性能消耗。在解释轻量级锁的执行过程之前，先明白一点，轻量级锁所适应的场景是线程交替执行同步块的情况，如果存在同一时间访问同一锁的情况，就会导致轻量级锁膨胀为重量级锁。</span><br><span class="line"></span><br><span class="line">### 偏向锁</span><br><span class="line">Hotspot 的作者经过以往的研究发现大多数情况下锁不仅不存在多线程竞争，而且总是由同一线程多次获得。偏向锁的目的是在某个线程获得锁之后，消除这个线程锁重入（CAS）的开销，看起来让这个线程得到了偏护。引入偏向锁是为了在无多线程竞争的情况下尽量减少不必要的轻量级锁执行路径，因为轻量级锁的获取及释放依赖多次 CAS 原子指令，而偏向锁只需要在置换ThreadID 的时候依赖一次 CAS 原子指令（由于一旦出现多线程竞争的情况就必须撤销偏向锁，所</span><br><span class="line">以偏向锁的撤销操作的性能损耗必须小于节省下来的CAS原子指令的性能消耗）。上面说过，轻量级锁是为了在线程交替执行同步块时提高性能，而偏向锁则是在只有一个线程执行同步块时进一步提高性能。</span><br><span class="line"></span><br><span class="line">### 分段锁</span><br><span class="line">分段锁也并非一种实际的锁，而是一种思想 ConcurrentHashMap 是学习分段锁的最好实践</span><br><span class="line"></span><br><span class="line">### 锁优化</span><br><span class="line"></span><br><span class="line">#### 减少锁持有时间</span><br><span class="line">只用在有线程安全要求的程序上加锁</span><br><span class="line"></span><br><span class="line">#### 减小锁粒度</span><br><span class="line">将大对象（这个对象可能会被很多线程访问），拆成小对象，大大增加并行度，降低锁竞争。降低了锁的竞争，偏向锁，轻量级锁成功率才会提高。最最典型的减小锁粒度的案例就是ConcurrentHashMap。</span><br><span class="line"></span><br><span class="line">#### 锁分离</span><br><span class="line">最常见的锁分离就是读写锁 ReadWriteLock，根据功能进行分离成读锁和写锁，这样读读不互斥，读写互斥，写写互斥，即保证了线程安全，又提高了性能，具体也请查看[高并发 Java 五]JDK 并发包 1。读写分离思想可以延伸，只要操作互不影响，锁就可以分离。比如LinkedBlockingQueue 从头部取出，从尾部放数据</span><br><span class="line"></span><br><span class="line">#### 锁粗化</span><br><span class="line">通常情况下，为了保证多线程间的有效并发，会要求每个线程持有锁的时间尽量短，即在使用完公共资源后，应该立即释放锁。但是，凡事都有一个度，如果对同一个锁不停的进行请求、同步和释放，其本身也会消耗系统宝贵的资源，反而不利于性能的优化 。</span><br><span class="line">#### 锁消除</span><br><span class="line">锁消除是在编译器级别的事情。在即时编译器时，如果发现不可能被共享的对象，则可以消除这些对象的锁操作，多数是因为程序员编码不规范引起。</span><br><span class="line">参考：https://www.jianshu.com/p/39628e1180a9</span><br><span class="line"></span><br><span class="line"># 线程基本方法</span><br><span class="line">线程相关的基本方法有 wait，notify，notifyAll，sleep，join，yield 等。</span><br><span class="line"></span><br><span class="line">## 线程等待（wait）</span><br><span class="line">调用该方法的线程进入WAITING状态，只有等待另外线程的通知或被中断才会返回，需要注意的是调用wait()方法后，会释放对象的锁。因此，wait方法一般用在同步方法或同步代码块中。</span><br><span class="line"></span><br><span class="line">## 线程睡眠（sleep）</span><br><span class="line">sleep 导致当前线程休眠，与 wait 方法不同的是sleep不会释放当前占有的锁,sleep(long)会导致线程进入TIMED-WATING状态，而wait()方法会导致当前线程进入 WATING 状态</span><br><span class="line"></span><br><span class="line">## 线程让步（yield）</span><br><span class="line">yield 会使当前线程让出 CPU 执行时间片，与其他线程一起重新竞争 CPU 时间片。一般情况下，优先级高的线程有更大的可能性成功竞争得到 CPU 时间片，但这又不是绝对的，有的操作系统对线程优先级并不敏感。</span><br><span class="line"></span><br><span class="line">## 线程中断（interrupt）</span><br><span class="line">中断一个线程，其本意是给这个线程一个通知信号，会影响这个线程内部的一个中断标识位。这个线程本身并不会因此而改变状态(如阻塞，终止等)。</span><br><span class="line">1. 调用 interrupt()方法并不会中断一个正在运行的线程。也就是说处于Running状态的线程并不会因为被中断而被终止，仅仅改变了内部维护的中断标识位而已。</span><br><span class="line">2. 若调用 sleep()而使线程处于 TIMED-WATING 状态，这时调用 interrupt()方法，会抛出InterruptedException,从而使线程提前结束 TIMED-WATING 状态。</span><br><span class="line">3. 许多声明抛出 InterruptedException 的方法(如 Thread.sleep(long mills 方法))，抛出异常前，都会清除中断标识位，所以抛出异常后，调用 isInterrupted()方法将会返回 false。</span><br><span class="line">4. 中断状态是线程固有的一个标识位，可以通过此标识位安全的终止线程。比如,你想终止一个线程thread的时候，可以调用thread.interrupt()方法，在线程的 run 方法内部可以根据 thread.isInterrupted()的值来优雅的终止线程。</span><br><span class="line"></span><br><span class="line">## Join 等待其他线程终止</span><br><span class="line">join() 方法，等待其他线程终止，在当前线程中调用一个线程的join()方法，则当前线程转为阻塞状态，回到另一个线程结束，当前线程再由阻塞状态变为就绪状态，等待 cpu 的宠幸。</span><br><span class="line"></span><br><span class="line">## 为什么要用 join()方法？</span><br><span class="line">很多情况下，主线程生成并启动了子线程，需要用到子线程返回的结果，也就是需要主线程需要在子线程结束后再结束，这时候就要用到 join() 方法。</span><br><span class="line">    </span><br><span class="line">    System.out.println(Thread.currentThread().getName() + &quot;线程运行开始!&quot;);</span><br><span class="line">     Thread6 thread1 = new Thread6();</span><br><span class="line">     thread1.setName(&quot;线程 B&quot;);</span><br><span class="line">     thread1.join();</span><br><span class="line">    System.out.println(&quot;这时 thread1 执行完毕之后才能执行主线程&quot;);</span><br><span class="line"></span><br><span class="line">## 线程唤醒（notify）</span><br><span class="line">Object 类中的 notify() 方法，唤醒在此对象监视器上等待的单个线程，如果所有线程都在此对象上等待，则会选择唤醒其中一个线程，选择是任意的，并在对实现做出决定时发生，线程通过调用其中一个wait()方法，在对象的监视器上等待，直到当前的线程放弃此对象上的锁定，才能继续执行被唤醒的线程，被唤醒的线程将以常规方式与在该对象上主动同步的其他所有线程进行竞争。类似的方法还有 notifyAll() ，唤醒再次监视器上等待的所有线程。</span><br><span class="line"></span><br><span class="line">## 其他方法：</span><br><span class="line">1. sleep()：强迫一个线程睡眠Ｎ毫秒。</span><br><span class="line">2. isAlive()： 判断一个线程是否存活。</span><br><span class="line">3. join()： 等待线程终止。</span><br><span class="line">4. activeCount()： 程序中活跃的线程数。</span><br><span class="line">5. enumerate()： 枚举程序中的线程。</span><br><span class="line">6. currentThread()： 得到当前线程。</span><br><span class="line">7. isDaemon()： 一个线程是否为守护线程。</span><br><span class="line">8. setDaemon()： 设置一个线程为守护线程。(用户线程和守护线程的区别在于，是否等待主线</span><br><span class="line">程依赖于主线程结束而结束)</span><br><span class="line">9. setName()： 为线程设置一个名称。</span><br><span class="line">10. wait()： 强迫一个线程等待。</span><br><span class="line">11. notify()： 通知一个线程继续运行。</span><br><span class="line">12. setPriority()： 设置一个线程的优先级。</span><br><span class="line">13. getPriority():：获得一个线程的优先级。</span><br><span class="line"></span><br><span class="line"># 线程上下文切换</span><br><span class="line">巧妙地利用了时间片轮转的方式, CPU 给每个任务都服务一定的时间，然后把当前任务的状态保存下来，在加载下一任务的状态后，继续服务下一任务，任务的状态保存及再加载, 这段过程就叫做上下文切换。时间片轮转的方式使多个任务在同一颗 CPU 上执行变成了可能。</span><br><span class="line"></span><br><span class="line">## 进程</span><br><span class="line">（有时候也称做任务）是指一个程序运行的实例。在Linux系统中，线程就是能并行运行并且与他们的父进程（创建他们的进程）共享同一地址空间（一段内存区域）和其他资源的轻量级的进程。</span><br><span class="line"></span><br><span class="line">## 上下文</span><br><span class="line">是指某一时间点 CPU 寄存器和程序计数器的内容。</span><br><span class="line"></span><br><span class="line">## 寄存器</span><br><span class="line">是 CPU 内部的数量较少但是速度很快的内存（与之对应的是CPU外部相对较慢的RAM主内存）。寄存器通过对常用值（通常是运算的中间值）的快速访问来提高计算机程序运行的速度。</span><br><span class="line"></span><br><span class="line">## 程序计数器</span><br><span class="line">是一个专用的寄存器，用于表明指令序列中CPU正在执行的位置，存的值为正在执行的指令的位置或者下一个将要被执行的指令的位置，具体依赖于特定的系统。</span><br><span class="line"></span><br><span class="line">## PCB-“切换桢”</span><br><span class="line">上下文切换可以认为是内核（操作系统的核心）在 CPU 上对于进程（包括线程）进行切换，上下文切换过程中的信息是保存在进程控制块（PCB, process control block）中的。PCB 还经常被称作“切换桢”（switchframe）。信息会一直保存到 CPU 的内存中，直到他们被再次使用。</span><br><span class="line"></span><br><span class="line">## 上下文切换的活动：</span><br><span class="line">1. 挂起一个进程，将这个进程在 CPU 中的状态（上下文）存储于内存中的某处。</span><br><span class="line">2. 在内存中检索下一个进程的上下文并将其在 CPU 的寄存器中恢复。</span><br><span class="line">3. 跳转到程序计数器所指向的位置（即跳转到进程被中断时的代码行），以恢复该进程在程序中。</span><br><span class="line"></span><br><span class="line">## 引起线程上下文切换的原因</span><br><span class="line">1. 当前执行任务的时间片用完之后，系统 CPU 正常调度下一个任务；</span><br><span class="line">2. 当前执行任务碰到 IO 阻塞，调度器将此任务挂起，继续下一任务；</span><br><span class="line">3. 多个任务抢占锁资源，当前任务没有抢到锁资源，被调度器挂起，继续下一任务；</span><br><span class="line">4. 用户代码挂起当前任务，让出 CPU 时间；</span><br><span class="line">5. 硬件中断；</span><br><span class="line"></span><br><span class="line"># 同步锁与死锁</span><br><span class="line">## 同步锁</span><br><span class="line">当多个线程同时访问同一个数据时，很容易出现问题。为了避免这种情况出现，我们要保证线程同步互斥，就是指并发执行的多个线程，在同一时间内只允许一个线程访问共享数据。 Java 中可以使用 synchronized 关键字来取得一个对象的同步锁。</span><br><span class="line"></span><br><span class="line">## 死锁</span><br><span class="line">何为死锁，就是多个线程同时被阻塞，它们中的一个或者全部都在等待某个资源被释放。</span><br><span class="line"></span><br><span class="line"># 线程池原理</span><br><span class="line">线程池做的工作主要是控制运行的线程的数量，处理过程中将任务放入队列，然后在线程创建后启动这些任务，如果线程数量超过了最大数量超出数量的线程排队等候，等其它线程执行完毕，再从队列中取出任务来执行。他的主要特点为：线程复用；控制最大并发数；管理线程。</span><br><span class="line"></span><br><span class="line">## 线程复用</span><br><span class="line">每一个 Thread 的类都有一个 start 方法。 当调用 start 启动线程时 Java 虚拟机会调用该类的 run方法。 那么该类的 run() 方法中就是调用了 Runnable 对象的 run() 方法。 我们可以继承重写Thread类，在其start方法中添加不断循环调用传递过来的Runnable对象。这就是线程池的实现原理。循环方法中不断获取 Runnable 是用 Queue 实现的，在获取下一个 Runnable 之前可以是阻塞的。</span><br><span class="line"></span><br><span class="line">## 线程池的组成</span><br><span class="line">一般的线程池主要分为以下 4 个组成部分：</span><br><span class="line">1. 线程池管理器：用于创建并管理线程池</span><br><span class="line">2. 工作线程：线程池中的线程</span><br><span class="line">3. 任务接口：每个任务必须实现的接口，用于工作线程调度其运行</span><br><span class="line">4. 任务队列：用于存放待处理的任务，提供一种缓冲机制</span><br><span class="line">Java 中的线程池是通过 Executor 框架实现的，该框架中用到了Executor，Executors，åExecutorService，ThreadPoolExecutor，Callable和Future、FutureTask 这几个类。</span><br><span class="line"></span><br><span class="line">ThreadPoolExecutor 的构造方法如下：</span><br><span class="line"></span><br><span class="line">    public ThreadPoolExecutor(int corePoolSize,int maximumPoolSize, long keepAliveTime,</span><br><span class="line">    TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue) &#123;</span><br><span class="line">        this(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</span><br><span class="line">        Executors.defaultThreadFactory(), defaultHandler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">1. corePoolSize：指定了线程池中的线程数量。</span><br><span class="line">2. maximumPoolSize：指定了线程池中的最大线程数量。</span><br><span class="line">3. keepAliveTime：当前线程池数量超过 corePoolSize 时，多余的空闲线程的存活时间，即多</span><br><span class="line">次时间内会被销毁。</span><br><span class="line">4. unit：keepAliveTime 的单位。</span><br><span class="line">5. workQueue：任务队列，被提交但尚未被执行的任务。</span><br><span class="line">6. threadFactory：线程工厂，用于创建线程，一般用默认的即可。</span><br><span class="line">7. handler：拒绝策略，当任务太多来不及处理，如何拒绝任务。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 拒绝策略</span><br><span class="line">线程池中的线程已经用完了，无法继续为新任务服务，同时，等待队列也已经排满了，再也塞不下新任务了。这时候我们就需要拒绝策略机制合理的处理这个问题。</span><br><span class="line"></span><br><span class="line">JDK 内置的拒绝策略如下：</span><br><span class="line">1. AbortPolicy ： 直接抛出异常，阻止系统正常运行。</span><br><span class="line">2. CallerRunsPolicy ： 只要线程池未关闭，该策略直接在调用者线程中，运行当前被丢弃的任务。显然这样做不会真的丢弃任务，但是，任务提交线程的性能极有可能会急剧下降。</span><br><span class="line">3. DiscardOldestPolicy ： 丢弃最老的一个请求，也就是即将被执行的一个任务，并尝试再次提交当前任务。</span><br><span class="line">4. DiscardPolicy ： 该策略默默地丢弃无法处理的任务，不予任何处理。如果允许任务丢失，这是最好的一种方案。</span><br><span class="line">以上内置拒绝策略均实现了 RejectedExecutionHandler 接口，若以上策略仍无法满足实际需要，完全可以自己扩展 RejectedExecutionHandler 接口。</span><br><span class="line"></span><br><span class="line">## Java 线程池工作过程</span><br><span class="line">1. 线程池刚创建时，里面没有一个线程。任务队列是作为参数传进来的。不过，就算队列里面有任务，线程池也不会马上执行它们。</span><br><span class="line">2. 当调用 execute() 方法添加一个任务时，线程池会做如下判断：</span><br><span class="line">a) 如果正在运行的线程数量小于 corePoolSize，那么马上创建线程运行这个任务；</span><br><span class="line">b) 如果正在运行的线程数量大于或等于 corePoolSize，那么将这个任务放入队列；</span><br><span class="line">c) 如果这时候队列满了，而且正在运行的线程数量小于 maximumPoolSize，那么还是要创建非核心线程立刻运行这个任务；</span><br><span class="line">d) 如果队列满了，而且正在运行的线程数量大于或等于 maximumPoolSize，那么线程池会抛出异常 RejectExecutionException。</span><br><span class="line">3. 当一个线程完成任务时，它会从队列中取下一个任务来执行。</span><br><span class="line">4. 当一个线程无事可做，超过一定的时间（keepAliveTime）时，线程池会判断，如果当前运行的线程数大于corePoolSize，那么这个线程就被停掉。所以线程池的所有任务完成后，它最终会收缩到 corePoolSize 的大小。</span><br><span class="line"></span><br><span class="line"># JAVA 阻塞队列原理</span><br><span class="line">阻塞队列，关键字是阻塞，先理解阻塞的含义，在阻塞队列中，线程阻塞有这样的两种情况：</span><br><span class="line">1. 当队列中没有数据的情况下，消费者端的所有线程都会被自动阻塞（挂起），直到有数据放入队列。</span><br><span class="line">2. 当队列中填满数据的情况下，生产者端的所有线程都会被自动阻塞（挂起），直到队列中有空的位置，线程被自动唤醒。</span><br><span class="line"></span><br><span class="line">## 阻塞队列的主要方法</span><br><span class="line">抛出异常：抛出一个异常；</span><br><span class="line">- 特殊值：返回一个特殊值（null 或 false,视情况而定） </span><br><span class="line">- 阻塞：在成功操作之前，一直阻塞线程</span><br><span class="line">- 超时：放弃前只在最大的时间内阻塞</span><br><span class="line"></span><br><span class="line">### 插入操作：</span><br><span class="line"></span><br><span class="line">1：public abstract boolean add(E paramE)：将指定元素插入此队列中（如果立即可行且不会违反容量限制），成功时返回 true，如果当前没有可用的空间，则抛出 IllegalStateException。如果该元素是 NULL，则会抛出 NullPointerException 异常。</span><br><span class="line"></span><br><span class="line">2：public abstract boolean offer(E paramE)：将指定元素插入此队列中（如果立即可行且不会违反容量限制），成功时返回true，如果当前没有可用的空间，则返回 false。</span><br><span class="line"></span><br><span class="line">3：public abstract void put(E paramE) throws InterruptedException： 将指定元素插入此队列中，将等待可用的空间（如果有必要）</span><br><span class="line"></span><br><span class="line">    public void put(E paramE) throws InterruptedException &#123;</span><br><span class="line">            checkNotNull(paramE);</span><br><span class="line">            ReentrantLock localReentrantLock = this.lock;</span><br><span class="line">            localReentrantLock.lockInterruptibly();</span><br><span class="line">            try &#123;</span><br><span class="line">                while (this.count == this.items.length)</span><br><span class="line">                    this.notFull.await();//如果队列满了，则线程阻塞等待</span><br><span class="line">                enqueue(paramE);</span><br><span class="line">                localReentrantLock.unlock();</span><br><span class="line">            &#125; finally &#123;</span><br><span class="line">                localReentrantLock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">4：offer(E o, long timeout, TimeUnit unit)：可以设定等待的时间，如果在指定的时间内，还不能往队列中加入 BlockingQueue，则返回失败。</span><br><span class="line"></span><br><span class="line">### 获取数据操作：</span><br><span class="line">1：poll(time):取走 BlockingQueue 里排在首位的对象,若不能立即取出,则可以等 time 参数规定的时间,取不到时返回 null;</span><br><span class="line"></span><br><span class="line">2：poll(long timeout, TimeUnit unit)：从BlockingQueue取出一个队首的对象，如果在指定时间内，队列一旦有数据可取，则立即返回队列中的数据。否则直到时间超时还没有数据可取，返回失败。</span><br><span class="line"></span><br><span class="line">3：take():取走 BlockingQueue 里排在首位的对象,若 BlockingQueue 为空,阻断进入等待状态直到 BlockingQueue 有新的数据被加入。</span><br><span class="line"></span><br><span class="line">4.drainTo():一次性从 BlockingQueue 获取所有可用的数据对象（还可以指定获取数据的个数），通过该方法，可以提升获取数据效率；不需要多次分批加锁或释放锁。</span><br><span class="line"></span><br><span class="line">## Java 中的阻塞队列</span><br><span class="line">1. ArrayBlockingQueue ：由数组结构组成的有界阻塞队列。</span><br><span class="line">2. LinkedBlockingQueue ：由链表结构组成的有界阻塞队列。</span><br><span class="line">3. PriorityBlockingQueue ：支持优先级排序的无界阻塞队列。</span><br><span class="line">4. DelayQueue：使用优先级队列实现的无界阻塞队列。</span><br><span class="line">5. SynchronousQueue：不存储元素的阻塞队列。</span><br><span class="line">6. LinkedTransferQueue：由链表结构组成的无界阻塞队列。</span><br><span class="line">7. LinkedBlockingDeque：由链表结构组成的双向阻塞队列</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## ArrayBlockingQueue（公平、非公平）</span><br><span class="line">用数组实现的有界阻塞队列。此队列按照先进先出（FIFO）的原则对元素进行排序。默认情况下不保证访问者公平的访问队列，所谓公平访问队列是指阻塞的所有生产者线程或消费者线程，当队列可用时，可以按照阻塞的先后顺序访问队列，即先阻塞的生产者线程，可以先往队列里插入元素，先阻塞的消费者线程，可以先从队列里获取元素。通常情况下为了保证公平性会降低吞吐量。我们可以使用以下代码创建一个公平的阻塞队列：</span><br><span class="line"></span><br><span class="line">ArrayBlockingQueue fairQueue = new ArrayBlockingQueue(1000,true);</span><br><span class="line"></span><br><span class="line">## LinkedBlockingQueue（两个独立锁提高并发）</span><br><span class="line">基于链表的阻塞队列，同 ArrayListBlockingQueue类似，此队列按照先进先出（FIFO）的原则对元素进行排序。而LinkedBlockingQueue之所以能够高效的处理并发数据，还因为其对于生产者端和消费者端分别采用了独立的锁来控制数据同步，这也意味着在高并发的情况下生产者和消费者可以并行地操作队列中的数据，以此来提高整个队列的并发性能。LinkedBlockingQueue 会默认一个类似无限大小的容量（Integer.MAX_VALUE）。</span><br><span class="line"></span><br><span class="line">## PriorityBlockingQueue（compareTo 排序实现优先）</span><br><span class="line">是一个支持优先级的无界队列。默认情况下元素采取自然顺序升序排列。可以自定义实现compareTo()方法来指定元素进行排序规则，或者初始化 PriorityBlockingQueue 时，指定构造参数 Comparator 来对元素进行排序。需要注意的是不能保证同优先级元素的顺序。</span><br><span class="line"></span><br><span class="line">## DelayQueue（缓存失效、定时任务 ）</span><br><span class="line">是一个支持延时获取元素的无界阻塞队列。队列使用PriorityQueue来实现。队列中的元素必须实现Delayed接口，在创建元素时可以指定多久才能从队列中获取当前元素。只有在延迟期满时才能从队列中提取元素。我们可以将 DelayQueue 运用在以下应用场景：</span><br><span class="line"></span><br><span class="line">1. 缓存系统的设计：可以用 DelayQueue保存缓存元素的有效期，使用一个线程循环查询DelayQueue，一旦能从DelayQueue中获取元素时，表示缓存有效期到了。</span><br><span class="line">2. 定时任务调度：使用 DelayQueue 保存当天将会执行的任务和执行时间，一旦从DelayQueue 中获取到任务就开始执行，从比如 TimerQueue 就是使用 DelayQueue 实现的。</span><br><span class="line"></span><br><span class="line">## SynchronousQueue（不存储数据、可用于传递数据）</span><br><span class="line">是一个不存储元素的阻塞队列。每一个 put操作必须等待一个take操作，否则不能继续添加元素。SynchronousQueue可以看成是一个传球手，负责把生产者线程处理的数据直接传递给消费者线程。队列本身并不存储任何元素，非常适合于传递性场景,比如在一个线程中使用的数据，传递给另 外 一 个 线 程 使 用 ， SynchronousQueue 的 吞 吐 量 高 于 LinkedBlockingQueue 和ArrayBlockingQueue。</span><br><span class="line"></span><br><span class="line">## LinkedTransferQueue</span><br><span class="line">是 一 个 由 链 表 结 构 组 成 的 无 界 阻 塞 TransferQueue 队 列 。 相 对 于 其 他 阻 塞 队 列 ，LinkedTransferQueue 多了 tryTransfer 和 transfer 方法。</span><br><span class="line">1. transfer 方法：如果当前有消费者正在等待接收元素（消费者使用 take()方法或带时间限制的poll()方法时），transfer方法可以把生产者传入的元素立刻 transfer（传输）给消费者。如果没有消费者在等待接收元素，transfer 方法会将元素存放在队列的 tail 节点，并等到该元素被消费者消费了才返回。</span><br><span class="line">2. tryTransfer 方法。则是用来试探下生产者传入的元素是否能直接传给消费者。如果没有消费者等待接收元素，则返回 false。和 transfer 方法的区别是 tryTransfer 方法无论消费者是否接收，方法立即返回。而 transfer 方法是必须等到消费者消费了才返回。对于带有时间限制的 tryTransfer(E e, long timeout, TimeUnit unit)方法，则是试图把生产者传入的元素直接传给消费者，但是如果没有消费者消费该元素则等待指定的时间再返回，如果超时还没消费元素，则返回 false，如果在超时时间内消费了元素，则返回 true。</span><br><span class="line"></span><br><span class="line">## LinkedBlockingDeque</span><br><span class="line">是一个由链表结构组成的双向阻塞队列。所谓双向队列指的你可以从队列的两端插入和移出元素。双端队列因为多了一个操作队列的入口，在多线程同时入队时，也就减少了一半的竞争。相比其他的阻塞队列，LinkedBlockingDeque 多了 addFirst，addLast，offerFirst，offerLast，peekFirst，peekLast 等方法，以 First 单词结尾的方法，表示插入，获取（peek）或移除双端队列的第一个元素。以 Last单词结尾的方法，表示插入，获取或移除双端队列的最后一个元素。另</span><br><span class="line">外插入方法 add 等同于 addLast，移除方法 remove 等效于 removeFirst。但是 take 方法却等同于 takeFirst，不知道是不是 Jdk 的bug，使用时还是用带有 First 和 Last 后缀的方法更清楚。在初始化 LinkedBlockingDeque 时可以设置容量防止其过渡膨胀。另外双向阻塞队列可以运用在“工作窃取”模式中。</span><br><span class="line"></span><br><span class="line"># CyclicBarrier、CountDownLatch、Semaphore 的用法</span><br><span class="line">## CountDownLatch（线程计数器 ）</span><br><span class="line">CountDownLatch 类位于 java.util.concurrent包下，利用它可以实现类似计数器的功能。比如有一个任务A，它要等待其他4个任务执行完毕之后才能执行，此时就可以利用 CountDownLatch来实现这种功能了。CountDownLatch是一个同步工具类，用来协调多个线程之间的同步，或者说起到线程之间的通信（而不是用作互斥的作用）。</span><br><span class="line"></span><br><span class="line">CountDownLatch能够使一个线程在等待另外一些线程完成各自工作之后，再继续执行。使用一个计数器进行实现。计数器初始值为线程的数量。当每一个线程完成自己任务后，计数器的值就会减一。当计数器的值为0时，表示所有的线程都已经完成一些任务，然后在CountDownLatch上等待的线程就可以恢复执行接下来的任务。</span><br><span class="line"></span><br><span class="line">&lt;details&gt;</span><br><span class="line">    &lt;summary&gt;CountDownLatch&lt;/summary&gt;</span><br><span class="line">    </span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">    final CountDownLatch latch = new CountDownLatch(2);</span><br><span class="line">        new Thread() &#123;</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                System.out.println(&quot;子线程&quot; + Thread.currentThread().getName() + &quot;正在执行&quot;);</span><br><span class="line">                Thread.sleep(3000);</span><br><span class="line">                System.out.println(&quot;子线程&quot; + Thread.currentThread().getName() + &quot;执行完毕&quot;);</span><br><span class="line">                latch.countDown();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ;</span><br><span class="line">        &#125;.start();</span><br><span class="line">        new Thread() &#123;</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                System.out.println(&quot;子线程&quot; + Thread.currentThread().getName() + &quot;正在执行&quot;);</span><br><span class="line">                Thread.sleep(3000);</span><br><span class="line">                System.out.println(&quot;子线程&quot; + Thread.currentThread().getName() + &quot;执行完毕&quot;);</span><br><span class="line">                latch.countDown();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ;</span><br><span class="line">        &#125;.start();</span><br><span class="line">        System.out.println(&quot;等待 2 个子线程执行完毕...&quot;);</span><br><span class="line">        latch.await();</span><br><span class="line">        System.out.println(&quot;2 个子线程已经执行完毕&quot;);</span><br><span class="line">        System.out.println(&quot;继续执行主线程&quot;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></details><h3 id="CountDownLatch的用法"><a href="#CountDownLatch的用法" class="headerlink" title="CountDownLatch的用法"></a>CountDownLatch的用法</h3><p>CountDownLatch典型用法：</p><p>1、某一线程在开始运行前等待n个线程执行完毕。将CountDownLatch的计数器初始化为new CountDownLatch(n)，每当一个任务线程执行完毕，就将计数器减1 countdownLatch.countDown()，当计数器的值变为0时，在CountDownLatch上await()的线程就会被唤醒。一个典型应用场景就是启动一个服务时，主线程需要等待多个组件加载完毕，之后再继续执行。</p><p>CountDownLatch典型用法：</p><p>2、实现多个线程开始执行任务的最大并行性。注意是并行性，不是并发，强调的是多个线程在某一时刻同时开始执行。类似于赛跑，将多个线程放到起点，等待发令枪响，然后同时开跑。做法是初始化一个共享的CountDownLatch(1)，将其计算器初始化为1，多个线程在开始执行任务前首先countdownlatch.await()，当主线程调用countDown()时，计数器变为0，多个线程同时被唤醒。</p><h3 id="CountDownLatch的不足"><a href="#CountDownLatch的不足" class="headerlink" title="CountDownLatch的不足"></a>CountDownLatch的不足</h3><p>CountDownLatch是一次性的，计算器的值只能在构造方法中初始化一次，之后没有任何机制再次对其设置值，当CountDownLatch使用完毕后，它不能再次被使用</p><h2 id="CyclicBarrier（回环栅栏-等待至-barrier-状态再全部同时执行）"><a href="#CyclicBarrier（回环栅栏-等待至-barrier-状态再全部同时执行）" class="headerlink" title="CyclicBarrier（回环栅栏-等待至 barrier 状态再全部同时执行）"></a>CyclicBarrier（回环栅栏-等待至 barrier 状态再全部同时执行）</h2><p>字面意思回环栅栏，通过它可以实现让一组线程等待至某个状态之后再全部同时执行。叫做回环是因为当所有等待线程都被释放以后，CyclicBarrier 可以被重用。我们暂且把这个状态就叫做barrier，当调用 await()方法之后，线程就处于 barrier 了。CyclicBarrier 中最重要的方法就是 await 方法，它有 2 个重载版本：</p><ol><li>public int await()：用来挂起当前线程，直至所有线程都到达 barrier 状态再同时执行后续任<br>务；</li><li>public int await(long timeout, TimeUnit unit)：让这些线程等待至一定的时间，如果还有<br>线程没有到达 barrier 状态就直接让到达 barrier 的线程执行后续任务。</li></ol><p>具体使用如下，另外 CyclicBarrier 是可以重用的。</p><details>    <summary>CyclicBarrier</summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">import java.util.concurrent.BrokenBarrierException;</span><br><span class="line">import java.util.concurrent.CyclicBarrier;</span><br><span class="line"></span><br><span class="line">public class CyclicBarrierTest &#123;</span><br><span class="line">    static class Writer extends Thread &#123;</span><br><span class="line">        private CyclicBarrier cyclicBarrier;</span><br><span class="line"></span><br><span class="line">        public Writer(CyclicBarrier cyclicBarrier) &#123;</span><br><span class="line">            this.cyclicBarrier = cyclicBarrier;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                Thread.sleep(5000);//以睡眠来模拟线程需要预定写入数据操作</span><br><span class="line">                System.out.println(&quot;线程&quot; + Thread.currentThread().getName() + &quot;写入数据完毕，等待其他线程写入完毕&quot;);</span><br><span class="line">                cyclicBarrier.await();</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; catch (BrokenBarrierException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(&quot;所有线程写入完毕，继续处理其他任务，比如数据操作&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int N = 4;</span><br><span class="line">        CyclicBarrier cyclicBarrier = new CyclicBarrier(N);</span><br><span class="line">        for (int i = 0; i &lt; N; i++) &#123;</span><br><span class="line">            new Writer(cyclicBarrier).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h2 id="Semaphore（信号量-控制同时访问的线程个数）"><a href="#Semaphore（信号量-控制同时访问的线程个数）" class="headerlink" title="Semaphore（信号量-控制同时访问的线程个数）"></a>Semaphore（信号量-控制同时访问的线程个数）</h2><p>Semaphore 翻译成字面意思为 信号量，Semaphore 可以控制同时访问的线程个数，通过acquire()获取一个许可，如果没有就等待，而release()释放一个许可。</p><p>Semaphore 类中比较重要的几个方法：</p><ol><li>public void acquire(): 用来获取一个许可，若无许可能够获得，则会一直等待，直到获得许<br>可。</li><li>public void acquire(int permits):获取 permits 个许可</li><li>public void release() { } :释放许可。注意，在释放许可之前，必须先获获得许可。</li><li>public void release(int permits) { }:释放 permits 个许可</li></ol><p>上面 4 个方法都会被阻塞，如果想立即得到执行结果，可以使用下面几个方法</p><ol><li>public boolean tryAcquire():尝试获取一个许可，若获取成功，则立即返回 true，若获取失败，则立即返回 false</li><li>public boolean tryAcquire(long timeout, TimeUnit unit):尝试获取一个许可，若在指定的时间内获取成功，则立即返回 true，否则则立即返回 false</li><li>public boolean tryAcquire(int permits):尝试获取 permits 个许可，若获取成功，则立即返回 true，若获取失败，则立即返回 false</li><li>public boolean tryAcquire(int permits, long timeout, TimeUnit unit): 尝试获取 permits个许可，若在指定的时间内获取成功，则立即返回 true，否则则立即返回 false</li><li>还可以通过 availablePermits()方法得到可用的许可数目。</li></ol><p>例子：若一个工厂有 5 台机器，但是有 8 个工人，一台机器同时只能被一个工人使用，只有使用完了，其他工人才能继续使用。那么我们就可以通过 Semaphore 来实现：</p><details>    <summary>Semaphore</summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import java.util.concurrent.Semaphore;</span><br><span class="line"></span><br><span class="line">public class SemaphoreTest &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int N = 8;//工人数</span><br><span class="line">        Semaphore semaphore = new Semaphore(5); //机器数目</span><br><span class="line">        for (int i = 0; i &lt; N; i++) &#123;</span><br><span class="line">            new Worker(i,semaphore).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static class Worker extends Thread &#123;</span><br><span class="line">        private int num;</span><br><span class="line">        private Semaphore semaphore;</span><br><span class="line"></span><br><span class="line">        public Worker(int num, Semaphore semaphore) &#123;</span><br><span class="line">            this.num = num;</span><br><span class="line">            this.semaphore = semaphore;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                semaphore.acquire();</span><br><span class="line">                System.out.println(&quot;工人&quot;+this.num+&quot;占用一个机器在生产...&quot;);</span><br><span class="line">                Thread.sleep(1000);</span><br><span class="line">                System.out.println(&quot;工人&quot;+this.num+&quot;释放出机器&quot;);</span><br><span class="line">                semaphore.release();</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><ul><li>CountDownLatch 和CyclicBarrier都能够实现线程之间的等待，只不过它们侧重点不同；CountDownLatch一般用于某个线程A等待若干个其他线程执行完任务之后，它才执行；而CyclicBarrier一般用于一组线程互相等待至某个状态，然后这一组线程再同时执行；另外，CountDownLatch是不能够重用的，而CyclicBarrier 是可以重用的。</li><li>Semaphore 其实和锁有点类似，它一般用于控制对某组资源的访问权限。</li></ul><h1 id="volatile-关键字的作用（变量可见性、禁止重排序）"><a href="#volatile-关键字的作用（变量可见性、禁止重排序）" class="headerlink" title="volatile 关键字的作用（变量可见性、禁止重排序）"></a>volatile 关键字的作用（变量可见性、禁止重排序）</h1><p>Java 语言提供了一种稍弱的同步机制，即 volatile 变量，用来确保将变量的更新操作通知到其他线程。volatile 变量具备两种特性，volatile 变量不会被缓存在寄存器或者对其他处理器不可见的地方，因此在读取 volatile 类型的变量时总会返回最新写入的值。</p><h2 id="变量可见性"><a href="#变量可见性" class="headerlink" title="变量可见性"></a>变量可见性</h2><p>其一是保证该变量对所有线程可见，这里的可见性指的是当一个线程修改了变量的值，那么新的值对于其他线程是可以立即获取的。</p><h2 id="禁止重排序"><a href="#禁止重排序" class="headerlink" title="禁止重排序"></a>禁止重排序</h2><p>volatile 禁止了指令重排。</p><h2 id="比-sychronized-更轻量级的同步锁"><a href="#比-sychronized-更轻量级的同步锁" class="headerlink" title="比 sychronized 更轻量级的同步锁"></a>比 sychronized 更轻量级的同步锁</h2><p>在访问 volatile 变量时不会执行加锁操作，因此也就不会使执行线程阻塞，因此 volatile 变量是一种比sychronized关键字更轻量级的同步机制。volatile 适合这种场景：一个变量被多个线程共享，线程直接给这个变量赋值。</p><p>当对非 volatile 变量进行读写的时候，每个线程先从内存拷贝变量到CPU缓存中。如果计算机有多个CPU，每个线程可能在不同的CPU上被处理，这意味着每个线程可以拷贝到不同的 CPU cache 中。而声明变量是 volatile 的，JVM 保证了每次读变量都从内存中读，跳过 CPU cache这一步。</p><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><p>值得说明的是对 volatile 变量的单次读/写操作可以保证原子性的，如long和double类型变量，但是并不能保证i++这种操作的原子性，因为本质上i++是读、写两次操作。在某些场景下可以代替Synchronized。但是,volatile的不能完全取代Synchronized的位置，只有在一些特殊的场景下，才能适用volatile。总的来说，必须同时满足下面两个条件才能保证在并发环境的线程安全：</p><p> （1）对变量的写操作不依赖于当前值（比如i++），或者说是单纯的变量赋值（booleanflag = true）。</p><p>（2）该变量没有包含在具有其他变量的不变式中，也就是说，不同的volatile 变量之间，不能互相依赖。只有在状态真正独立于程序内其他内容时才能使用 volatile。</p><h1 id="如何在两个线程之间共享数据"><a href="#如何在两个线程之间共享数据" class="headerlink" title="如何在两个线程之间共享数据"></a>如何在两个线程之间共享数据</h1><p>Java 里面进行多线程通信的主要方式就是共享内存的方式，共享内存主要的关注点有两个：可见性和有序性原子性。Java内存模型（JMM）解决了可见性和有序性的问题，而锁解决了原子性的问题，理想情况下我们希望做到“同步”和“互斥”。有以下常规实现方法：</p><h2 id="将数据抽象成一个类，并将数据的操作作为这个类的方法"><a href="#将数据抽象成一个类，并将数据的操作作为这个类的方法" class="headerlink" title="将数据抽象成一个类，并将数据的操作作为这个类的方法"></a>将数据抽象成一个类，并将数据的操作作为这个类的方法</h2><ol><li>将数据抽象成一个类，并将对这个数据的操作作为这个类的方法，这么设计可以和容易做到同步，只要在方法上加”synchronized“</li></ol><details>    <summary>数据抽象成一个类</summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class MyData &#123;</span><br><span class="line">    private int j=0;</span><br><span class="line">    public synchronized void add()&#123;</span><br><span class="line">        j++;</span><br><span class="line">        System.out.println(&quot;线程&quot;+Thread.currentThread().getName()+&quot; j 为：&quot;+j);</span><br><span class="line">    &#125;</span><br><span class="line">    public synchronized void dec()&#123;</span><br><span class="line">        j--;</span><br><span class="line">        System.out.println(&quot;线程&quot;+Thread.currentThread().getName()+&quot; j 为：&quot;+j);</span><br><span class="line">    &#125;</span><br><span class="line">    public int getData()&#123;</span><br><span class="line">        return j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        MyData data = new MyData();</span><br><span class="line">        Runnable add = new AddRunnable(data);</span><br><span class="line">        Runnable dec = new DecRunnable(data);</span><br><span class="line">        for(int i=0;i&lt;2;i++)&#123;</span><br><span class="line">            new Thread(add).start();</span><br><span class="line">            new Thread(dec).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class DecRunnable implements Runnable &#123;</span><br><span class="line">    MyData data;</span><br><span class="line">    public DecRunnable(MyData data)&#123;</span><br><span class="line">        this.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        data.dec();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class AddRunnable implements Runnable&#123;</span><br><span class="line">    MyData data;</span><br><span class="line">    public AddRunnable(MyData data)&#123;</span><br><span class="line">        this.data= data;</span><br><span class="line">    &#125; public void run() &#123;</span><br><span class="line">        data.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h2 id="Runnable-对象作为一个类的内部类"><a href="#Runnable-对象作为一个类的内部类" class="headerlink" title="Runnable 对象作为一个类的内部类"></a>Runnable 对象作为一个类的内部类</h2><ol start="2"><li>将 Runnable 对象作为一个类的内部类，共享数据作为这个类的成员变量，每个线程对共享数据的操作方法也封装在外部类，以便实现对数据的各个操作的同步和互斥，作为内部类的各个Runnable对象调用外部类的这些方法。</li></ol><details>    <summary>数据抽象成一个类</summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class MyData &#123;</span><br><span class="line">    private int j = 0;</span><br><span class="line"></span><br><span class="line">    public synchronized void add() &#123;</span><br><span class="line">        j++;</span><br><span class="line">        System.out.println(&quot;线程&quot; + Thread.currentThread().getName() + &quot; j 为：&quot; + j);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public synchronized void dec() &#123;</span><br><span class="line">        j--;</span><br><span class="line">        System.out.println(&quot;线程&quot; + Thread.currentThread().getName() + &quot; j 为：&quot; + j);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getData() &#123;</span><br><span class="line">        return j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">class TestThread &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        final MyData data = new MyData();</span><br><span class="line">        for (int i = 0; i &lt; 2; i++) &#123;</span><br><span class="line">            new Thread(new Runnable() &#123;</span><br><span class="line">                public void run() &#123;</span><br><span class="line">                    data.add();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">            new Thread(new Runnable() &#123;</span><br><span class="line">                public void run() &#123;</span><br><span class="line">                    data.dec();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h1 id="ThreadLocal-作用（线程本地存储）"><a href="#ThreadLocal-作用（线程本地存储）" class="headerlink" title="ThreadLocal 作用（线程本地存储）"></a>ThreadLocal 作用（线程本地存储）</h1><p>ThreadLocal，很多地方叫做线程本地变量，也有些地方叫做线程本地存储，ThreadLocal的作用是提供线程内的局部变量，这种变量在线程的生命周期内起作用，减少同一个线程内多个函数或者组件之间一些公共变量的传递的复杂度。</p><h2 id="ThreadLocalMap（线程的一个属性）"><a href="#ThreadLocalMap（线程的一个属性）" class="headerlink" title="ThreadLocalMap（线程的一个属性）"></a>ThreadLocalMap（线程的一个属性）</h2><ol><li>每个线程中都有一个自己的 ThreadLocalMap 类对象，可以将线程自己的对象保持到其中，各管各的，线程可以正确的访问到自己的对象。</li><li>将一个共用的 ThreadLocal静态实例作为key，将不同对象的引用保存到不同线程的ThreadLocalMap 中，然后在线程执行的各处通过这个静态 ThreadLocal 实例的get()方法取得自己线程保存的那个对象，避免了将这个对象作为参数传递的麻烦。</li><li>ThreadLocalMap 其实就是线程里面的一个属性，它在 Thread 类中定义</li></ol><p>ThreadLocal.ThreadLocalMap threadLocals = null;</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>最常见的 ThreadLocal 使用场景为 用来解决 数据库连接、Session 管理等。</p><details>    <summary>数据抽象成一个类</summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">private static final ThreadLocal threadSession = new ThreadLocal();</span><br><span class="line">public static Session getSession() throws InfrastructureException &#123;</span><br><span class="line">    Session s = (Session) threadSession.get();</span><br><span class="line">    try &#123;</span><br><span class="line">        if (s == null) &#123;</span><br><span class="line">            s = getSessionFactory().openSession();</span><br><span class="line">            threadSession.set(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (HibernateException ex) &#123;</span><br><span class="line">        throw new InfrastructureException(ex);</span><br><span class="line">    &#125;</span><br><span class="line">    return s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h1 id="synchronized-和-ReentrantLock-的区别"><a href="#synchronized-和-ReentrantLock-的区别" class="headerlink" title="synchronized 和 ReentrantLock 的区别"></a>synchronized 和 ReentrantLock 的区别</h1><h2 id="两者的共同点："><a href="#两者的共同点：" class="headerlink" title="两者的共同点："></a>两者的共同点：</h2><ol><li>都是用来协调多线程对共享对象、变量的访问</li><li>都是可重入锁，同一线程可以多次获得同一个锁</li><li>都保证了可见性和互斥性</li></ol><h2 id="两者的不同点："><a href="#两者的不同点：" class="headerlink" title="两者的不同点："></a>两者的不同点：</h2><ol><li>ReentrantLock 显示的获得、释放锁，synchronized 隐式获得释放锁</li><li>ReentrantLock 可响应中断、可轮回，synchronized 是不可以响应中断的，为处理锁的不可用性提供了更高的灵活性</li><li>ReentrantLock 是 API 级别的，synchronized 是 JVM 级别的</li><li>ReentrantLock 可以实现公平锁</li><li>ReentrantLock 通过 Condition 可以绑定多个条件</li><li>底层实现不一样， synchronized 是同步阻塞，使用的是悲观并发策略，lock 是同步非阻塞，采用的是乐观并发策略</li><li>Lock 是一个接口，而 synchronized 是 Java 中的关键字，synchronized 是内置的语言实现。</li><li>synchronized 在发生异常时，会自动释放线程占有的锁，因此不会导致死锁现象发生；而 Lock 在发生异常时，如果没有主动通过 unLock()去释放锁，则很可能造成死锁现象，因此使用 Lock 时需要在 finally 块中释放锁。</li><li>Lock 可以让等待锁的线程响应中断，而 synchronized 却不行，使用 synchronized 时，等待的线程会一直等待下去，不能够响应中断。</li><li>通过 Lock 可以知道有没有成功获取锁，而 synchronized 却无法办到。</li><li>Lock 可以提高多个线程进行读操作的效率，既就是实现读写锁等。</li></ol><h1 id="ConcurrentHashMap-并发"><a href="#ConcurrentHashMap-并发" class="headerlink" title="ConcurrentHashMap 并发"></a>ConcurrentHashMap 并发</h1><h2 id="减小锁粒度"><a href="#减小锁粒度" class="headerlink" title="减小锁粒度"></a>减小锁粒度</h2><p>减小锁粒度是指缩小锁定对象的范围，从而减小锁冲突的可能性，从而提高系统的并发能力。减小锁粒度是一种削弱多线程锁竞争的有效手段，这种技术典型的应用是 ConcurrentHashMap(高性能的 HashMap)类的实现。对于HashMap而言，最重要的两个方法是get与set方法，如果我们对整个HashMap加锁，可以得到线程安全的对象，但是加锁粒度太大。Segment 的大小也被称为 ConcurrentHashMap 的并发度。</p><h2 id="ConcurrentHashMap-分段锁"><a href="#ConcurrentHashMap-分段锁" class="headerlink" title="ConcurrentHashMap 分段锁"></a>ConcurrentHashMap 分段锁</h2><p>ConcurrentHashMap，它内部细分了若干个小的HashMap，称之为段(Segment)。默认情况下一个ConcurrentHashMap被进一步细分为16个段，既就是锁的并发度。如果需要在 ConcurrentHashMap 中添加一个新的表项，并不是将整个HashMap加锁，而是首先根据hashcode得到该表项应该存放在哪个段中，然后对该段加锁，并完成 put 操作。在多线程环境中，如果多个线程同时进行 put操作，只要被加入的表项不存放在同一个段中，则线程间可以做到真正的并行。</p><h3 id="ConcurrentHashMap-是由-Segment-数组结构和-HashEntry-数组结构组成"><a href="#ConcurrentHashMap-是由-Segment-数组结构和-HashEntry-数组结构组成" class="headerlink" title="ConcurrentHashMap 是由 Segment 数组结构和 HashEntry 数组结构组成"></a>ConcurrentHashMap 是由 Segment 数组结构和 HashEntry 数组结构组成</h3><p>ConcurrentHashMap 是由 Segment 数组结构和 HashEntry 数组结构组成。Segment 是一种可重入锁 ReentrantLock，在 ConcurrentHashMap 里扮演锁的角色，HashEntry 则用于存储键值对数据。一个ConcurrentHashMap里包含一个Segment数组，Segment的结构和HashMap类似，是一种数组和链表结构， 一个 Segment 里包含一个 HashEntry 数组，每个 HashEntry 是一个链表结构的元素， 每个 Segment 守护一个 HashEntry 数组里的元素,当对 HashEntry 数组的数据进行修改时，必须首先获得它对应的 Segment 锁。</p><h1 id="Java-中用到的线程调度"><a href="#Java-中用到的线程调度" class="headerlink" title="Java 中用到的线程调度"></a>Java 中用到的线程调度</h1><h2 id="抢占式调度："><a href="#抢占式调度：" class="headerlink" title="抢占式调度："></a>抢占式调度：</h2><p>抢占式调度指的是每条线程执行的时间、线程的切换都由系统控制，系统控制指的是在系统某种运行机制下，可能每条线程都分同样的执行时间片，也可能是某些线程执行的时间片较长，甚至某些线程得不到执行的时间片。在这种机制下，一个线程的堵塞不会导致整个进程堵塞。</p><h2 id="协同式调度："><a href="#协同式调度：" class="headerlink" title="协同式调度："></a>协同式调度：</h2><p>协同式调度指某一线程执行完后主动通知系统切换到另一线程上执行，这种模式就像接力赛一样，一个人跑完自己的路程就把接力棒交接给下一个人，下个人继续往下跑。线程的执行时间由线程本身控制，线程切换可以预知，不存在多线程同步问题，但它有一个致命弱点：如果一个线程编写有问题，运行到一半就一直堵塞，那么可能导致整个系统崩溃。</p><h2 id="JVM-的线程调度实现（抢占式调度）"><a href="#JVM-的线程调度实现（抢占式调度）" class="headerlink" title="JVM 的线程调度实现（抢占式调度）"></a>JVM 的线程调度实现（抢占式调度）</h2><p>java 使用的线程调使用抢占式调度，Java中线程会按优先级分配CPU时间片运行，且优先级越高越优先执行，但优先级高并不代表能独自占用执行时间片，可能是优先级高得到越多的执行时间片，反之，优先级低的分到的执行时间少但不会分配不到执行时间。</p><h2 id="线程让出-cpu-的情况："><a href="#线程让出-cpu-的情况：" class="headerlink" title="线程让出 cpu 的情况："></a>线程让出 cpu 的情况：</h2><ol><li>当前运行线程主动放弃 CPU，JVM 暂时放弃CPU操作（基于时间片轮转调度的JVM操作系统不会让线程永久放弃CPU，或者说放弃本次时间片的执行权），例如调用 yield()方法。</li><li>当前运行线程因为某些原因进入阻塞状态，例如阻塞在 I/O 上。</li><li>当前运行线程结束，即运行完 run()方法里面的任务。</li></ol><h1 id="进程调度算法"><a href="#进程调度算法" class="headerlink" title="进程调度算法"></a>进程调度算法</h1><h2 id="优先调度算法"><a href="#优先调度算法" class="headerlink" title="优先调度算法"></a>优先调度算法</h2><ol><li>先来先服务调度算法（FCFS）<br>当在作业调度中采用该算法时，每次调度都是从后备作业队列中选择一个或多个最先进入该队列的作业，将它们调入内存，为它们分配资源、创建进程，然后放入就绪队列。在进程调度中采用FCFS算法时，则每次调度是从就绪队列中选择一个最先进入该队列的进程，为之分配处理机，使之投入运行。该进程一直运行到完成或发生某事件而阻塞后才放弃处理机，特点是：算法比较简单，可以实现基本上的公平。</li><li>短作业(进程)优先调度算法<br>短作业优先(SJF)的调度算法是从后备队列中选择一个或若干个估计运行时间最短的作业，将它们调入内存运行。而短进程优先(SPF)调度算法则是从就绪队列中选出一个估计运行时间最短的进程，将处理机分配给它，使它立即执行并一直执行到完成，或发生某事件而被阻塞放弃处理机时再重新调度。该算法未照顾紧迫型作业。</li></ol><h2 id="高优先权优先调度算法"><a href="#高优先权优先调度算法" class="headerlink" title="高优先权优先调度算法"></a>高优先权优先调度算法</h2><p> 为了照顾紧迫型作业，使之在进入系统后便获得优先处理，引入了最高优先权优先(FPF)调度算法。当把该算法用于作业调度时，系统将从后备队列中选择若干个优先权最高的作业装入内存。当用于进程调度时，该算法是把处理机分配给就绪队列中优先权最高的进程。</p><ol><li>非抢占式优先权算法</li></ol><p>在这种方式下，系统一旦把处理机分配给就绪队列中优先权最高的进程后，该进程便一直执行下去，直至完成；或因发生某事件使该进程放弃处理机时。这种调度算法主要用于批处理系统中；也可用于某些对实时性要求不严的实时系统中。</p><ol start="2"><li>抢占式优先权调度算法</li></ol><p>在这种方式下，系统同样是把处理机分配给优先权最高的进程，使之执行。但在其执行期间，只要又出现了另一个其优先权更高的进程，进程调度程序就立即停止当前进程(原优先权最高的进程)的执行，重新将处理机分配给新到的优先权最高的进程。显然，这种抢占式的优先权调度算法能更好地满足紧迫作业的要求，故而常用于要求比较严格的实时系统中，以及对性能要求较高的批处理和分时系统中。</p><p>3．高响应比优先调度算法</p><p>在批处理系统中，短作业优先算法是一种比较好的算法，其主要的不足之处是长作业的运行得不到保证。如果我们能为每个作业引入前面所述的动态优先权，并使作业的优先级随着等待时间的增加而以速率a提高，则长作业在等待一定的时间后，必然有机会分配到处理机。该优先权的变化规律可描述为：</p><p> (1) 如果作业的等待时间相同，则要求服务的时间愈短，其优先权愈高，因而该算法有利于短作业。</p><p> (2) 当要求服务的时间相同时，作业的优先权决定于其等待时间，等待时间愈长，其优先权愈高，因而它实现的是先来先服务。</p><p> (3) 对于长作业，作业的优先级可以随等待时间的增加而提高，当其等待时间足够长时，其优先级便可升到很高，从而也可获得处理机。简言之，该算法既照顾了短作业，又考虑了作业到达的先后次序，不会使长作业长期得不到服务。因此，该算法实现了一种较好的折衷。当然，在利用该算法时，每要进行调度之前，都须先做响应比的计算，这会增加系统开销。</p><h2 id="基于时间片的轮转调度算法"><a href="#基于时间片的轮转调度算法" class="headerlink" title="基于时间片的轮转调度算法"></a>基于时间片的轮转调度算法</h2><ol><li>时间片轮转法</li></ol><p>在早期的时间片轮转法中，系统将所有的就绪进程按先来先服务的原则排成一个队列，每次调度时，把CPU分配给队首进程，并令其执行一个时间片。时间片的大小从几 ms 到几百ms。当执行的时间片用完时，由一个计时器发出时钟中断请求，调度程序便据此信号来停止该进程的执行，并将它送往就绪队列的末尾；然后，再把处理机分配给就绪队列中新的队首进程，同时也让它执行一个时间片。这样就可以保证就绪队列中的所有进程在一给定的时间内均能获得一时间片的处<br>理机执行时间。</p><ol start="2"><li><p>多级反馈队列调度算法</p><p>(1) 应设置多个就绪队列，并为各个队列赋予不同的优先级。第一个队列的优先级最高，第二个队列次之，其余各队列的优先权逐个降低。该算法赋予各个队列中进程执行时间片的大小也各不相同，在优先权愈高的队列中，为每个进程所规定的执行时间片就愈小。例如，第二个队列的时间片要比第一个队列的时间片长一倍，……，第 i+1 个队列的时间片要比第 i 个队列的时间片长一倍。</p><p>(2) 当一个新进程进入内存后，首先将它放入第一队列的末尾，按 FCFS 原则排队等待调度。当轮到该进程执行时，如它能在该时间片内完成，便可准备撤离系统；如果它在一个时间片结束时尚未完成，调度程序便将该进程转入第二队列的末尾，再同样地按FCFS原则等待调度执行；如果它在第二队列中运行一个时间片后仍未完成，再依次将它放入第三队列，……，如此下去，当一个长作业(进程)从第一队列依次降到第 n 队列后，在第 n 队列便采取按时间片轮转的方式运行。</p></li></ol><p>(3) 仅当第一队列空闲时，调度程序才调度第二队列中的进程运行；仅当第 1～(i-1)队列均空时，才会调度第 i队列中的进程运行。如果处理机正在第 i 队列中为某进程服务时，又有新进程进入优先权较高的队列(第1～(i-1)中的任何一个队列)，则此时新进程将抢占正在运行进程的处理机，即由调度程序把正在运行的进程放回到第i队列的末尾，把处理机分配给新到的高优先权进程。在多级反馈队列调度算法中，如果规定第一个队列的时间片略大于多数人机交互所需之处理时间时，便能够较好的满足各种类型用户的需要。</p><h1 id="什么是-CAS（比较并交换-乐观锁机制-锁自旋）"><a href="#什么是-CAS（比较并交换-乐观锁机制-锁自旋）" class="headerlink" title="什么是 CAS（比较并交换-乐观锁机制-锁自旋）"></a>什么是 CAS（比较并交换-乐观锁机制-锁自旋）</h1><h2 id="概念及特性"><a href="#概念及特性" class="headerlink" title="概念及特性"></a>概念及特性</h2><p>CAS（Compare And Swap/Set）比较并交换，CAS 算法的过程是这样：它包含 3 个参数<br>CAS(V,E,N)。V 表示要更新的变量(内存值)，E 表示预期值(旧的)，N 表示新值。当且仅当 V 值等于 E 值时，才会将 V 的值设为 N，如果 V 值和 E 值不同，则说明已经有其他线程做了更新，则当前线程什么都不做。最后，CAS返回当前V的真实值。CAS操作是抱着乐观的态度进行的(乐观锁)，它总是认为自己可以成功完成操作。当多个线程同时使用CAS操作一个变量时，只有一个会胜出，并成功更新，其余均会失败。失败的线程不会被挂起，仅是被告知失败，并且允许再次尝试，当然也允许失败的线程放弃操作。基于这样的原理，CAS 操作即使没有锁，也可以发现其他线程对当前线程的干扰，并进行恰当的处理。</p><h2 id="原子包-java-util-concurrent-atomic（锁自旋）"><a href="#原子包-java-util-concurrent-atomic（锁自旋）" class="headerlink" title="原子包 java.util.concurrent.atomic（锁自旋）"></a>原子包 java.util.concurrent.atomic（锁自旋）</h2><p>JDK1.5 的原子包：java.util.concurrent.atomic 这个包里面提供了一组原子类。其基本的特性就<br>是在多线程环境下，当有多个线程同时执行这些类的实例包含的方法时，具有排他性，即当某个线程进入方法，执行其中的指令时，不会被其他线程打断，而别的线程就像自旋锁一样，一直等到该方法执行完成，才由 JVM 从等待队列中选择一个另一个线程进入，这只是一种逻辑上的理解。</p><p>相对于对于 synchronized这种阻塞算法，CAS是非阻塞算法的一种常见实现。由于一般 CPU 切换时间比CPU指令集操作更加长，所以J.U.C在性能上有了很大的提升。如下代码：</p><details>    <summary>原子包</summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class AtomicInteger extends Number implements java.io.Serializable &#123;</span><br><span class="line">            private volatile int value;</span><br><span class="line">            public final int get() &#123;</span><br><span class="line">                return value;</span><br><span class="line">            &#125;</span><br><span class="line">            public final int getAndIncrement() &#123;</span><br><span class="line">                for (;;) &#123; //CAS 自旋，一直尝试，直达成功</span><br><span class="line">                    int current = get();</span><br><span class="line">                    int next = current + 1;</span><br><span class="line">                    if (compareAndSet(current, next))</span><br><span class="line">                        return current;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            public final boolean compareAndSet(int expect, int update) &#123;</span><br><span class="line">                return unsafe.compareAndSwapInt(this, valueOffset, expect, update);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></details>getAndIncrement 采用了CAS操作，每次从内存中读取数据然后将此数据和+1 后的结果进行CAS操作，如果成功就返回结果，否则重试直到成功为止。而 compareAndSet 利用 JNI 来完成CPU 指令的操作。<h2 id="ABA-问题"><a href="#ABA-问题" class="headerlink" title="ABA 问题"></a>ABA 问题</h2><p>CAS 会导致“ABA 问题”。CAS 算法实现一个重要前提需要取出内存中某时刻的数据，而在下时刻比较并替换，那么在这个时间差类会导致数据的变化。</p><p>比如说一个线程 one 从内存位置 V 中取出 A，这时候另一个线程 two 也从内存中取出 A，并且two 进行了一些操作变成了 B，然后 two 又将V位置的数据变成 A，这时候线程 one 进行 CAS 操作发现内存中仍然是 A，然后 one 操作成功。尽管线程 one 的 CAS 操作成功，但是不代表这个过程就是没有问题的。</p><p>部分乐观锁的实现是通过版本号（version）的方式来解决ABA问题，乐观锁每次在执行数据的修改操作时，都会带上一个版本号，一旦版本号和数据的版本号一致就可以执行修改操作并对版本号执行+1操作，否则就执行失败。因为每次操作的版本号都会随之增加，所以不会出现ABA问题，因为版本号只会增加不会减少。</p><h1 id="什么是-AQS（抽象的队列同步器）"><a href="#什么是-AQS（抽象的队列同步器）" class="headerlink" title="什么是 AQS（抽象的队列同步器）"></a>什么是 AQS（抽象的队列同步器）</h1><p>AbstractQueuedSynchronizer类如其名，抽象的队列式的同步器，AQS定义了一套多线程访问共享资源的同步器框架，许多同步类实现都依赖于它，如常用的ReentrantLock/Semaphore/CountDownLatch。</p><p>它维护了一个 volatile int state（代表共享资源）和一个 FIFO 线程等待队列（多线程争用资源被阻塞时会进入此队列）。这里 volatile 是核心关键词，具体volatile的语义，在此不述。state的访问方式有三种:</p><pre><code>getState()setState()compareAndSetState()</code></pre><p>AQS 定义两种资源共享方式</p><h2 id="Exclusive-独占资源-ReentrantLock"><a href="#Exclusive-独占资源-ReentrantLock" class="headerlink" title="Exclusive 独占资源-ReentrantLock"></a>Exclusive 独占资源-ReentrantLock</h2><p>Exclusive（独占，只有一个线程能执行，如 ReentrantLock）</p><h2 id="Share-共享资源-Semaphore-CountDownLatch"><a href="#Share-共享资源-Semaphore-CountDownLatch" class="headerlink" title="Share 共享资源-Semaphore/CountDownLatch"></a>Share 共享资源-Semaphore/CountDownLatch</h2><p>Share（共享，多个线程可同时执行，如 Semaphore/CountDownLatch）。</p><p>AQS 只是一个框架，具体资源的获取/释放方式交由自定义同步器去实现，AQS 这里只定义了一个接口，具体资源的获取交由自定义同步器去实现了（通过 state 的 get/set/CAS)之所以没有定义成abstract ，是 因 为独 占模 式 下 只 用实现 tryAcquire-tryRelease ，而 共享 模 式 下 只用 实 现tryAcquireShared-tryReleaseShared。如果都定义成abstract，那么每个模式也要去实现另一模式下的接口。不同的自定义同步器争用共享资源的方式也不同。自定义同步器在实现时只需要实现共享资源state的获取与释放方式即可，至于具体线程等待队列的维护（如获取资源失败入队/唤醒出队等），AQS已经在顶层实现好了。自定义同步器实现时主要实现以下几种方法：</p><p>1．isHeldExclusively()：该线程是否正在独占资源。只有用到 condition 才需要去实现它。</p><p>2．tryAcquire(int)：独占方式。尝试获取资源，成功则返回true，失败则返回 false。</p><p>3．tryRelease(int)：独占方式。尝试释放资源，成功则返回true，失败则返回 false。</p><p>4．tryAcquireShared(int)：共享方式。尝试获取资源。负数表示失败；0 表示成功，但没有剩余可用资源；正数表示成功，且有剩余资源。</p><p>5．tryReleaseShared(int)：共享方式。尝试释放资源，如果释放后允许唤醒后续等待结点返回true，否则返回 false。</p><h2 id="同步器的实现是-ABS-核心（state-资源状态计数）"><a href="#同步器的实现是-ABS-核心（state-资源状态计数）" class="headerlink" title="同步器的实现是 ABS 核心（state 资源状态计数）"></a>同步器的实现是 ABS 核心（state 资源状态计数）</h2><p>同步器的实现是 ABS 核心，以 ReentrantLock 为例，state 初始化为 0，表示未锁定状态。A 线程lock()时，会调用 tryAcquire()独占该锁并将 state+1。此后，其他线程再 tryAcquire()时就会失败，直到 A 线程unlock()到state=0（即释放锁）为止，其它线程才有机会获取该锁。当然，释放锁之前，A 线程自己是可以重复获取此锁的（state 会累加），这就是可重入的概念。但要注意，获取多少次就要释放多么次，这样才能保证 state 是能回到零态的。</p><p>以 CountDownLatch 以例，任务分为 N 个子线程去执行，state 也初始化为 N（注意 N 要与线程个数一致）。这N个子线程是并行执行的，每个子线程执行完后 countDown()一次，state会 CAS 减 1。等到所有子线程都执行完后(即state=0)，会unpark()主调用线程，然后主调用线程就会从await()函数返回，继续后余动作。</p><h2 id="ReentrantReadWriteLock-实现独占和共享两种方式"><a href="#ReentrantReadWriteLock-实现独占和共享两种方式" class="headerlink" title="ReentrantReadWriteLock 实现独占和共享两种方式"></a>ReentrantReadWriteLock 实现独占和共享两种方式</h2><p> 一般来说，自定义同步器要么是独占方法，要么是共享方式，他们也只需实现 tryAcquiretryRelease、tryAcquireShared-tryReleaseShared中的一种即可。但 AQS 也支持自定义同步器同时实现独占和共享两种方式，如 ReentrantReadWriteLock。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JAVA 多线程并发&lt;/p&gt;
    
    </summary>
    
      <category term="2021年12月" scheme="http://yoursite.com/categories/2021%E5%B9%B412%E6%9C%88/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Concurrency" scheme="http://yoursite.com/tags/Concurrency/"/>
    
  </entry>
  
  <entry>
    <title>JAVA 集合学习笔记（set，list和map）</title>
    <link href="http://yoursite.com/2021/12/22/JAVA%20%E9%9B%86%E5%90%88%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88set%EF%BC%8Clist%E5%92%8Cmap%EF%BC%89/"/>
    <id>http://yoursite.com/2021/12/22/JAVA 集合学习笔记（set，list和map）/</id>
    <published>2021-12-22T11:30:12.000Z</published>
    <updated>2021-12-29T10:10:13.359Z</updated>
    
    <content type="html"><![CDATA[<p>集合类存放于 Java.util 包中，主要有 3 种：set(集）、list(列表包含 Queue）和 map(映射)。</p><a id="more"></a><p>[TOC]</p><h1 id="接口继承关系和实现"><a href="#接口继承关系和实现" class="headerlink" title="接口继承关系和实现"></a>接口继承关系和实现</h1><p>集合类存放于 Java.util 包中，主要有 3 种：set(集）、list(列表包含 Queue）和 map(映射)。</p><ol><li>Collection：Collection 是集合 List、Set、Queue 的最基本的接口。</li><li>Iterator：迭代器，可以通过迭代器遍历集合中的数据</li><li>Map：是映射表的基础接口</li></ol><h1 id="List"><a href="#List" class="headerlink" title="List"></a>List</h1><p>Java 的 List 是非常常用的数据类型。List 是有序的 Collection。Java List 一共三个实现类：分别是 ArrayList、Vector 和 LinkedList。</p><h2 id="ArrayList（数组）"><a href="#ArrayList（数组）" class="headerlink" title="ArrayList（数组）"></a>ArrayList（数组）</h2><p>ArrayList 是最常用的 List 实现类，内部是通过数组实现的，它允许对元素进行快速随机访问。数组的缺点是每个元素之间不能有间隔，当数组大小不满足时需要增加存储能力，就要将已经有数组的数据复制到新的存储空间中。当从ArrayList的中间位置插入或者删除元素时，需要对数组进行复制、移动、代价比较高。因此，它适合随机查找和遍历，不适合插入和删除。</p><h2 id="Vector（数组实现、线程同步）"><a href="#Vector（数组实现、线程同步）" class="headerlink" title="Vector（数组实现、线程同步）"></a>Vector（数组实现、线程同步）</h2><p>Vector 与 ArrayList 一样，也是通过数组实现的，不同的是它支持线程的同步，即某一时刻只有一个线程能够写Vector，避免多线程同时写而引起的不一致性，但实现同步需要很高的花费，因此，访问它比访问 ArrayList 慢。</p><h2 id="LinkList（链表）"><a href="#LinkList（链表）" class="headerlink" title="LinkList（链表）"></a>LinkList（链表）</h2><p>LinkedList 是用链表结构存储数据的，很适合数据的动态插入和删除，随机访问和遍历速度比较慢。另外，他还提供了List接口中没有定义的方法，专门用于操作表头和表尾元素，可以当作堆栈、队列和双向队列使用。</p><h1 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h1><p>Set 注重独一无二的性质,该体系集合用于存储无序(存入和取出的顺序不一定相同)元素，值不能重复。对象的相等性本质是对象hashCode值（java是依据对象的内存地址计算出的此序号）判断的，如果想要让两个不同的对象视为相等的，就必须覆盖 Object 的 hashCode 方法和 equals 方法。</p><h2 id="HashSet（Hash-表）"><a href="#HashSet（Hash-表）" class="headerlink" title="HashSet（Hash 表）"></a>HashSet（Hash 表）</h2><p>哈希表边存放的是哈希值。HashSet 存储元素的顺序并不是按照存入时的顺序（和List显然不同）而是按照哈希值来存的所以取数据也是按照哈希值取得。元素的哈希值是通过元素的hashcode 方法来获取的, HashSet 首先判断两个元素的哈希值，如果哈希值一样，接着会比较equals 方法 如果 equls 结果为 true ，HashSet 就视为同一个元素。如果 equals为false就不是同一个元素。哈希值相同equals为false的元素是怎么存储呢,就是在同样的哈希值下顺延（可以认为哈希值相同的元素放在一个哈希桶中）。也就是哈希一样的存一列。如图 1 表示 hashCode 值不相同的情况；图 2 表示 hashCode 值相同，但 equals 不相同的情况。HashSet 通过 hashCode值来确定元素在内存中的位置。一个hashCode位置上可以存放多个元素。</p><h2 id="TreeSet（二叉树）"><a href="#TreeSet（二叉树）" class="headerlink" title="TreeSet（二叉树）"></a>TreeSet（二叉树）</h2><ol><li>TreeSet()是使用二叉树的原理对新 add()的对象按照指定的顺序排序（升序、降序），每增加一个对象都会进行排序，将对象插入的二叉树指定的位置。</li><li>Integer 和 String 对象都可以进行默认的 TreeSet 排序，而自定义类的对象是不可以的，自己定义的类必须实现 Comparable 接口，并且覆写相应的 compareTo()函数，才可以正常使用。</li><li>在覆写 compare()函数时，要返回相应的值才能使 TreeSet 按照一定的规则来排序</li><li>比较此对象与指定对象的顺序。如果该对象小于、等于或大于指定对象，则分别返回负整数、零或正整数。</li></ol><h2 id="LinkHashSet（HashSet-LinkedHashMap）"><a href="#LinkHashSet（HashSet-LinkedHashMap）" class="headerlink" title="LinkHashSet（HashSet+LinkedHashMap）"></a>LinkHashSet（HashSet+LinkedHashMap）</h2><p> 对于 LinkedHashSet 而言，它继承与 HashSet、又基于 LinkedHashMap 来实现的。LinkedHashSet 底层使用 LinkedHashMap 来保存所有元素，它继承与 HashSet，其所有的方法操作上又与 HashSet相同，因此LinkedHashSet的实现上非常简单，只提供了四个构造方法，并通过传递一个标识参数，调用父类的构造器，底层构造一个 LinkedHashMap 来实现，在相关操作上与父类 HashSet 的操作相同，直接调用父类 HashSet 的方法即可。</p><h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><h2 id="HashMap（数组-链表-红黑树）"><a href="#HashMap（数组-链表-红黑树）" class="headerlink" title="HashMap（数组+链表+红黑树）"></a>HashMap（数组+链表+红黑树）</h2><p>HashMap 根据键的 hashCode 值存储数据，大多数情况下可以直接定位到它的值，因而具有很快的访问速度，但遍历顺序却是不确定的。 HashMap最多只允许一条记录的键为 null，允许多条记录的值为 null。HashMap 非线程安全，即任一时刻可以有多个线程同时写 HashMap，可能会导<br>致数据的不一致。如果需要满足线程安全，可以用 Collections 的 synchronizedMap 方法使HashMap 具有线程安全的能力，或者使用 ConcurrentHashMap。我们用下面这张图来介绍HashMap 的结构。</p><h3 id="JAVA7-实现"><a href="#JAVA7-实现" class="headerlink" title="JAVA7 实现"></a>JAVA7 实现</h3><p>大方向上，HashMap 里面是一个数组，然后数组中每个元素是一个单向链表。上图中，每个绿色的实体是嵌套类 Entry 的实例，Entry 包含四个属性：key, value, hash 值和用于单向链表的 next。</p><ol><li>capacity：当前数组容量，始终保持 2^n，可以扩容，扩容后数组大小为当前的 2 倍。</li><li>loadFactor：负载因子，默认为 0.75。</li><li>threshold：扩容的阈值，等于 capacity * loadFactor</li></ol><h3 id="JAVA8-实现"><a href="#JAVA8-实现" class="headerlink" title="JAVA8 实现"></a>JAVA8 实现</h3><p>Java8 对 HashMap 进行了一些修改，最大的不同就是利用了红黑树，所以其由 数组+链表+红黑树 组成。根据Java7 HashMap的介绍，我们知道，查找的时候，根据hash值我们能够快速定位到数组的具体下标，但是之后的话，需要顺着链表一个个比较下去才能找到我们需要的，时间复杂度取决于链表的长度，为 O(n)。为了降低这部分的开销，在Java8中，当链表中的元素超过了8个以后，会将链表转换为红黑树，在这些位置进行查找的时候可以降低时间复杂度为 O(logN)。</p><h2 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h2><h3 id="Segment-段"><a href="#Segment-段" class="headerlink" title="Segment 段"></a>Segment 段</h3><p>ConcurrentHashMap 和 HashMap 思路是差不多的，但是因为它支持并发操作，所以要复杂一些。整个 ConcurrentHashMap 由一个个 Segment 组成，Segment 代表”部分“或”一段“的意思，所以很多地方都会将其描述为分段锁。注意，行文中，我很多地方用了“槽”来代表一个segment。</p><h3 id="线程安全（Segment-继承-ReentrantLock-加锁）"><a href="#线程安全（Segment-继承-ReentrantLock-加锁）" class="headerlink" title="线程安全（Segment 继承 ReentrantLock 加锁）"></a>线程安全（Segment 继承 ReentrantLock 加锁）</h3><p>简单理解就是，ConcurrentHashMap 是一个 Segment 数组，Segment 通过继承ReentrantLock 来进行加锁，所以每次需要加锁的操作锁住的是一个 segment，这样只要保证每个 Segment 是线程安全的，也就实现了全局的线程安全。</p><h3 id="并行度（默认-16）"><a href="#并行度（默认-16）" class="headerlink" title="并行度（默认 16）"></a>并行度（默认 16）</h3><p>concurrencyLevel：并行级别、并发数、Segment 数，怎么翻译不重要，理解它。默认是 16，也就是说 ConcurrentHashMap 有 16 个 Segments，所以理论上，这个时候，最多可以同时支持 16 个线程并发写，只要它们的操作分别分布在不同的 Segment 上。这个值可以在初始化的时<br>候设置为其他值，但是一旦初始化以后，它是不可以扩容的。再具体到每个Segment内部，其实每个Segment很像之前介绍的HashMap，不过它要保证线程安全，所以处理起来要麻烦些。</p><h3 id="Java8-实现-（引入了红黑树）"><a href="#Java8-实现-（引入了红黑树）" class="headerlink" title="Java8 实现 （引入了红黑树）"></a>Java8 实现 （引入了红黑树）</h3><p>Java8 对 ConcurrentHashMap进行了比较大的改动,Java8 也引入了红黑树</p><h2 id="HashTable（线程安全）"><a href="#HashTable（线程安全）" class="headerlink" title="HashTable（线程安全）"></a>HashTable（线程安全）</h2><p>Hashtable 是遗留类，很多映射的常用功能与 HashMap 类似，不同的是它承自 Dictionary 类，并且是线程安全的，任一时间只有一个线程能写 Hashtable，并发性不如 ConcurrentHashMap，因为 ConcurrentHashMap 引入了分段锁。Hashtable 不建议在新代码中使用，不需要线程安全<br>的场合可以用 HashMap 替换，需要线程安全的场合可以用 ConcurrentHashMap 替换。</p><h2 id="TreeMap（可排序）"><a href="#TreeMap（可排序）" class="headerlink" title="TreeMap（可排序）"></a>TreeMap（可排序）</h2><p>TreeMap 实现 SortedMap 接口，能够把它保存的记录根据键排序，默认是按键值的升序排序，也可以指定排序的比较器，当用 Iterator 遍历 TreeMap 时，得到的记录是排过序的。如果使用排序的映射，建议使用 TreeMap。在使用 TreeMap 时，key 必须实现 Comparable 接口或者在构造 TreeMap 传入自定义的<br>Comparator，否则会在运行时抛出 java.lang.ClassCastException 类型的异常。</p><p>参考：<a href="https://www.ibm.com/developerworks/cn/java/j-lo-tree/index.html" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/java/j-lo-tree/index.html</a></p><h2 id="LinkHashMap（记录插入顺序）"><a href="#LinkHashMap（记录插入顺序）" class="headerlink" title="LinkHashMap（记录插入顺序）"></a>LinkHashMap（记录插入顺序）</h2><p>LinkedHashMap 是 HashMap 的一个子类，保存了记录的插入顺序，在用Iterator遍历LinkedHashMap时，先得到的记录肯定是先插入的，也可以在构造时带参数，按照访问次序排序。</p><p>参考 1：<a href="http://www.importnew.com/28263.html" target="_blank" rel="noopener">http://www.importnew.com/28263.html</a><br>参考 2：<a href="http://www.importnew.com/20386.html#comment-648123" target="_blank" rel="noopener">http://www.importnew.com/20386.html#comment-648123</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;集合类存放于 Java.util 包中，主要有 3 种：set(集）、list(列表包含 Queue）和 map(映射)。&lt;/p&gt;
    
    </summary>
    
      <category term="2021年12月" scheme="http://yoursite.com/categories/2021%E5%B9%B412%E6%9C%88/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Collection" scheme="http://yoursite.com/tags/Collection/"/>
    
  </entry>
  
  <entry>
    <title>518. 零钱兑换 II</title>
    <link href="http://yoursite.com/2021/12/21/518.%20%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2%20II/"/>
    <id>http://yoursite.com/2021/12/21/518. 零钱兑换 II/</id>
    <published>2021-12-21T12:51:12.000Z</published>
    <updated>2021-12-21T13:40:00.066Z</updated>
    
    <content type="html"><![CDATA[<p>给你一个整数数组 coins 表示不同面额的硬币，另给一个整数 amount 表示总金额。</p><p>请你计算并返回可以凑成总金额的硬币组合数。如果任何硬币组合都无法凑出总金额，返回 0 。</p><a id="more"></a><p>[TOC]</p><p>假设每一种面额的硬币有无限个。<br>题目数据保证结果符合 32 位带符号整数。</p><p>示例 1：</p><pre><code>输入：amount = 5, coins = [1, 2, 5]输出：4解释：有四种方式可以凑成总金额：5=55=2+2+15=2+1+1+15=1+1+1+1+1</code></pre><p>示例 2：</p><pre><code>输入：amount = 3, coins = [2]输出：0解释：只用面额 2 的硬币不能凑成总金额 3 。</code></pre><p>示例 3：</p><pre><code>输入：amount = 10, coins = [10] 输出：1</code></pre><p>提示：</p><pre><code>1 &lt;= coins.length &lt;= 3001 &lt;= coins[i] &lt;= 5000coins 中的所有值 互不相同0 &lt;= amount &lt;= 5000</code></pre><h1 id="方法一：动态规划-1"><a href="#方法一：动态规划-1" class="headerlink" title="方法一：动态规划^1"></a>方法一：动态规划<a href="https://leetcode-cn.com/problems/coin-change-2/solution/ling-qian-dui-huan-ii-by-leetcode-soluti-f7uh/" target="_blank" rel="noopener">^1</a></h1><details>    <summary>Java</summary><figure class="highlight java"><figcaption><span>[sol1-Java]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> amount, <span class="keyword">int</span>[] coins)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[amount + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> coin : coins) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = coin; i &lt;= amount; i++) &#123;</span><br><span class="line">                dp[i] += dp[i - coin];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[amount];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>C#</summary><figure class="highlight plain"><figcaption><span>[sol1-C#]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class Solution &#123;</span><br><span class="line">    public int Change(int amount, int[] coins) &#123;</span><br><span class="line">        int[] dp = new int[amount + 1];</span><br><span class="line">        dp[0] = 1;</span><br><span class="line">        foreach (int coin in coins) &#123;</span><br><span class="line">            for (int i = coin; i &lt;= amount; i++) &#123;</span><br><span class="line">                dp[i] += dp[i - coin];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return dp[amount];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>JavaScript</summary><figure class="highlight javascript"><figcaption><span>[sol1-JavaScript]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> change = <span class="function"><span class="keyword">function</span>(<span class="params">amount, coins</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> dp = <span class="keyword">new</span> <span class="built_in">Array</span>(amount + <span class="number">1</span>).fill(<span class="number">0</span>);</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> coin <span class="keyword">of</span> coins) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = coin; i &lt;= amount; i++) &#123;</span><br><span class="line">            dp[i] += dp[i - coin];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[amount];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></details><details>    <summary>Golang</summary><figure class="highlight go"><figcaption><span>[sol1-Golang]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">change</span><span class="params">(amount <span class="keyword">int</span>, coins []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    dp := <span class="built_in">make</span>([]<span class="keyword">int</span>, amount+<span class="number">1</span>)</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> _, coin := <span class="keyword">range</span> coins &#123;</span><br><span class="line">        <span class="keyword">for</span> i := coin; i &lt;= amount; i++ &#123;</span><br><span class="line">            dp[i] += dp[i-coin]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[amount]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><details>    <summary>C++</summary><figure class="highlight c++"><figcaption><span>[sol1-C++]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> amount, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; coins)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp(amount + <span class="number">1</span>);</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>&amp; coin : coins) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = coin; i &lt;= amount; i++) &#123;</span><br><span class="line">                dp[i] += dp[i - coin];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[amount];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></details><details>    <summary>C</summary><figure class="highlight c"><figcaption><span>[sol1-C]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> amount, <span class="keyword">int</span>* coins, <span class="keyword">int</span> coinsSize)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> dp[amount + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; coinsSize; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = coins[i]; j &lt;= amount; j++) &#123;</span><br><span class="line">            dp[j] += dp[j - coins[i]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[amount];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给你一个整数数组 coins 表示不同面额的硬币，另给一个整数 amount 表示总金额。&lt;/p&gt;
&lt;p&gt;请你计算并返回可以凑成总金额的硬币组合数。如果任何硬币组合都无法凑出总金额，返回 0 。&lt;/p&gt;
    
    </summary>
    
      <category term="2021年12月" scheme="http://yoursite.com/categories/2021%E5%B9%B412%E6%9C%88/"/>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Dynamic Programming" scheme="http://yoursite.com/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>剑指 Offer 17. 打印从1到最大的n位数</title>
    <link href="http://yoursite.com/2021/12/21/%E5%89%91%E6%8C%87%20Offer%2017.%20%E6%89%93%E5%8D%B0%E4%BB%8E1%E5%88%B0%E6%9C%80%E5%A4%A7%E7%9A%84n%E4%BD%8D%E6%95%B0/"/>
    <id>http://yoursite.com/2021/12/21/剑指 Offer 17. 打印从1到最大的n位数/</id>
    <published>2021-12-21T12:15:12.000Z</published>
    <updated>2021-12-22T06:53:17.531Z</updated>
    
    <content type="html"><![CDATA[<p>输入数字 n，按顺序打印出从 1 到最大的 n 位十进制数。比如输入 3，则打印出 1、2、3 一直到最大的 3 位数 999。</p><a id="more"></a><p>[TOC]</p><p>示例 1:</p><pre><code>输入: n = 1输出: [1,2,3,4,5,6,7,8,9]</code></pre><p>说明：</p><pre><code>用返回一个整数列表来代替打印n 为正整数</code></pre><h1 id="解题思路：-1"><a href="#解题思路：-1" class="headerlink" title="解题思路：^1"></a>解题思路：<a href="https://leetcode-cn.com/problems/da-yin-cong-1dao-zui-da-de-nwei-shu-lcof/solution/mian-shi-ti-17-da-yin-cong-1-dao-zui-da-de-n-wei-2/" target="_blank" rel="noopener">^1</a></h1><p>题目要求打印 “从 <em>1</em> 至最大的 <em>n</em> 位数的列表” ，因此需考虑以下两个问题：</p><ol><li><strong>最大的 <em>n</em> 位数（记为 <em>end</em> ）和位数 <em>n</em> 的关系：</strong> 例如最大的 <em>1</em> 位数是 <em>9</em> ，最大的 <em>2</em> 位数是 <em>99</em> ，最大的 <em>3</em> 位数是 <em>999</em> 。则可推出公式：</li></ol><pre><code>end = 10^n - 1</code></pre><ol start="2"><li><strong>大数越界问题：</strong> 当 <em>n</em> 较大时，<em>end</em> 会超出 <em>int32</em> 整型的取值范围，超出取值范围的数字无法正常存储。但由于本题要求返回 int 类型数组，相当于默认所有数字都在 int32 整型取值范围内，因此不考虑大数越界问题。</li></ol><p>因此，只需定义区间 <em>[1, 10^n - 1]</em> 和步长 <em>1</em> ，通过 <em>for</em> 循环生成结果列表 <em>res</em> 并返回即可。</p><h2 id="复杂度分析："><a href="#复杂度分析：" class="headerlink" title="复杂度分析："></a>复杂度分析：</h2><ul><li><strong>时间复杂度 <em>O(10^n)</em> ：</strong> 生成长度为 <em>10^n</em> 的列表需使用 <em>O(10^n)</em> 时间。</li><li><strong>空间复杂度 <em>O(1)</em> ：</strong> 建立列表需使用 <em>O(1)</em> 大小的额外空间（ 列表作为返回结果，不计入额外空间 ）。</li></ul><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><details>    <summary>Python</summary><figure class="highlight python"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printNumbers</span><span class="params">(self, n: int)</span> -&gt; List[int]:</span></span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span> ** n):</span><br><span class="line">            res.append(i)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure></details><details>    <summary>Java</summary><figure class="highlight java"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] printNumbers(<span class="keyword">int</span> n) &#123;</span><br><span class="line">        <span class="keyword">int</span> end = (<span class="keyword">int</span>)Math.pow(<span class="number">10</span>, n) - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[end];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; end; i++)</span><br><span class="line">            res[i] = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p>利用 Python 的语言特性，可以简化代码：先使用 <code>range()</code> 方法生成可迭代对象，再使用 <code>list()</code> 方法转化为列表并返回即可。</p><details>    <summary>Python</summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printNumbers</span><span class="params">(self, n: int)</span> -&gt; List[int]:</span></span><br><span class="line">        <span class="keyword">return</span> list(range(<span class="number">1</span>, <span class="number">10</span> ** n))</span><br></pre></td></tr></table></figure></details><h1 id="大数打印解法："><a href="#大数打印解法：" class="headerlink" title="大数打印解法："></a>大数打印解法：</h1><p>实际上，本题的主要考点是大数越界情况下的打印。需要解决以下三个问题：</p><h2 id="1-表示大数的变量类型："><a href="#1-表示大数的变量类型：" class="headerlink" title="1. 表示大数的变量类型："></a>1. 表示大数的变量类型：</h2><ul><li>无论是 short / int / long … 任意变量类型，数字的取值范围都是有限的。因此，大数的表示应用字符串 String 类型。</li></ul><h2 id="2-生成数字的字符串集："><a href="#2-生成数字的字符串集：" class="headerlink" title="2. 生成数字的字符串集："></a>2. 生成数字的字符串集：</h2><ul><li><p>使用 int 类型时，每轮可通过 <em>+1</em> 生成下个数字，而此方法无法应用至 String 类型。并且， String 类型的数字的进位操作效率较低，例如 <code>&quot;9999&quot;</code> 至 <code>&quot;10000&quot;</code> 需要从个位到千位循环判断，进位 4 次。</p></li><li><p>观察可知，生成的列表实际上是 <em>n</em> 位 <em>0</em> - <em>9</em> 的 <strong>全排列</strong> ，因此可避开进位操作，通过递归生成数字的 String 列表。</p></li></ul><h2 id="3-递归生成全排列："><a href="#3-递归生成全排列：" class="headerlink" title="3. 递归生成全排列："></a>3. 递归生成全排列：</h2><ul><li>基于分治算法的思想，先固定高位，向低位递归，当个位已被固定时，添加数字的字符串。例如当 <em>n = 2</em> 时（数字范围 <em>1 - 99</em> ），固定十位为 <em>0</em> - <em>9</em> ，按顺序依次开启递归，固定个位 <em>0</em> - <em>9</em> ，终止递归并添加数字字符串。</li></ul><p><a href="https://pic.leetcode-cn.com/83f4b5930ddc1d42b05c724ea2950ee7f00427b11150c86b45bd88405f8c7c87-Picture1.png" target="_blank" rel="noopener">Picture1.png</a></p><p>根据以上方法，可初步编写全排列代码：</p><details>    <summary>Python</summary><figure class="highlight python"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printNumbers</span><span class="params">(self, n: int)</span> -&gt; [int]:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(x)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> x == n: <span class="comment"># 终止条件：已固定完所有位</span></span><br><span class="line">                res.append(<span class="string">''</span>.join(num)) <span class="comment"># 拼接 num 并添加至 res 尾部</span></span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>): <span class="comment"># 遍历 0 - 9</span></span><br><span class="line">                num[x] = str(i) <span class="comment"># 固定第 x 位为 i</span></span><br><span class="line">                dfs(x + <span class="number">1</span>) <span class="comment"># 开启固定第 x + 1 位</span></span><br><span class="line">        </span><br><span class="line">        num = [<span class="string">'0'</span>] * n <span class="comment"># 起始数字定义为 n 个 0 组成的字符列表</span></span><br><span class="line">        res = [] <span class="comment"># 数字字符串列表</span></span><br><span class="line">        dfs(<span class="number">0</span>) <span class="comment"># 开启全排列递归</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">','</span>.join(res)  <span class="comment"># 拼接所有数字字符串，使用逗号隔开，并返回</span></span><br></pre></td></tr></table></figure></details><details>    <summary>Java</summary> </details><details>    <summary>Java</summary><figure class="highlight java"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    StringBuilder res;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>, n;</span><br><span class="line">    <span class="keyword">char</span>[] num, loop = &#123;<span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">printNumbers</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.n = n;</span><br><span class="line">        res = <span class="keyword">new</span> StringBuilder(); <span class="comment">// 数字字符串集</span></span><br><span class="line">        num = <span class="keyword">new</span> <span class="keyword">char</span>[n]; <span class="comment">// 定义长度为 n 的字符列表</span></span><br><span class="line">        dfs(<span class="number">0</span>); <span class="comment">// 开启全排列递归</span></span><br><span class="line">        res.deleteCharAt(res.length() - <span class="number">1</span>); <span class="comment">// 删除最后多余的逗号</span></span><br><span class="line">        <span class="keyword">return</span> res.toString(); <span class="comment">// 转化为字符串并返回</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x == n) &#123; <span class="comment">// 终止条件：已固定完所有位</span></span><br><span class="line">            res.append(String.valueOf(num) + <span class="string">","</span>); <span class="comment">// 拼接 num 并添加至 res 尾部，使用逗号隔开</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> i : loop) &#123; <span class="comment">// 遍历 ‘0‘ - ’9‘</span></span><br><span class="line">            num[x] = i; <span class="comment">// 固定第 x 位为 i</span></span><br><span class="line">            dfs(x + <span class="number">1</span>); <span class="comment">// 开启固定第 x + 1 位</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p>在此方法下，各数字字符串被逗号隔开，共同组成长字符串。返回的数字集字符串如下所示：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">输入：n</span> <span class="string">=</span> <span class="number">1</span></span><br><span class="line"><span class="string">输出："0,1,2,3,4,5,6,7,8,9"</span></span><br><span class="line"></span><br><span class="line"><span class="string">输入：n</span> <span class="string">=</span> <span class="number">2</span></span><br><span class="line"><span class="string">输出："00,01,02,...,10,11,12,...,97,98,99"</span></span><br><span class="line"></span><br><span class="line"><span class="string">输入：n</span> <span class="string">=</span> <span class="number">3</span></span><br><span class="line"><span class="string">输出："000,001,002,...,100,101,102,...,997,998,999"</span></span><br></pre></td></tr></table></figure><p>观察可知，当前的生成方法仍有以下问题：</p><ol><li>诸如00,01,02,…  应显示为0,1,2,… ，即应 <strong>删除高位多余的 <em>0</em></strong> ;</li><li>此方法从 <em>0</em> 开始生成，而题目要求 <strong>列表从 <em>1</em> 开始</strong> ；</li></ol><p>以上两个问题的解决方法如下：</p><h2 id="1-删除高位多余的-0-："><a href="#1-删除高位多余的-0-：" class="headerlink" title="1. 删除高位多余的 0 ："></a>1. 删除高位多余的 <em>0</em> ：</h2><ul><li><p><strong>字符串左边界定义：</strong> 声明变量 <em>start</em> 规定字符串的左边界，以保证添加的数字字符串 <code>num[start:]</code> 中无高位多余的 <em>0</em> 。例如当 <em>n = 2</em> 时， <em>1 - 9</em> 时 <em>start = 1</em> ， <em>10 - 99</em> 时 <em>start = 0</em> 。</p></li><li><p><strong>左边界 <em>start</em> 变化规律：</strong> 观察可知，当输出数字的所有位都是 <em>9</em> 时，则下个数字需要向更高位进 <em>1</em> ，此时左边界 <em>start</em> 需要减 <em>1</em> （即高位多余的 <em>0</em> 减少一个）。例如当 <em>n = 3</em> （数字范围 <em>1 - 999</em> ）时，左边界 <em>start</em> 需要减 <em>1</em> 的情况有： “009” 进位至 “010” ， “099” 进位至 “100” 。设数字各位中 <em>9</em> 的数量为 <em>nine</em> ，所有位都为 <em>9</em> 的判断条件可用以下公式表示：</p></li></ul><pre><code>n - start = nine</code></pre><ul><li><strong>统计 <em>nine</em> 的方法：</strong> 固定第 <em>x</em> 位时，当 <em>i = 9</em> 则执行 <em>nine = nine + 1</em> ，并在回溯前恢复 <em>nine = nine - 1</em> 。</li></ul><h2 id="2-列表从-1-开始："><a href="#2-列表从-1-开始：" class="headerlink" title="2. 列表从 1 开始："></a>2. 列表从 <em>1</em> 开始：</h2><ul><li>在以上方法的基础上，添加数字字符串前判断其是否为 <code>&quot;0&quot;</code> ，若为 <code>&quot;0&quot;</code> 则直接跳过。</li></ul><h2 id="复杂度分析：-1"><a href="#复杂度分析：-1" class="headerlink" title="复杂度分析："></a>复杂度分析：</h2><ul><li><strong>时间复杂度 <em>O(10^n)</em> ：</strong> 递归的生成的排列的数量为 <em>10^n</em> 。</li><li><strong>空间复杂度 <em>O(10^n)</em> ：</strong> 结果列表 <em>res</em> 的长度为 <em>10^n - 1</em> ，各数字字符串的长度区间为 <em>1, 2, …, n</em> ，因此占用 <em>O(10^n)</em> 大小的额外空间。</li></ul><h2 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h2><p>为 <strong>正确表示大数</strong> ，以下代码的返回值为数字字符串集拼接而成的长字符串。</p><details>    <summary>Python</summary><figure class="highlight python"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printNumbers</span><span class="params">(self, n: int)</span> -&gt; [int]:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(x)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> x == n:</span><br><span class="line">                s = <span class="string">''</span>.join(num[self.start:])</span><br><span class="line">                <span class="keyword">if</span> s != <span class="string">'0'</span>: res.append(s)</span><br><span class="line">                <span class="keyword">if</span> n - self.start == self.nine: self.start -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">                <span class="keyword">if</span> i == <span class="number">9</span>: self.nine += <span class="number">1</span></span><br><span class="line">                num[x] = str(i)</span><br><span class="line">                dfs(x + <span class="number">1</span>)</span><br><span class="line">            self.nine -= <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        num, res = [<span class="string">'0'</span>] * n, []</span><br><span class="line">        self.nine = <span class="number">0</span></span><br><span class="line">        self.start = n - <span class="number">1</span></span><br><span class="line">        dfs(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">','</span>.join(res)</span><br></pre></td></tr></table></figure></details><details>    <summary>Java</summary><figure class="highlight java"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    StringBuilder res;</span><br><span class="line">    <span class="keyword">int</span> nine = <span class="number">0</span>, count = <span class="number">0</span>, start, n;</span><br><span class="line">    <span class="keyword">char</span>[] num, loop = &#123;<span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">printNumbers</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.n = n;</span><br><span class="line">        res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        num = <span class="keyword">new</span> <span class="keyword">char</span>[n];</span><br><span class="line">        start = n - <span class="number">1</span>;</span><br><span class="line">        dfs(<span class="number">0</span>);</span><br><span class="line">        res.deleteCharAt(res.length() - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x == n) &#123;</span><br><span class="line">            String s = String.valueOf(num).substring(start);</span><br><span class="line">            <span class="keyword">if</span>(!s.equals(<span class="string">"0"</span>)) res.append(s + <span class="string">","</span>);</span><br><span class="line">            <span class="keyword">if</span>(n - start == nine) start--;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> i : loop) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="string">'9'</span>) nine++;</span><br><span class="line">            num[x] = i;</span><br><span class="line">            dfs(x + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        nine--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p>本题要求输出 int 类型数组。为 <strong>运行通过</strong> ，可在添加数字字符串 <em>s</em> 前，将其转化为 int 类型。代码如下所示：</p><details>    <summary>Python</summary><figure class="highlight python"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printNumbers</span><span class="params">(self, n: int)</span> -&gt; [int]:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(x)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> x == n:</span><br><span class="line">                s = <span class="string">''</span>.join(num[self.start:])</span><br><span class="line">                <span class="keyword">if</span> s != <span class="string">'0'</span>: res.append(int(s))</span><br><span class="line">                <span class="keyword">if</span> n - self.start == self.nine: self.start -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">                <span class="keyword">if</span> i == <span class="number">9</span>: self.nine += <span class="number">1</span></span><br><span class="line">                num[x] = str(i)</span><br><span class="line">                dfs(x + <span class="number">1</span>)</span><br><span class="line">            self.nine -= <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        num, res = [<span class="string">'0'</span>] * n, []</span><br><span class="line">        self.nine = <span class="number">0</span></span><br><span class="line">        self.start = n - <span class="number">1</span></span><br><span class="line">        dfs(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure></details><details>    <summary>Java</summary><figure class="highlight java"><figcaption><span>[]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] res;</span><br><span class="line">    <span class="keyword">int</span> nine = <span class="number">0</span>, count = <span class="number">0</span>, start, n;</span><br><span class="line">    <span class="keyword">char</span>[] num, loop = &#123;<span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>&#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] printNumbers(<span class="keyword">int</span> n) &#123;</span><br><span class="line">        <span class="keyword">this</span>.n = n;</span><br><span class="line">        res = <span class="keyword">new</span> <span class="keyword">int</span>[(<span class="keyword">int</span>)Math.pow(<span class="number">10</span>, n) - <span class="number">1</span>];</span><br><span class="line">        num = <span class="keyword">new</span> <span class="keyword">char</span>[n];</span><br><span class="line">        start = n - <span class="number">1</span>;</span><br><span class="line">        dfs(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x == n) &#123;</span><br><span class="line">            String s = String.valueOf(num).substring(start);</span><br><span class="line">            <span class="keyword">if</span>(!s.equals(<span class="string">"0"</span>)) res[count++] = Integer.parseInt(s);</span><br><span class="line">            <span class="keyword">if</span>(n - start == nine) start--;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> i : loop) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="string">'9'</span>) nine++;</span><br><span class="line">            num[x] = i;</span><br><span class="line">            dfs(x + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        nine--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;输入数字 n，按顺序打印出从 1 到最大的 n 位十进制数。比如输入 3，则打印出 1、2、3 一直到最大的 3 位数 999。&lt;/p&gt;
    
    </summary>
    
      <category term="2021年12月" scheme="http://yoursite.com/categories/2021%E5%B9%B412%E6%9C%88/"/>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
      <category term="Math" scheme="http://yoursite.com/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>2103. 环和杆</title>
    <link href="http://yoursite.com/2021/12/19/2103.%20%E7%8E%AF%E5%92%8C%E6%9D%86/"/>
    <id>http://yoursite.com/2021/12/19/2103. 环和杆/</id>
    <published>2021-12-19T02:30:12.000Z</published>
    <updated>2021-12-19T02:31:37.502Z</updated>
    
    <content type="html"><![CDATA[<p>找出所有集齐全部三种颜色环的杆，并返回这种杆的数量。</p><a id="more"></a><p>[TOC]</p><p>总计有 n 个环，环的颜色可以是红、绿、蓝中的一种。这些环分布穿在 10 根编号为 0 到 9 的杆上。</p><p>给你一个长度为 2n 的字符串 rings ，表示这 n 个环在杆上的分布。rings 中每两个字符形成一个 颜色位置对 ，用于描述每个环：</p><p>第 i 对中的 第一个 字符表示第 i 个环的 颜色（’R’、’G’、’B’）。<br>第 i 对中的 第二个 字符表示第 i 个环的 位置，也就是位于哪根杆上（’0’ 到 ‘9’）。<br>例如，”R3G2B1” 表示：共有 n == 3 个环，红色的环在编号为 3 的杆上，绿色的环在编号为 2 的杆上，蓝色的环在编号为 1 的杆上。</p><p>找出所有集齐 全部三种颜色 环的杆，并返回这种杆的数量。</p><p>示例 1：</p><pre><code>输入：rings = &quot;B0B6G0R6R0R6G9&quot;输出：1解释：- 编号 0 的杆上有 3 个环，集齐全部颜色：红、绿、蓝。- 编号 6 的杆上有 3 个环，但只有红、蓝两种颜色。- 编号 9 的杆上只有 1 个绿色环。因此，集齐全部三种颜色环的杆的数目为 1 。</code></pre><p>示例 2：</p><pre><code>输入：rings = &quot;B0R0G0R9R0B0G0&quot;输出：1解释：- 编号 0 的杆上有 6 个环，集齐全部颜色：红、绿、蓝。- 编号 9 的杆上只有 1 个红色环。因此，集齐全部三种颜色环的杆的数目为 1 。</code></pre><p>示例 3：</p><pre><code>输入：rings = &quot;G4&quot;输出：0解释：只给了一个环，因此，不存在集齐全部三种颜色环的杆。</code></pre><p>提示：</p><pre><code>rings.length == 2 * n1 &lt;= n &lt;= 100如 i 是 偶数 ，则 rings[i] 的值可以取 &apos;R&apos;、&apos;G&apos; 或 &apos;B&apos;（下标从 0 开始计数）如 i 是 奇数 ，则 rings[i] 的值可以取 &apos;0&apos; 到 &apos;9&apos; 中的一个数字（下标从 0 开始计数）</code></pre><h1 id="方法一：维护每根杆的状态"><a href="#方法一：维护每根杆的状态" class="headerlink" title="方法一：维护每根杆的状态"></a>方法一：维护每根杆的状态</h1><p><strong>思路与算法</strong></p><p>我们可以遍历字符串的每个颜色位置对，来模拟套环的过程。</p><p>对于每一个环，由于我们只关心它上面有哪些颜色的环，而不在意具体的数量；同时是否有某一种颜色的环的状态相互独立，因此我们可以用一个 <em>3</em> 二进制位的整数来表示每个环的状态。具体地，<strong>从低到高</strong>第一位表示是否有红色的环，第二位表示是否有蓝色的环，第三位表示是否有绿色的环；每一位为 <em>1</em> 则代表当前杆上有对应颜色的环，为 <em>0</em> 则代表没有。当套上某种颜色的环后，无论该二进制位之前取值如何，新的取值一定为 <em>1</em>，这等价于对应二进制位<strong>对 <em>1</em> 取或</strong>的操作。</p><p>我们可以用一个长度为 <em>10</em> 的状态数组来表示每个环的状态，数组下标即为杆的编号。在模拟开始前，所有环的状态对应的整数均为 <em>0</em>。在遍历到每个颜色位置对时，我们首先看第二个字符寻找出对应的下标，同时根据环的颜色对状态值的对应二进制位<strong>对 <em>1</em> 取或</strong>。当遍历完成后，我们遍历状态数组，统计状态值为 <em>(111)_2 = 7</em> （代表对应杆上有三种颜色的环）的个数，并返回该个数作为答案。</p><p><strong>代码</strong></p><details>    <summary>C++</summary><figure class="highlight c++"><figcaption><span>[sol1-C++]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">countPoints</span><span class="params">(<span class="built_in">string</span> rings)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = rings.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; status(<span class="number">10</span>);   <span class="comment">// 状态数组</span></span><br><span class="line">        <span class="comment">// 遍历颜色位置对维护状态数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> idx = rings[i+<span class="number">1</span>] - <span class="string">'0'</span>;</span><br><span class="line">            <span class="keyword">if</span> (rings[i] == <span class="string">'R'</span>) &#123;</span><br><span class="line">                status[idx] |= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (rings[i] == <span class="string">'G'</span>) &#123;</span><br><span class="line">                status[idx] |= <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                status[idx] |= <span class="number">4</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 统计集齐三色环的杆的数量</span></span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (status[i] == <span class="number">7</span>) &#123;</span><br><span class="line">                ++res;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></details><details>    <summary>Python3</summary><figure class="highlight python"><figcaption><span>[sol1-Python3]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countPoints</span><span class="params">(self, rings: str)</span> -&gt; int:</span></span><br><span class="line">        n = len(rings)</span><br><span class="line">        status = [<span class="number">0</span>] * <span class="number">10</span>   <span class="comment"># 状态数组</span></span><br><span class="line">        <span class="comment"># 遍历颜色位置对维护状态数组</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, n, <span class="number">2</span>):</span><br><span class="line">            idx = int(rings[i+<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">if</span> rings[i] == <span class="string">'R'</span>:</span><br><span class="line">                status[idx] |= <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> rings[i] == <span class="string">'G'</span>:</span><br><span class="line">                status[idx] |= <span class="number">2</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                status[idx] |= <span class="number">4</span></span><br><span class="line">        <span class="comment"># 统计集齐三色环的杆的数量</span></span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">            <span class="keyword">if</span> status[i] == <span class="number">7</span>:</span><br><span class="line">                res += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure></details><p><strong>复杂度分析</strong></p><ul><li><p>时间复杂度：<em>O(n + k)*，其中 *n</em> 为rings 的长度，<em>k</em> 为杆的数量。初始化杆状态数组与统计数量的时间复杂度为 <em>O(k)</em>，遍历字符串的时间复杂度为 <em>O(n)</em>。</p></li><li><p>空间复杂度：<em>O(k)</em>，即为状态数组的空间开销。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;找出所有集齐全部三种颜色环的杆，并返回这种杆的数量。&lt;/p&gt;
    
    </summary>
    
      <category term="2021年12月" scheme="http://yoursite.com/categories/2021%E5%B9%B412%E6%9C%88/"/>
    
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Hash Table" scheme="http://yoursite.com/tags/Hash-Table/"/>
    
      <category term="String" scheme="http://yoursite.com/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>2104. 子数组范围和</title>
    <link href="http://yoursite.com/2021/12/19/2104.%20%E5%AD%90%E6%95%B0%E7%BB%84%E8%8C%83%E5%9B%B4%E5%92%8C/"/>
    <id>http://yoursite.com/2021/12/19/2104. 子数组范围和/</id>
    <published>2021-12-19T02:30:12.000Z</published>
    <updated>2021-12-19T02:51:25.617Z</updated>
    
    <content type="html"><![CDATA[<p>给你一个整数数组 nums 。nums 中，子数组的 范围 是子数组中最大元素和最小元素的差值。</p><p>返回 nums 中 所有 子数组范围的 和 。</p><a id="more"></a><p>[TOC]</p><p><strong>子数组是数组中一个连续 非空 的元素序列。</strong></p><p>示例 1：</p><pre><code>输入：nums = [1,2,3]输出：4解释：nums 的 6 个子数组如下所示：[1]，范围 = 最大 - 最小 = 1 - 1 = 0 [2]，范围 = 2 - 2 = 0[3]，范围 = 3 - 3 = 0[1,2]，范围 = 2 - 1 = 1[2,3]，范围 = 3 - 2 = 1[1,2,3]，范围 = 3 - 1 = 2所有范围的和是 0 + 0 + 0 + 1 + 1 + 2 = 4</code></pre><p>示例 2：</p><pre><code>输入：nums = [1,3,3]输出：4解释：nums 的 6 个子数组如下所示：[1]，范围 = 最大 - 最小 = 1 - 1 = 0[3]，范围 = 3 - 3 = 0[3]，范围 = 3 - 3 = 0[1,3]，范围 = 3 - 1 = 2[3,3]，范围 = 3 - 3 = 0[1,3,3]，范围 = 3 - 1 = 2所有范围的和是 0 + 0 + 0 + 2 + 0 + 2 = 4</code></pre><p>示例 3：</p><pre><code>输入：nums = [4,-2,-3,4,1]输出：59解释：nums 中所有子数组范围的和是 59</code></pre><p>提示：</p><p>1 &lt;= nums.length &lt;= 1000<br>-109 &lt;= nums[i] &lt;= 109</p><p>进阶：你可以设计一种时间复杂度为 O(n) 的解决方案吗？</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>1、一个很自然的思路就是枚举每一个子数组，找到子数组的最小值、最大值，然后求范围之和。这样做复杂度至少是O(n^2)。  </p><p>2、要找到一个O(n)复杂度的方法，只能依次考虑每一个数字。当出现数字nums[j]时，它对范围之和有什么影响呢？这样问题就变为了nums[j]可能是哪些子数组的最大值、最小值呢？沿着这个思路，我们发现，假设nums[i]…nums[j]…nums[k]，nums[i]是nums[j]左边第一个大于nums[j]的数，nums[k]是nums[j]右边第一个大于nums[j]的数，那么显然区间nums(i,k)之间的最大值是nums[j]，这就意味着该区间内所有包含nums[j]的子数组的最大值都是nums[j]；而任何一个包含nums[i]或者nums[k]的子数组的最大值都不可能是nums[j]。这样nums[j]作为最大值，贡献的范围之和就是区间nums(i,k)包含nums[j]的子数组个数 * nums[j]，而这个子数组个数 = (j - i) * (k - j)。  </p><p>3、同样的思路，我们可以找到nums[j]作为最小值，对范围之和的贡献。我们遍历所有的nums[j]，加上它作为最大值的贡献，减去它作为最小值的贡献，这样就可以求出范围之和了。  </p><p>4、那么如何求得nums[j]左右两边第一个大于它的数呢？这是一个典型的单调栈问题，我们正向遍历数组，维护一个单调递增栈和一个单调递减栈，单调递增栈的栈顶元素就是左边第一个小于nums[j]的元素，单调递减栈的栈顶元素就是左边第一个大于nums[j]的元素。同样的方法，反向遍历数组，即可求得nums[j]右边第一个大于、小于它的元素。  </p><p>5、注意一个细节问题，当有相同num出现时，如果是正向遍历，那么不应该继续弹出栈顶元素，因为在一个子数组中相同的两个数只有第一个会被认为是最大值、最小值，所以后来的第二个没有办法取代第一个。而反向遍历时恰恰相反，后来的第二个数在原数组的前面位置，它应该取代第一个数，所以需要继续弹出栈顶元素。  </p><h2 id="复杂度问题"><a href="#复杂度问题" class="headerlink" title="复杂度问题"></a>复杂度问题</h2><p>时间复杂度：O(n)，单调栈和后续的求范围之和，都只需要遍历一次数组。  </p><p>空间复杂度：O(n)，需要保存每个数左右两边第一个大于、小于自己的数的位置。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><details>    <summary>cpp</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">subArrayRanges</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i, size = nums.size();</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; leftLess(size), leftGreater(size), rightLess(size), rightGreater(size);</span><br><span class="line"></span><br><span class="line">        getLeft(nums, leftLess, leftGreater);</span><br><span class="line">        getRight(nums, rightLess, rightGreater);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; size; ++i) &#123;</span><br><span class="line">            sum += (nums[i] * ((<span class="keyword">long</span> <span class="keyword">long</span>)i - leftGreater[i]) * ((<span class="keyword">long</span> <span class="keyword">long</span>)rightGreater[i] - i));</span><br><span class="line">            sum -= (nums[i] * ((<span class="keyword">long</span> <span class="keyword">long</span>)i - leftLess[i]) * ((<span class="keyword">long</span> <span class="keyword">long</span>)rightLess[i] - i));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getLeft</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; leftLess, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; leftGreater)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i, size = nums.size();</span><br><span class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; increasing, decreasing;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; size; ++i) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!increasing.empty() &amp;&amp; nums[increasing.top()] &gt; nums[i]) &#123;</span><br><span class="line">                increasing.pop();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            leftLess[i] = increasing.empty() ? <span class="number">-1</span> : increasing.top();</span><br><span class="line">            increasing.push(i);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (!decreasing.empty() &amp;&amp; nums[decreasing.top()] &lt; nums[i]) &#123;</span><br><span class="line">                decreasing.pop();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            leftGreater[i] = decreasing.empty() ? <span class="number">-1</span> : decreasing.top();</span><br><span class="line">            decreasing.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getRight</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; rightLess, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; rightGreater)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i, size = nums.size();</span><br><span class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; increasing, decreasing;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = size - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!increasing.empty() &amp;&amp; nums[increasing.top()] &gt;= nums[i]) &#123;</span><br><span class="line">                increasing.pop();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            rightLess[i] = increasing.empty() ? size : increasing.top();</span><br><span class="line">            increasing.push(i);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (!decreasing.empty() &amp;&amp; nums[decreasing.top()] &lt;= nums[i]) &#123;</span><br><span class="line">                decreasing.pop();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            rightGreater[i] = decreasing.empty() ? size : decreasing.top();</span><br><span class="line">            decreasing.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></details>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给你一个整数数组 nums 。nums 中，子数组的 范围 是子数组中最大元素和最小元素的差值。&lt;/p&gt;
&lt;p&gt;返回 nums 中 所有 子数组范围的 和 。&lt;/p&gt;
    
    </summary>
    
      <category term="2021年12月" scheme="http://yoursite.com/categories/2021%E5%B9%B412%E6%9C%88/"/>
    
    
      <category term="Stack" scheme="http://yoursite.com/tags/Stack/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
      <category term="Monotonic Stack" scheme="http://yoursite.com/tags/Monotonic-Stack/"/>
    
  </entry>
  
  <entry>
    <title>JVM学习笔记（线程，JVM，垃圾回收，引用，IO，类加载）</title>
    <link href="http://yoursite.com/2021/12/17/JVM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E7%BA%BF%E7%A8%8B%EF%BC%8CJVM%EF%BC%8C%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%EF%BC%8C%E5%BC%95%E7%94%A8%EF%BC%8CIO%EF%BC%8C%E7%B1%BB%E5%8A%A0%E8%BD%BD%EF%BC%89/"/>
    <id>http://yoursite.com/2021/12/17/JVM学习笔记（线程，JVM，垃圾回收，引用，IO，类加载）/</id>
    <published>2021-12-17T12:30:12.000Z</published>
    <updated>2021-12-29T10:18:30.613Z</updated>
    
    <content type="html"><![CDATA[<p>JVM 是可运行 Java 代码的假想计算机 ，包括一套字节码指令集、一组寄存器、一个栈、一个垃圾回收，堆 和 一个存储方法域。JVM 是运行在操作系统之上的，它与硬件没有直接的交互。</p><a id="more"></a><p>[TOC]</p><h1 id="基本概念：-1"><a href="#基本概念：-1" class="headerlink" title="基本概念：^1"></a>基本概念：<a href="[深入理解Java虚拟机：JVM高级特性与最佳实践](https://weread.qq.com/web/reader/9b832f305933f09b86bd2a9kecc32f3013eccbc87e4b62e)">^1</a></h1><p>JVM 是可运行 Java 代码的假想计算机 ，包括一套字节码指令集、一组寄存器、一个栈、一个垃圾回收，堆 和 一个存储方法域。JVM 是运行在操作系统之上的，它与硬件没有直接的交互。</p><p>我们都知道 Java 源文件，通过编译器，能够生产相应的.Class 文件，也就是字节码文件，而字节码文件又通过 Java 虚拟机中的解释器，编译成特定机器上的机器码 。<br>也就是如下：</p><p>① Java 源文件—-&gt;编译器—-&gt;字节码文件</p><p>② 字节码文件—-&gt;JVM—-&gt;机器码</p><p>每一种平台的解释器是不同的，但是实现的虚拟机是相同的，这也就是Java为什么能够跨平台的原因了，当一个程序从开始运行，这时虚拟机就开始实例化了，多个程序启动就会存在多个虚拟机实例。程序退出或者关闭，则虚拟机实例消亡，多个虚拟机实例之间数据不能共享。</p><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p>这里所说的线程指程序执行过程中的一个线程实体。JVM 允许一个应用并发执行多个线程。Hotspot JVM 中的 Java 线程与原生操作系统线程有直接的映射关系。当线程本地存储、缓冲区分配、同步对象、栈、程序计数器等准备好以后，就会创建一个操作系统原生线程。Java 线程结束，原生线程随之被回收。操作系统负责调度所有线程，并把它们分配到任何可用的 CPU 上。当原生线程初始化完毕，就会调用 Java 线程的 run() 方法。当线程结束时会释放原生线程和 Java 线程的所有资源。</p><p>Hotspot JVM 后台运行的系统线程主要有下面几个：</p><table><thead><tr><th>线程</th><th>详情</th></tr></thead><tbody><tr><td>虚拟机线程（VM thread）</td><td>这个线程等待 JVM 到达安全点操作出现。这些操作必须要在独立的线程里执行，因为当堆修改无法进行时，线程都需要 JVM 位于安全点。这些操作的类型有：stop-theworld 垃圾回收、线程栈dump、线程暂停、线程偏向锁（biased locking）解除。</td></tr><tr><td>周期性任务线程</td><td>这线程负责定时器事件（也就是中断），用来调度周期性操作的执行。</td></tr><tr><td>GC 线程</td><td>这些线程支持JVM中不同的垃圾回收活动</td></tr><tr><td>编译器线程</td><td>这些线程在运行时将字节码动态编译成本地平台相关的机器码。</td></tr><tr><td>信号分发线程</td><td>这个线程接收发送到 JVM 的信号并调用适当的 JVM 方法处理</td></tr></tbody></table><h2 id="JVM-内存区域"><a href="#JVM-内存区域" class="headerlink" title="JVM 内存区域"></a>JVM 内存区域</h2><p>JVM 内存区域主要分为线程私有区域【程序计数器、虚拟机栈、本地方法区】、线程共享区域【JAVA 堆、方法区】、直接内存。</p><p>线程私有数据区域生命周期与线程相同, 依赖用户线程的启动/结束 而 创建/销毁(在 Hotspot VM 内,每个线程都与操作系统的本地线程直接映射, 因此这部分内存区域的存/否跟随本地线程的生/死对应)。</p><p>线程共享区域随虚拟机的启动/关闭而创建/销毁。直接内存并不是 JVM 运行时数据区的一部分, 但也会被频繁的使用: 在 JDK 1.4 引入的 NIO 提<br>供了基于 Channel 与 Buffer 的 IO 方式, 它可以使用 Native 函数库直接分配堆外内存, 然后使用DirectByteBuffer对象作为这块内存的引用进行操作(详见: Java I/O 扩展), 这样就避免了在Java堆和Native堆中来回复制数据, 因此在一些场景中可以显著提高性能。</p><h3 id="程序计数器-线程私有"><a href="#程序计数器-线程私有" class="headerlink" title="程序计数器(线程私有)"></a>程序计数器(线程私有)</h3><p>一块较小的内存空间, 是当前线程所执行的字节码的行号指示器，每条线程都要有一个独立的程序计数器，这类内存也称为“线程私有”的内存。<br>正在执行 java 方法的话，计数器记录的是虚拟机字节码指令的地址（当前指令的地址）。如果还是Native方法，则为空。这个内存区域是唯一一个在虚拟机中没有规定任何 OutOfMemoryError 情况的区域。</p><h3 id="虚拟机栈-线程私有"><a href="#虚拟机栈-线程私有" class="headerlink" title="虚拟机栈(线程私有)"></a>虚拟机栈(线程私有)</h3><p>是描述java方法执行的内存模型，每个方法在执行的同时都会创建一个栈帧（StackFrame）用于存储局部变量表、操作数栈、动态链接、方法出口等信息。每一个方法从调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中入栈到出栈的过程。栈帧（Frame）是用来存储数据和部分过程结果的数据结构，同时也被用来处理动态链接(Dynamic Linking)、 方法返回值和异常分派（Dispatch Exception）。栈帧随着方法调用而创建，随着方法结束而销毁——无论方法是正常完成还是异常完成（抛出了在方法内未被捕获的异常）都算作方法结束。</p><h3 id="本地方法区-线程私有"><a href="#本地方法区-线程私有" class="headerlink" title="本地方法区(线程私有)"></a>本地方法区(线程私有)</h3><p>本地方法区和 Java Stack 作用类似, 区别是虚拟机栈为执行 Java 方法服务, 而本地方法栈则为Native 方法服务, 如果一个 VM 实现使用 C-linkage 模型来支持 Native 调用, 那么该栈将会是一个C 栈，但 HotSpot VM 直接就把本地方法栈和虚拟机栈合二为一。</p><h3 id="堆（Heap-线程共享）-运行时数据区"><a href="#堆（Heap-线程共享）-运行时数据区" class="headerlink" title="堆（Heap-线程共享）-运行时数据区"></a>堆（Heap-线程共享）-运行时数据区</h3><p>是被线程共享的一块内存区域，创建的对象和数组都保存在 Java 堆内存中，也是垃圾收集器进行垃圾收集的最重要的内存区域。由于现代 VM 采用分代收集算法, 因此 Java 堆从 GC 的角度还可以细分为: 新生代(Eden 区、From Survivor 区和 To Survivor 区)和老年代。</p><h3 id="方法区-永久代（线程共享）"><a href="#方法区-永久代（线程共享）" class="headerlink" title="方法区/永久代（线程共享）"></a>方法区/永久代（线程共享）</h3><p>即我们常说的永久代(Permanent Generation), 用于存储被 JVM 加载的类信息、常量、静态变量、即时编译器编译后的代码等数据. HotSpot VM把GC分代收集扩展至方法区, 即使用Java堆的永久代来实现方法区, 这样 HotSpot 的垃圾收集器就可以像管理 Java 堆一样管理这部分内存,<br>而不必为方法区开发专门的内存管理器(永久带的内存回收的主要目标是针对常量池的回收和类型的卸载, 因此收益一般很小)。<br>运行时常量池（Runtime Constant Pool）是方法区的一部分。Class文件中除了有类的版本、字段、方法、接口等描述等信息外，还有一项信息是常量池（Constant Pool Table），用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后存放到方法区的运行时常量池中。 Java 虚拟机对 Class 文件的每一部分（自然也包括常量池）的格式都有严格的规定，每一个字节用于存储哪种数据都必须符合规范上的要求，这样才会<br>被虚拟机认可、装载和执行。</p><h2 id="JVM-运行时内存"><a href="#JVM-运行时内存" class="headerlink" title="JVM 运行时内存"></a>JVM 运行时内存</h2><p>Java 堆从 GC 的角度还可以细分为: 新生代(Eden 区、From Survivor 区和 To Survivor 区)和老年代。</p><h3 id="新生代"><a href="#新生代" class="headerlink" title="新生代"></a>新生代</h3><p>是用来存放新生的对象。一般占据堆的 1/3 空间。由于频繁创建对象，所以新生代会频繁触发MinorGC 进行垃圾回收。新生代又分为 Eden 区、SurvivorFrom、SurvivorTo 三个区。</p><h4 id="Eden-区"><a href="#Eden-区" class="headerlink" title="Eden 区"></a>Eden 区</h4><p>Java 新对象的出生地（如果新创建的对象占用内存很大，则直接分配到老年代）。当 Eden 区内存不够的时候就会触发 MinorGC，对新生代区进行<br>一次垃圾回收。</p><h4 id="From-Survivor"><a href="#From-Survivor" class="headerlink" title="From Survivor"></a>From Survivor</h4><p>上一次 GC 的幸存者，作为这一次 GC 的被扫描者。</p><h4 id="To-Survivor"><a href="#To-Survivor" class="headerlink" title="To Survivor"></a>To Survivor</h4><p>保留了一次 MinorGC 过程中的幸存者。</p><h4 id="MinorGC-的过程（复制-gt-清空-gt-互换）"><a href="#MinorGC-的过程（复制-gt-清空-gt-互换）" class="headerlink" title="MinorGC 的过程（复制-&gt;清空-&gt;互换）"></a>MinorGC 的过程（复制-&gt;清空-&gt;互换）</h4><p>MinorGC 采用复制算法。</p><p>1：eden、From Survivor 复制到 To Survivor，年龄+1</p><p>首先，把 Eden 和 From Survivor 区域中存活的对象复制到 To Survivor区域（如果有对象的年龄以及达到了老年的标准，则赋值到老年代区），同时把这些对象的年龄+1（如果 To Survivor 不够位置了就放到老年区）；</p><p>2：清空 eden、From Survivor</p><p>然后，清空 Eden 和 From Survivor 中的对象；</p><p>3：To Survivor 和 From Survivor 互换</p><p>最后，To Survivor 和 From Survivor 互换，原 To Survivor 成为下一次 GC 时的 From Survivor区。</p><h3 id="老年代"><a href="#老年代" class="headerlink" title="老年代"></a>老年代</h3><p>主要存放应用程序中生命周期长的内存对象。</p><p> 老年代的对象比较稳定，所以 MajorGC 不会频繁执行。在进行MajorGC前一般都先进行了一次MinorGC，使得有新生代的对象晋身入老年代，导致空间不够用时才触发。当无法找到足够大的连续空间分配给新创建的较大对象时也会提前触发一次 MajorGC 进行垃圾回收腾出空间。</p><p> MajorGC 采用标记清除算法：首先扫描一次所有老年代，标记出存活的对象，然后回收没有标记的对象。MajorGC 的耗时比较长，因为要扫描再回收。MajorGC 会产生内存碎片，为了减少内存损耗，我们一般需要进行合并或者标记出来方便下次直接分配。当老年代也满了装不下的时候，就会抛出 OOM（Out of Memory）异常。</p><h3 id="永久代"><a href="#永久代" class="headerlink" title="永久代"></a>永久代</h3><p>指内存的永久保存区域，主要存放 Class 和 Meta（元数据）的信息,Class 在被加载的时候被放入永久区域，它和和存放实例的区域不同,GC 不会在主程序运行期对永久区域进行清理。所以这也导致了永久代的区域会随着加载的 Class 的增多而胀满，最终抛出 OOM 异常。</p><h4 id="JAVA8-与元数据"><a href="#JAVA8-与元数据" class="headerlink" title="JAVA8 与元数据"></a>JAVA8 与元数据</h4><p>在 Java8 中，永久代已经被移除，被一个称为“元数据区”（元空间）的区域所取代。元空间的本质和永久代类似，元空间与永久代之间最大的区别在于：元空间并不在虚拟机中，而是使用本地内存。因此，默认情况下，元空间的大小仅受本地内存限制。类的元数据放入 native memory, 字符串池和类的静态变量放入 java 堆中，这样可以加载多少类的元数据就不再由MaxPermSize 控制, 而由系统的实际可用空间来控制。</p><h2 id="垃圾回收与算法"><a href="#垃圾回收与算法" class="headerlink" title="垃圾回收与算法"></a>垃圾回收与算法</h2><h3 id="如何确定垃圾"><a href="#如何确定垃圾" class="headerlink" title="如何确定垃圾"></a>如何确定垃圾</h3><h4 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h4><p>在 Java 中，引用和对象是有关联的。如果要操作对象则必须用引用进行。因此，很显然一个简单<br>的办法是通过引用计数来判断一个对象是否可以回收。简单说，即一个对象如果没有任何与之关联的引用，即他们的引用计数都为0，则说明对象不太可能再被用到，那么这个对象就是可回收对象。</p><h4 id="可达性分析"><a href="#可达性分析" class="headerlink" title="可达性分析"></a>可达性分析</h4><p>为了解决引用计数法的循环引用问题，Java 使用了可达性分析的方法。通过一系列的“GC roots”对象作为起点搜索。如果在“GC roots”和一个对象之间没有可达路径，则称该对象是不可达的。要注意的是，不可达对象不等价于可回收对象，不可达对象变为可回收对象至少要经过两次标记过程。两次标记后仍然是可回收对象，则将面临回收。</p><h3 id="标记清除算法（Mark-Sweep）"><a href="#标记清除算法（Mark-Sweep）" class="headerlink" title="标记清除算法（Mark-Sweep）"></a>标记清除算法（Mark-Sweep）</h3><p>最基础的垃圾回收算法，分为两个阶段，标注和清除。标记阶段标记出所有需要回收的对象，清除阶段回收被标记的对象所占用的空间。如</p><p>该算法最大的问题是内存碎片化严重，后续可能发生大对象不能找到可利用空间的问题。</p><h3 id="复制算法（copying）"><a href="#复制算法（copying）" class="headerlink" title="复制算法（copying）"></a>复制算法（copying）</h3><p>为了解决 Mark-Sweep算法内存碎片化的缺陷而被提出的算法。按内存容量将内存划分为等大小的两块。每次只使用其中一块，当这一块内存满后将尚存活的对象复制到另一块上去，把已使用的内存清掉这种算法虽然实现简单，内存效率高，不易产生碎片，但是最大的问题是可用内存被压缩到了原本的一半。且存活对象增多的话，Copying 算法的效率会大大降低。</p><h3 id="标记整理算法-Mark-Compact"><a href="#标记整理算法-Mark-Compact" class="headerlink" title="标记整理算法(Mark-Compact)"></a>标记整理算法(Mark-Compact)</h3><p>结合了以上两个算法，为了避免缺陷而提出。标记阶段和Mark-Sweep算法相同，标记后不是清理对象，而是将存活对象移向内存的一端。然后清除端边界外的对象。</p><h3 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h3><p>分代收集法是目前大部分JVM所采用的方法，其核心思想是根据对象存活的不同生命周期将内存划分为不同的域，一般情况下将 GC 堆划分为老生代(Tenured/Old Generation)和新生代(Young Generation)。老生代的特点是每次垃圾回收时只有少量对象需要被回收，新生代的特点是每次垃圾回收时都有大量垃圾需要被回收，因此可以根据不同区域选择不同的算法。</p><h4 id="新生代与复制算法"><a href="#新生代与复制算法" class="headerlink" title="新生代与复制算法"></a>新生代与复制算法</h4><p>目前大部分 JVM 的 GC 对于新生代都采取 Copying 算法，因为新生代中每次垃圾回收都要回收大部分对象，即要复制的操作比较少，但通常并不是按照 1：1 来划分新生代。一般将新生代划分为一块较大的 Eden 空间和两个较小的 Survivor 空间(From Space, To Space)，每次使用Eden 空间和其中的一块 Survivor 空间，当进行回收时，将该两块空间中还存活的对象复制到另一块 Survivor 空间中。</p><h4 id="老年代与标记复制算法"><a href="#老年代与标记复制算法" class="headerlink" title="老年代与标记复制算法"></a>老年代与标记复制算法</h4><p>而老年代因为每次只回收少量对象，因而采用 Mark-Compact 算法。</p><ol><li>JAVA 虚拟机提到过的处于方法区的永生代(Permanet Generation)，它用来存储class类，常量，方法描述等。对永生代的回收主要包括废弃常量和无用的类。</li><li>对象的内存分配主要在新生代的 Eden Space 和 Survivor Space 的 From Space(Survivor目前存放对象的那一块)，少数情况会直接分配到老生代。</li><li>当新生代的 Eden Space 和 From Space空间不足时就会发生一次 GC，进行 GC 后，EdenSpace 和 From Space 区的存活对象会被挪到 To Space，然后将 Eden Space 和 From Space进行清理。</li><li>如果 To Space无法足够存储某个对象，则将这个对象存储到老生代。</li><li>在进行 GC 后，使用的便是 Eden Space 和 To Space 了，如此反复循环。</li><li>当对象在 Survivor区躲过一次GC后，其年龄就会+1。默认情况下年龄到达 15 的对象会被移到老生代中。</li></ol><h2 id="JAVA-四种引用类型"><a href="#JAVA-四种引用类型" class="headerlink" title="JAVA 四种引用类型"></a>JAVA 四种引用类型</h2><h3 id="强引用"><a href="#强引用" class="headerlink" title="强引用"></a>强引用</h3><p>在 Java 中最常见的就是强引用，把一个对象赋给一个引用变量，这个引用变量就是一个强引用。当一个对象被强引用变量引用时，它处于可达状态，它是不可能被垃圾回收机制回收的，即使该对象以后永远都不会被用到 JVM 也不会回收。因此强引用是造成 Java 内存泄漏的主要原因之一。</p><h3 id="软引用"><a href="#软引用" class="headerlink" title="软引用"></a>软引用</h3><p>软引用需要用 SoftReference类来实现，对于只有软引用的对象来说，当系统内存足够时它不会被回收，当系统内存空间不足时它会被回收。软引用通常用在对内存敏感的程序中。</p><h3 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h3><p>弱引用需要用 WeakReference类来实现，它比软引用的生存期更短，对于只有弱引用的对象来说，只要垃圾回收机制一运行，不管JVM的内存空间是否足够，总会回收该对象占用的内存。</p><h3 id="虚引用"><a href="#虚引用" class="headerlink" title="虚引用"></a>虚引用</h3><p>虚引用需要 PhantomReference类来实现，它不能单独使用，必须和引用队列联合使用。虚引用的主要作用是跟踪对象被垃圾回收的状态。</p><h2 id="GC-分代收集算法-VS-分区收集算法"><a href="#GC-分代收集算法-VS-分区收集算法" class="headerlink" title="GC 分代收集算法 VS 分区收集算法"></a>GC 分代收集算法 VS 分区收集算法</h2><h3 id="分代收集算法-1"><a href="#分代收集算法-1" class="headerlink" title="分代收集算法"></a>分代收集算法</h3><p>当前主流 VM 垃圾收集都采用”分代收集”(Generational Collection)算法,这种算法会根据对象存活周期的不同将内存划分为几块,如JVM中的新生代、老年代、永久代，这样就可以根据各年代特点分别采用最适当的 GC 算法</p><h4 id="在新生代-复制算法"><a href="#在新生代-复制算法" class="headerlink" title="在新生代-复制算法"></a>在新生代-复制算法</h4><p>每次垃圾收集都能发现大批对象已死, 只有少量存活. 因此选用复制算法,只需要付出少量存活对象的复制成本就可以完成收集.</p><h4 id="在老年代-标记整理算法"><a href="#在老年代-标记整理算法" class="headerlink" title="在老年代-标记整理算法"></a>在老年代-标记整理算法</h4><p>因为对象存活率高、没有额外空间对它进行分配担保, 就必须采用“标记—清理”或“标记—整理”算法来进行回收, 不必进行内存复制, 且直接腾出空闲内存.</p><h3 id="分区收集算法"><a href="#分区收集算法" class="headerlink" title="分区收集算法"></a>分区收集算法</h3><p>分区算法则将整个堆空间划分为连续的不同小区间, 每个小区间独立使用, 独立回收. 这样做的好处是可以控制一次回收多少个小区间 , 根据目标停顿时间, 每次合理地回收若干个小区间(而不是整个堆), 从而减少一次 GC 所产生的停顿。</p><h2 id="GC-垃圾收集器"><a href="#GC-垃圾收集器" class="headerlink" title="GC 垃圾收集器"></a>GC 垃圾收集器</h2><p>Java 堆内存被划分为新生代和老年代两部分，新生代主要使用复制和标记-清除垃圾回收算法；老年代主要使用标记-整理垃圾回收算法，因此 java 虚拟中针对新生代和老年代分别提供了多种不同的垃圾收集器，JDK1.6 中 Sun HotSpot 虚拟机的垃圾收集器如下</p><h3 id="Serial-垃圾收集器（单线程、复制算法）"><a href="#Serial-垃圾收集器（单线程、复制算法）" class="headerlink" title="Serial 垃圾收集器（单线程、复制算法）"></a>Serial 垃圾收集器（单线程、复制算法）</h3><p>Serial（英文连续）是最基本垃圾收集器，使用复制算法，曾经是JDK1.3.1 之前新生代唯一的垃圾<br>收集器。Serial是一个单线程的收集器，它不但只会使用一个CPU或一条线程去完成垃圾收集工作，并且在进行垃圾收集的同时，必须暂停其他所有的工作线程，直到垃圾收集结束。<br>Serial 垃圾收集器虽然在收集垃圾过程中需要暂停所有其他的工作线程，但是它简单高效，对于限定单个CPU环境来说，没有线程交互的开销，可以获得最高的单线程垃圾收集效率，因此 Serial垃圾收集器依然是 java 虚拟机运行在 Client 模式下默认的新生代垃圾收集器。</p><h3 id="ParNew-垃圾收集器（Serial-多线程）"><a href="#ParNew-垃圾收集器（Serial-多线程）" class="headerlink" title="ParNew 垃圾收集器（Serial+多线程）"></a>ParNew 垃圾收集器（Serial+多线程）</h3><p>ParNew 垃圾收集器其实是 Serial 收集器的多线程版本，也使用复制算法，除了使用多线程进行垃圾收集之外，其余的行为和 Serial 收集器完全一样，ParNew垃圾收集器在垃圾收集过程中同样也要暂停所有其他的工作线程。ParNew收集器默认开启和CPU数目相同的线程数，可以通过-XX:ParallelGCThreads参数来限制垃圾收集器的线程数。【Parallel：平行的】ParNew虽然是除了多线程外和Serial收集器几乎完全一样，但是ParNew垃圾收集器是很多java虚拟机运行在Server模式下新生代的默认垃圾收集器。</p><h3 id="Parallel-Scavenge收集器（多线程复制算法、高效）"><a href="#Parallel-Scavenge收集器（多线程复制算法、高效）" class="headerlink" title="Parallel Scavenge收集器（多线程复制算法、高效）"></a>Parallel Scavenge收集器（多线程复制算法、高效）</h3><p>Parallel Scavenge 收集器也是一个新生代垃圾收集器，同样使用复制算法，也是一个多线程的垃圾收集器，它重点关注的是程序达到一个可控制的吞吐量（Thoughput，CPU 用于运行用户代码的时间/CPU 总消耗时间，即吞吐量=运行用户代码时间/(运行用户代码时间+垃圾收集时间)），<br>高吞吐量可以最高效率地利用 CPU 时间，尽快地完成程序的运算任务，主要适用于在后台运算而不需要太多交互的任务。自适应调节策略也是 ParallelScavenge 收集器与 ParNew 收集器的一个重要区别。</p><h3 id="Serial-Old-收集器（单线程标记整理算法-）"><a href="#Serial-Old-收集器（单线程标记整理算法-）" class="headerlink" title="Serial Old 收集器（单线程标记整理算法 ）"></a>Serial Old 收集器（单线程标记整理算法 ）</h3><p>Serial Old 是 Serial 垃圾收集器年老代版本，它同样是个单线程的收集器，使用标记-整理算法，这个收集器也主要是运行在 Client 默认的 java 虚拟机默认的年老代垃圾收集器。</p><p>在 Server 模式下，主要有两个用途：</p><ol><li>在 JDK1.5 之前版本中与新生代的 Parallel Scavenge 收集器搭配使用。</li><li>作为年老代中使用 CMS 收集器的后备垃圾收集方案。</li></ol><p>新生代 Serial 与年老代 Serial Old 搭配垃圾收集过程图：</p><p>新生代 Parallel Scavenge 收集器与 ParNew收集器工作原理类似，都是多线程的收集器，都使用的是复制算法，在垃圾收集过程中都需要暂停所有的工作线程。新生代 Parallel<br>Scavenge/ParNew 与年老代 Serial Old 搭配垃圾收集过程图</p><h3 id="Parallel-Old-收集器（多线程标记整理算法）"><a href="#Parallel-Old-收集器（多线程标记整理算法）" class="headerlink" title="Parallel Old 收集器（多线程标记整理算法）"></a>Parallel Old 收集器（多线程标记整理算法）</h3><p>Parallel Old 收集器是Parallel Scavenge的年老代版本，使用多线程的标记-整理算法，在 JDK1.6才开始提供。<br>在 JDK1.6 之前，新生代使用 ParallelScavenge 收集器只能搭配年老代的 Serial Old收集器，只能保证新生代的吞吐量优先，无法保证整体的吞吐量，Parallel Old 正是为了在年老代同样提供吞吐量优先的垃圾收集器，如果系统对吞吐量要求比较高，可以优先考虑新生代 Parallel Scavenge和年老代 Parallel Old 收集器的搭配策略。<br>新生代 Parallel Scavenge 和年老代 Parallel Old 收集器搭配运行过程图：</p><h3 id="CMS-收集器（多线程标记清除算法）"><a href="#CMS-收集器（多线程标记清除算法）" class="headerlink" title="CMS 收集器（多线程标记清除算法）"></a>CMS 收集器（多线程标记清除算法）</h3><p>Concurrent mark sweep(CMS)收集器是一种年老代垃圾收集器，其最主要目标是获取最短垃圾回收停顿时间，和其他年老代使用标记-整理算法不同，它使用多线程的标记-清除算法。最短的垃圾收集停顿时间可以为交互比较高的程序提高用户体验。</p><p>CMS 工作机制相比其他的垃圾收集器来说更复杂，整个过程分为以下 4 个阶段：</p><h4 id="初始标记"><a href="#初始标记" class="headerlink" title="初始标记"></a>初始标记</h4><p>只是标记一下 GC Roots 能直接关联的对象，速度很快，仍然需要暂停所有的工作线程。</p><h4 id="并发标记"><a href="#并发标记" class="headerlink" title="并发标记"></a>并发标记</h4><p>进行 GC Roots 跟踪的过程，和用户线程一起工作，不需要暂停工作线程。</p><h4 id="重新标记"><a href="#重新标记" class="headerlink" title="重新标记"></a>重新标记</h4><p>为了修正在并发标记期间，因用户程序继续运行而导致标记产生变动的那一部分对象的标记记录，仍然需要暂停所有的工作线程。</p><h4 id="并发清除"><a href="#并发清除" class="headerlink" title="并发清除"></a>并发清除</h4><p>清除 GC Roots 不可达对象，和用户线程一起工作，不需要暂停工作线程。由于耗时最长的并发标记和并发清除过程中，垃圾收集线程可以和用户现在一起并发工作，所以总体上来看CMS 收集器的内存回收和用户线程是一起并发地执行。<br>CMS 收集器工作过程：</p><h3 id="G1-收集器"><a href="#G1-收集器" class="headerlink" title="G1 收集器"></a>G1 收集器</h3><p>Garbage first 垃圾收集器是目前垃圾收集器理论发展的最前沿成果，相比与 CMS 收集器，G1 收集器两个最突出的改进是：</p><ol><li>基于标记-整理算法，不产生内存碎片。</li><li>可以非常精确控制停顿时间，在不牺牲吞吐量前提下，实现低停顿垃圾回收。G1 收集器避免全区域垃圾收集，它把堆内存划分为大小固定的几个独立区域，并且跟踪这些区域的垃圾收集进度，同时在后台维护一个优先级列表，每次根据所允许的收集时间，优先回收垃圾最多的区域。区域划分和优先级区域回收机制，确保 G1 收集器可以在有限时间获得最高的垃圾收集效率。</li></ol><h2 id="JAVA-IO-NIO"><a href="#JAVA-IO-NIO" class="headerlink" title="JAVA IO/NIO"></a>JAVA IO/NIO</h2><h3 id="阻塞-IO-模型"><a href="#阻塞-IO-模型" class="headerlink" title="阻塞 IO 模型"></a>阻塞 IO 模型</h3><p>最传统的一种 IO模型，即在读写数据过程中会发生阻塞现象。当用户线程发出IO请求之后，内核会去查看数据是否就绪，如果没有就绪就会等待数据就绪，而用户线程就会处于阻塞状态，用户线程交出 CPU。当数据就绪之后，内核会将数据拷贝到用户线程，并返回结果给用户线程，用户线程才解除 block 状态。典型的阻塞 IO 模型的例子为：data = socket.read();如果数据没有就绪，就会一直阻塞在 read 方法。</p><h3 id="非阻塞-IO-模型"><a href="#非阻塞-IO-模型" class="headerlink" title="非阻塞 IO 模型"></a>非阻塞 IO 模型</h3><p>当用户线程发起一个 read 操作后，并不需要等待，而是马上就得到了一个结果。如果结果是一个error 时，它就知道数据还没有准备好，于是它可以再次发送 read 操作。一旦内核中的数据准备好了，并且又再次收到了用户线程的请求，那么它马上就将数据拷贝到了用户线程，然后返回。所以事实上，在非阻塞 IO 模型中，用户线程需要不断地询问内核数据是否就绪，也就说非阻塞 IO不会交出 CPU，而会一直占用 CPU。典型的非阻塞 IO 模型一般如下：</p><pre><code>while(true){    data = socket.read();    if(data!= error){    处理数据    break;    }}</code></pre><p>但是对于非阻塞 IO 就有一个非常严重的问题，在 while 循环中需要不断地去询问内核数据是否就绪，这样会导致 CPU 占用率非常高，因此一般情况下很少使用 while 循环这种方式来读取数据。但是对于非阻塞 IO 就有一个非常严重的问题，在 while 循环中需要不断地去询问内核数据是否就绪，这样会导致 CPU 占用率非常高，因此一般情况下很少使用 while 循环这种方式来读取数据。</p><h3 id="多路复用-IO-模型"><a href="#多路复用-IO-模型" class="headerlink" title="多路复用 IO 模型"></a>多路复用 IO 模型</h3><p>多路复用 IO 模型是目前使用得比较多的模型。Java NIO 实际上就是多路复用 IO。在多路复用 IO模型中，会有一个线程不断去轮询多个 socket 的状态，只有当 socket 真正有读写事件时，才真正调用实际的 IO 读写操作。因为在多路复用 IO 模型中，只需要使用一个线程就可以管理多个<br>socket，系统不需要建立新的进程或者线程，也不必维护这些线程和进程，并且只有在真正有socket 读写事件进行时，才会使用 IO 资源，所以它大大减少了资源占用。在 Java NIO 中，是通过 selector.select()去查询每个通道是否有到达事件，如果没有事件，则一直阻塞在那里，因此这<br>种方式会导致用户线程的阻塞。多路复用IO模式，通过一个线程就可以管理多个socket，只有当socket真正有读写事件发生才会占用资源来进行实际的读写操作。因此，多路复用 IO 比较适合连接数比较多的情况。</p><p>另外多路复用 IO 为何比非阻塞 IO 模型的效率高是因为在非阻塞 IO 中，不断地询问 socket 状态时通过用户线程去进行的，而在多路复用 IO 中，轮询每个 socket 状态是内核在进行的，这个效率要比用户线程要高的多。</p><p>不过要注意的是，多路复用 IO 模型是通过轮询的方式来检测是否有事件到达，并且对到达的事件逐一进行响应。因此对于多路复用 IO 模型来说，一旦事件响应体很大，那么就会导致后续的事件迟迟得不到处理，并且会影响新的事件轮询。</p><h3 id="信号驱动-IO-模型"><a href="#信号驱动-IO-模型" class="headerlink" title="信号驱动 IO 模型"></a>信号驱动 IO 模型</h3><p>在信号驱动 IO 模型中，当用户线程发起一个IO请求操作，会给对应的socket注册一个信号函数，然后用户线程会继续执行，当内核数据就绪时会发送一个信号给用户线程，用户线程接收到信号之后，便在信号函数中调用 IO 读写操作来进行实际的 IO 请求操作。</p><h3 id="异步-IO-模型"><a href="#异步-IO-模型" class="headerlink" title="异步 IO 模型"></a>异步 IO 模型</h3><p>异步 IO 模型才是最理想的 IO 模型，在异步IO模型中，当用户线程发起read操作之后，立刻就可以开始去做其它的事。而另一方面，从内核的角度，当它受到一个 asynchronous read 之后，它会立刻返回，说明 read 请求已经成功发起了，因此不会对用户线程产生任何 block。然后，内核会等待数据准备完成，然后将数据拷贝到用户线程，当这一切都完成之后，内核会给用户线程发送一个信号，告诉它 read 操作完成了。也就说用户线程完全不需要实际的整个 IO 操作是如何进行的，只需要先发起一个请求，当接收内核返回的成功信号时表示 IO 操作已经完成，可以直接去使用数据了。<br>也就说在异步 IO 模型中，IO 操作的两个阶段都不会阻塞用户线程，这两个阶段都是由内核自动完成，然后发送一个信号告知用户线程操作已完成。用户线程中不需要再次调用 IO 函数进行具体的读写。这点是和信号驱动模型有所不同的，在信号驱动模型中，当用户线程接收到信号表示数据已经就绪，然后需要用户线程调用 IO 函数进行实际的读写操作；而在异步 IO 模型中，收到信号表示 IO 操作已经完成，不需要再在用户线程中调用 IO 函数进行实际的读写操作。<br>注意，异步 IO 是需要操作系统的底层支持，在 Java 7 中，提供了 Asynchronous IO。</p><h3 id="JAVA-IO-包"><a href="#JAVA-IO-包" class="headerlink" title="JAVA IO 包"></a>JAVA IO 包</h3><h3 id="JAVA-NIO"><a href="#JAVA-NIO" class="headerlink" title="JAVA NIO"></a>JAVA NIO</h3><p>NIO 主要有三大核心部分：Channel(通道)，Buffer(缓冲区), Selector。传统 IO 基于字节流和字符流进行操作，而 NIO 基于 Channel 和 Buffer(缓冲区)进行操作，数据总是从通道读取到缓冲区中，或者从缓冲区写入到通道中。Selector(选择区)用于监听多个通道的事件（比如：连接打开，<br>数据到达）。因此，单个线程可以监听多个数据通道。NIO 和传统 IO之间第一个最大的区别是，IO是面向流的，NIO 是面向缓冲区的。</p><h4 id="NIO-的缓冲区"><a href="#NIO-的缓冲区" class="headerlink" title="NIO 的缓冲区"></a>NIO 的缓冲区</h4><p>Java IO 面向流意味着每次从流中读一个或多个字节，直至读取所有字节，它们没有被缓存在任何地方。此外，它不能前后移动流中的数据。如果需要前后移动从流中读取的数据，需要先将它缓存到一个缓冲区。NIO的缓冲导向方法不同。数据读取到一个它稍后处理的缓冲区，需要时可在缓冲区中前后移动。这就增加了处理过程中的灵活性。但是，还需要检查是否该缓冲区中包含所有您需要处理的数据。而且，需确保当更多的数据读入缓冲区时，不要覆盖缓冲区里尚未处理的数据。</p><h4 id="NIO-的非阻塞"><a href="#NIO-的非阻塞" class="headerlink" title="NIO 的非阻塞"></a>NIO 的非阻塞</h4><p>IO 的各种流是阻塞的。这意味着，当一个线程调用read()或write()时，该线程被阻塞，直到有一些数据被读取，或数据完全写入。该线程在此期间不能再干任何事情了。 NIO 的非阻塞模式，使一个线程从某通道发送请求读取数据，但是它仅能得到目前可用的数据，如果目前没有数据可用时，就什么都不会获取。而不是保持线程阻塞，所以直至数据变的可以读取之前，该线程可以继续做其他的事情。非阻塞写也是如此。一个线程请求写入一些数据到某通道，但不需要等待它完全写入，这个线程同时可以去做别的事情。线程通常将非阻塞IO的空闲时间用于在其它通道上执行IO操作，所以一个单独的线程现在可以管理多个输入和输出通道（channel）。</p><h3 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h3><p>首先说一下 Channel，国内大多翻译成“通道”。Channel 和 IO 中的 Stream(流)是差不多一个等级的。只不过 Stream 是单向的，譬如：InputStream, OutputStream，而 Channel 是双向的，既可以用来进行读操作，又可以用来进行写操作。</p><p>NIO 中的 Channel 的主要实现有：</p><ol><li>FileChannel</li><li>DatagramChannel</li><li>SocketChannel</li><li>ServerSocketChannel<br>这里看名字就可以猜出个所以然来：分别可以对应文件 IO、UDP 和 TCP（Server 和 Client）。<br>下面演示的案例基本上就是围绕这 4 个类型的 Channel 进行陈述的。</li></ol><h3 id="Buffer"><a href="#Buffer" class="headerlink" title="Buffer"></a>Buffer</h3><p>Buffer，故名思意，缓冲区，实际上是一个容器，是一个连续数组。Channel提供从文件、网络读取数据的渠道，但是读取或写入的数据都必须经由 Buffer。</p><p>上面的图描述了从一个客户端向服务端发送数据，然后服务端接收数据的过程。客户端发送数据时，必须先将数据存入 Buffer 中，然后将 Buffer 中的内容写入通道。服务端这边接收数据必须通过 Channel 将数据读入到 Buffer 中，然后再从 Buffer 中取出数据来处理。<br>在 NIO 中，Buffer 是一个顶层父类，它是一个抽象类，常用的 Buffer 的子类有：ByteBuffer、IntBuffer、 CharBuffer、 LongBuffer、 DoubleBuffer、FloatBuffer、ShortBuffer</p><h3 id="Selector"><a href="#Selector" class="headerlink" title="Selector"></a>Selector</h3><p>Selector 类是 NIO 的核心类，Selector能够检测多个注册的通道上是否有事件发生，如果有事件发生，便获取事件然后针对每个事件进行相应的响应处理。这样一来，只是用一个单线程就可以管理多个通道，也就是管理多个连接。这样使得只有在连接真正有读写事件发生时，才会调用函数来进行读写，就大大地减少了系统开销，并且不必为每个连接都创建一个线程，不用去维护多个线程，并且避免了多线程之间的上下文切换导致的开销。</p><h2 id="JVM-类加载机制"><a href="#JVM-类加载机制" class="headerlink" title="JVM 类加载机制"></a>JVM 类加载机制</h2><p>JVM 类加载机制分为五个部分：加载，验证，准备，解析，初始化，下面我们就分别来看一下这五个过程。</p><h4 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h4><p>加载是类加载过程中的一个阶段，这个阶段会在内存中生成一个代表这个类的 java.lang.Class对象，作为方法区这个类的各种数据的入口。注意这里不一定非得要从一个 Class 文件获取，这里既可以从 ZIP 包中读取（比如从 jar 包和 war 包中读取），也可以在运行时计算生成（动态代理），也可以由其它文件生成（比如将 JSP 文件转换成对应的 Class 类）。</p><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p>这一阶段的主要目的是为了确保 Class 文件的字节流中包含的信息是否符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。</p><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><p>准备阶段是正式为类变量分配内存并设置类变量的初始值阶段，即在方法区中分配这些变量所使用的内存空间。注意这里所说的初始值概念，比如一个类变量定义为：<br>public static int v = 8080;<br>实际上变量 v 在准备阶段过后的初始值为 0 而不是 8080，将 v 赋值为 8080 的 put static 指令是程序被编译后，存放于类构造器<client>方法之中。<br>但是注意如果声明为：</client></p><pre><code>public static final int v = 8080;</code></pre><p>在编译阶段会为 v 生成 ConstantValue 属性，在准备阶段虚拟机会根据 ConstantValue 属性将 v赋值为 8080。</p><h4 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h4><p>解析阶段是指虚拟机将常量池中的符号引用替换为直接引用的过程。符号引用就是 class 文件中的：</p><ol><li>CONSTANT_Class_info</li><li>CONSTANT_Field_info</li><li>CONSTANT_Method_info</li></ol><p>等类型的常量。</p><h4 id="符号引用"><a href="#符号引用" class="headerlink" title="符号引用"></a>符号引用</h4><p> 符号引用与虚拟机实现的布局无关，引用的目标并不一定要已经加载到内存中。各种虚拟机实现的内存布局可以各不相同，但是它们能接受的符号引用必须是一致的，因为符号引用的字面量形式明确定义在 Java 虚拟机规范的 Class 文件格式中。</p><h4 id="直接引用"><a href="#直接引用" class="headerlink" title="直接引用"></a>直接引用</h4><p> 直接引用可以是指向目标的指针，相对偏移量或是一个能间接定位到目标的句柄。如果有了直接引用，那引用的目标必定已经在内存中存在。</p><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>初始化阶段是类加载最后一个阶段，前面的类加载阶段之后，除了在加载阶段可以自定义类加载器以外，其它操作都由JVM主导。到了初始阶段，才开始真正执行类中定义的 Java 程序代码。</p><h4 id="类构造器"><a href="#类构造器" class="headerlink" title="类构造器"></a>类构造器<client></client></h4><p>初始化阶段是执行类构造器<client>方法的过程。<client>方法是由编译器自动收集类中的类变量的赋值操作和静态语句块中的语句合并而成的。虚拟机会保证子<client>方法执行之前，父类的<client>方法已经执行完毕，如果一个类中没有对静态变量赋值也没有静态语句块，那么编译器可以不为这个类生成<client>()方法。<br>注意以下几种情况不会执行类初始化：</client></client></client></client></client></p><ol><li>通过子类引用父类的静态字段，只会触发父类的初始化，而不会触发子类的初始化。</li><li>定义对象数组，不会触发该类的初始化。</li><li>常量在编译期间会存入调用类的常量池中，本质上并没有直接引用定义常量的类，不会触<br>发定义常量所在的类。</li><li>通过类名获取 Class 对象，不会触发类的初始化。</li><li>通过 Class.forName 加载指定类时，如果指定参数 initialize 为 false 时，也不会触发类初<br>始化，其实这个参数是告诉虚拟机，是否要对类进行初始化。</li><li>通过 ClassLoader 默认的 loadClass 方法，也不会触发初始化动作。</li></ol><h3 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h3><p>虚拟机设计团队把加载动作放到 JVM 外部实现，以便让应用程序决定如何获取所需的类，JVM 提供了 3 种类加载器：</p><h4 id="启动类加载器-Bootstrap-ClassLoader"><a href="#启动类加载器-Bootstrap-ClassLoader" class="headerlink" title="启动类加载器(Bootstrap ClassLoader)"></a>启动类加载器(Bootstrap ClassLoader)</h4><ol><li>负责加载 JAVA_HOME\lib 目录中的，或通过-Xbootclasspath 参数指定路径中的，且被<br>虚拟机认可（按文件名识别，如 rt.jar）的类。</li></ol><h4 id="扩展类加载器-Extension-ClassLoader"><a href="#扩展类加载器-Extension-ClassLoader" class="headerlink" title="扩展类加载器(Extension ClassLoader)"></a>扩展类加载器(Extension ClassLoader)</h4><ol start="2"><li>负责加载 JAVA_HOME\lib\ext 目录中的，或通过 java.ext.dirs 系统变量指定路径中的类<br>库。</li></ol><h4 id="应用程序类加载器-Application-ClassLoader-："><a href="#应用程序类加载器-Application-ClassLoader-：" class="headerlink" title="应用程序类加载器(Application ClassLoader)："></a>应用程序类加载器(Application ClassLoader)：</h4><ol start="3"><li>负责加载用户路径（classpath）上的类库。<br>JVM 通过双亲委派模型进行类的加载，当然我们也可以通过继承 java.lang.ClassLoader实现自定义的类加载器。</li></ol><h3 id="双亲委派"><a href="#双亲委派" class="headerlink" title="双亲委派"></a>双亲委派</h3><p>当一个类收到了类加载请求，他首先不会尝试自己去加载这个类，而是把这个请求委派给父类去完成，每一个层次类加载器都是如此，因此所有的加载请求都应该传送到启动类加载其中，只有当父类加载器反馈自己无法完成这个请求的时候（在它的加载路径下没有找到所需加载的Class），子类加载器才会尝试自己去加载。采用双亲委派的一个好处是比如加载位于rt.jar包中的类java.lang.Object，不管是哪个加载器加载这个类，最终都是委托给顶层的启动类加载器进行加载，这样就保证了使用不同的类加载器最终得到的都是同样一个 Object 对象。</p><h3 id="OSGI（动态模型系统）"><a href="#OSGI（动态模型系统）" class="headerlink" title="OSGI（动态模型系统）"></a>OSGI（动态模型系统）</h3><p>OSGi(Open Service Gateway Initiative)，是面向 Java 的动态模型系统，是 Java 动态化模块化系统的一系列规范。</p><h4 id="动态改变构造"><a href="#动态改变构造" class="headerlink" title="动态改变构造"></a>动态改变构造</h4><p>OSGi 服务平台提供在多种网络设备上无需重启的动态改变构造的功能。为了最小化耦合度和促使这些耦合度可管理，OSGi技术提供一种面向服务的架构，它能使这些组件动态地发现对方。</p><h4 id="模块化编程与热插拔"><a href="#模块化编程与热插拔" class="headerlink" title="模块化编程与热插拔"></a>模块化编程与热插拔</h4><p>OSGi 旨在为实现 Java 程序的模块化编程提供基础条件，基于OSGi的程序很可能可以实现模块级的热插拔功能，当程序升级更新时，可以只停用、重新安装然后启动程序的其中一部分，这对企业级程序开发来说是非常具有诱惑力的特性。<br>OSGi 描绘了一个很美好的模块化开发目标，而且定义了实现这个目标的所需要服务与架构，同时也有成熟的框架进行实现支持。但并非所有的应用都适合采用 OSGi 作为基础架构，它在提供强大功能同时，也引入了额外的复杂度，因为它不遵守了类加载的双亲委托模型。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JVM 是可运行 Java 代码的假想计算机 ，包括一套字节码指令集、一组寄存器、一个栈、一个垃圾回收，堆 和 一个存储方法域。JVM 是运行在操作系统之上的，它与硬件没有直接的交互。&lt;/p&gt;
    
    </summary>
    
      <category term="2021年12月" scheme="http://yoursite.com/categories/2021%E5%B9%B412%E6%9C%88/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="JVM" scheme="http://yoursite.com/tags/JVM/"/>
    
  </entry>
  
</feed>
